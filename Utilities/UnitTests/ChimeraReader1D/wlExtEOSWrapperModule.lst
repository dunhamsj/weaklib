


PGF90 (Version     14.9)          03/12/2015  00:11:53      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir /opt/cray/hdf5/1.8.13/PGI/141/include
          -idir /opt/cray/mpt/7.0.4/gni/mpich2-pgi/141/include
          -idir /opt/cray/rca/1.0.0-2.0502.53711.3.127.ari/include
          -idir /opt/cray/xpmem/0.1-2.0502.55507.3.2.ari/include
          -idir /opt/cray/gni-headers/3.0-1.0502.9684.5.2.ari/include
          -idir /opt/cray/pmi/5.0.4-1.0000.10161.132.4.ari/include
          -idir /opt/cray/ugni/5.0-1.0502.9685.4.24.ari/include
          -idir /opt/cray/udreg/2.3.2-1.0502.9275.1.12.ari/include
          -idir /opt/cray/alps/5.2.1-2.0502.9072.13.1.ari/include
          -idir /opt/cray/wlm_detect/1.0-1.0502.53341.1.1.ari/include
          -idir /opt/cray/alps/5.2.1-2.0502.9072.13.1.ari/include
          -idir /opt/cray/krca/1.0.0-2.0502.53880.4.104.ari/include
          -idir /opt/cray-hss-devel/7.2.0/include
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: ../../../External/EOSInterface/wlExtEOSWrapperModule.f90

(    1) MODULE wlExtEOSWrapperModule
(    2) !-----------------------------------------------------------------------
(    3) !
(    4) !    File:         wlExtEOSWrapperModule.f90
(    5) !    Module:       wlExtEOSWrapperModule
(    6) !    Type:         Module w/ Subroutines
(    7) !    Author:       E. J. Lentz, Dept. Phys. & Astronomy
(    8) !                  U. Tennesee, Knoxville
(    9) !
(   10) !    Created:      7/30/13
(   11) !    WeakLib ver:  1/13/15
(   12) !
(   13) !    Purpose:
(   14) !      Wrappers to make direct calls equation of state subroutines
(   15) !       given the (rho,T,Ye) and type of EoS required
(   16) !
(   17) !    Units:
(   18) !      Pressure      :
(   19) !      Energy(int)   :
(   20) !      Entropy       : kb/baryon
(   21) !      Chem.Pot.elec : MeV 
(   22) !
(   23) !  CONTAINS:
(   24) !    get_elec_eos
(   25) !    get_full_eos
(   26) !
(   27) !    Modules used:
(   28) !  wlKindModule
(   29) !  wlExtNumericalModule
(   30) !  wlExtPhysicalConstantsModule
(   31) !-----------------------------------------------------------------------
(   32) !  NOTE: These routines are NOT thread safe! Do not call from within
(   33) !        shared memory parallel regions (i.e., OpenMP PARALLEL regions)
(   34) !        unless specific precautions are taken to prevent threads from
(   35) !        overwriting shared "backchannel" variables used to access and
(   36) !        within EoS routines
(   37) !-----------------------------------------------------------------------
(   38) 
(   39) USE wlKindModule, ONLY: double => dp






PGF90 (Version     14.9)          03/12/2015  00:11:53      page 2

(   40) USE wlExtNumericalModule, ONLY: zero, one
(   41) USE wlExtPhysicalConstantsModule, ONLY: dmnp, kmev, rmu, cm3fm3, ergmev, &
(   42) & asig
(   43) 
(   44) PUBLIC wlGetElectronEOS
(   45) PUBLIC wlGetFullEOS
(   46) 
(   47) PRIVATE eos_bck_nse
(   48) 
(   49) REAL(double), PARAMETER     :: kfm = cm3fm3/rmu    ! ( # nucleons/gram )( cm3/fm3 )
(   50) REAL(double), PARAMETER     :: kp  = ergmev/cm3fm3 ! ( erg/cm3 ) / ( mev/fm3 )
(   51) REAL(double), PARAMETER     :: ku  = ergmev/rmu    ! ( # nucleons/gram )( erg/mev )
(   52) REAL(double), PARAMETER     :: UTOT0 = 8.9d0       ! change in the zero of energy [MeV]
(   53) 
(   54) REAL(double), DIMENSION(4)  :: inpvar_save         ! retained copy of input var for LS retries
(   55) 
(   56) PRIVATE
(   57) 
(   58) CONTAINS
(   59) 
(   60) SUBROUTINE wlGetElectronEOS( rho, temp, ye, press_e, entrop_e, energ_e, chem_e )
(   61) !-----------------------------------------------------------------------
(   62) !
(   63) !    Module:       wlGetElectronEOS
(   64) !    Type:         Module Subroutine
(   65) !    Author:       E. J. Lentz, Dept. Phys. & Astronomy
(   66) !                  U. Tennesee, Knoxville
(   67) !
(   68) !    Date:         7/30/13
(   69) !
(   70) !    Purpose:
(   71) !      Wrapper for electron EoS only
(   72) !
(   73) !    Input arguments:
(   74) !
(   75) !  rho            : Density [g/cm3]
(   76) !  temp           : Temperature [K]
(   77) !  Ye             : Electron fraction
(   78) !
(   79) !    Output arguments:
(   80) !  press_e        : electron/positron/photon pressure
(   81) !  entrop_e       : electron/positron/photon entropy
(   82) !  energ_e        : electron/positron/photon entropy
(   83) !  chem_e         : electron chemical potential
(   84) !                   (positron chemical potential = -chem_e)
(   85) !-----------------------------------------------------------------------
(   86) 
(   87) IMPLICIT none
(   88) 
(   89) !-----------------------------------------------------------------------
(   90) !  Input variables
(   91) !-----------------------------------------------------------------------
(   92) 
(   93) REAL(double), INTENT(in)    :: rho         ! Density [g/cm3]
(   94) REAL(double), INTENT(in)    :: temp        ! Temperature [K]
(   95) REAL(double), INTENT(in)    :: Ye          ! Electron fraction
(   96) 
(   97) !-----------------------------------------------------------------------






PGF90 (Version     14.9)          03/12/2015  00:11:53      page 3

(   98) !  Output variables
(   99) !-----------------------------------------------------------------------
(  100) 
(  101) REAL(double), INTENT(out)   :: press_e     ! electron/positron/photon pressure
(  102) REAL(double), INTENT(out)   :: entrop_e    ! electron/positron/photon entropy [kb/baryon]
(  103) REAL(double), INTENT(out)   :: energ_e     ! electron/positron/photon energy
(  104) REAL(double), INTENT(out)   :: chem_e      ! electron chemical potential [MeV]
(  105) 
(  106) !-----------------------------------------------------------------------
(  107) !  Local variables 
(  108) !-----------------------------------------------------------------------
(  109) 
(  110) REAL(double)                :: pe          ! raw electron pressure [dynes cm^{-2}]
(  111) REAL(double)                :: ee          ! raw electron energy [ergs cm^{-3}]
(  112) REAL(double)                :: yeplus      ! positron fraction [unused]
(  113) REAL(double)                :: rel         ! relativity parameter [unused]
(  114) REAL(double)                :: tmev        ! temperature [MeV]
(  115) REAL(double)                :: brydns      ! LS input baryon density [fm^-3]
(  116) 
(  117) !-----------------------------------------------------------------------
(  118) !  Convert to units for electron EoS
(  119) !-----------------------------------------------------------------------
(  120) 
(  121) brydns    = rho * kfm
(  122) tmev      = temp * kmev
(  123) 
(  124) !-----------------------------------------------------------------------
(  125) !  Compute electron equation of state
(  126) !-----------------------------------------------------------------------
(  127) 
(  128) CALL e_p_eos( brydns, tmev, ye, pe, ee, entrop_e, chem_e, yeplus, rel )
(  129) 
(  130) !-----------------------------------------------------------------------
(  131) !  Convert to units for Chimera to be returned
(  132) !-----------------------------------------------------------------------
(  133) 
(  134) press_e   = pe * kp
(  135) energ_e   = ee * ku
(  136) 
(  137) END SUBROUTINE wlGetElectronEOS
(  138) 
(  139) !-----------------------------------------------------------------------
(  140) !-----------------------------------------------------------------------
(  141) 
(  142) SUBROUTINE wlGetFullEOS( rho, temp, ye, flag, fail, press, energ,       &
(  143) & entrop, chem_n, chem_p, chem_e, xn_neut, xn_prot, xn_alpha, xn_heavy, &
(  144) & a_heavy, z_heavy, be_heavy )
(  145) !-----------------------------------------------------------------------
(  146) !
(  147) !    Module:       wlGetFullEOS
(  148) !    Type:         Module Subroutine
(  149) !    Author:       E. J. Lentz, Dept. Phys. & Astronomy
(  150) !                  U. Tennesee, Knoxville
(  151) !
(  152) !    Date:         8/09/13
(  153) !
(  154) !    Purpose:
(  155) !      Wrapper for full nucleonic + electron EoS






PGF90 (Version     14.9)          03/12/2015  00:11:53      page 4

(  156) !
(  157) !    Input arguments:
(  158) !
(  159) !  rho            : Density [g/cm3]
(  160) !  temp           : Temperature [K]
(  161) !  Ye             : Electron fraction
(  162) !  Flag           : eos flag
(  163) !
(  164) !    Output arguments:
(  165) !  fail           : failure flag, true if EoS did not converge
(  166) !  press          : electron/positron/photon pressure
(  167) !  energ          : electron/positron/photon energy
(  168) !  entrop         : electron/positron/photon entropy
(  169) !  chem_n         : free neutron cemical potential
(  170) !  chem_p         : free proton chemical potential
(  171) !  chem_e         : electron chemical potential
(  172) !                   (positron chemical potential = -chem_e)
(  173) !  xn_neut        : free neutron fraction
(  174) !  xn_prot        : free proton fraction
(  175) !  xn_alpha       : alpha fraction
(  176) !  xn_heavy       : heavy nucleus fraction
(  177) !  a_heavy        : A for mean heavy nucleus
(  178) !  z_heavy        : Z for mean heavy nucleus
(  179) !  be_heavy       : binding energy for mean heavy nucleus
(  180) !-----------------------------------------------------------------------
(  181) 
(  182) USE el_eos_module, ONLY: EPRESS, EU, ES
(  183) USE eos_m4c_module, ONLY: PTOT, UTOT, STOT, XNUT, XPROT, XH, MUN,      &
(  184) & MUPROT, A, X, BUNUC
(  185) USE eos_bck_module, ONLY: dbck, tbck, yebck, dtran, xnbck,  &
(  186) & xpbck, xhbck, ptotbck, uhat, etot, stotbck, un, zabck, ahbck, theta, &
(  187) & xabck, b_hvy
(  188) 
(  189) IMPLICIT none
(  190) 
(  191) !-----------------------------------------------------------------------
(  192) !  Input variables
(  193) !-----------------------------------------------------------------------
(  194) 
(  195) CHARACTER(len=1), INTENT(inout) :: flag     ! nuclear eos selection flag
(  196) 
(  197) REAL(double), INTENT(in)     :: rho         ! Density [g/cm3]
(  198) REAL(double), INTENT(in)     :: temp        ! Temperature [K]
(  199) REAL(double), INTENT(in)     :: Ye          ! Electron fraction
(  200) 
(  201) !-----------------------------------------------------------------------
(  202) !  Output variables
(  203) !-----------------------------------------------------------------------
(  204) 
(  205) LOGICAL, INTENT(out)        :: fail        ! did EoS fail to converge
(  206) 
(  207) REAL(double), INTENT(out)   :: press       ! pressure
(  208) REAL(double), INTENT(out)   :: energ       ! internal energy
(  209) REAL(double), INTENT(out)   :: entrop      ! entropy [kb/baryon]
(  210) REAL(double), INTENT(out)   :: chem_n      ! free neutron chemical potential
(  211) REAL(double), INTENT(out)   :: chem_p      ! free proton chemical potential
(  212) REAL(double), INTENT(out)   :: chem_e      ! electron chemical potential
(  213) REAL(double), INTENT(out)   :: xn_neut     ! free neutron fraction






PGF90 (Version     14.9)          03/12/2015  00:11:53      page 5

(  214) REAL(double), INTENT(out)   :: xn_prot     ! free proton fraction
(  215) REAL(double), INTENT(out)   :: xn_alpha    ! alpha fraction
(  216) REAL(double), INTENT(out)   :: xn_heavy    ! heavy fraction
(  217) REAL(double), INTENT(out)   :: a_heavy     ! A for mean heavy nucleus
(  218) REAL(double), INTENT(out)   :: z_heavy     ! Z for mean heavy nucleus
(  219) REAL(double), INTENT(out)   :: be_heavy    ! Binding energy for mean heavy nucleus
(  220) 
(  221) !-----------------------------------------------------------------------
(  222) !  Local variables 
(  223) !-----------------------------------------------------------------------
(  224) 
(  225) INTEGER                     :: iflag       ! LS input type flag
(  226) INTEGER                     :: eosflg      ! LS output EoS type flag
(  227) INTEGER                     :: forflg      ! LS EoS forcing flag
(  228) INTEGER                     :: sf          ! eos success flag
(  229) INTEGER                     :: ieos        ! eos counter
(  230) 
(  231) REAL(double), DIMENSION(4)  :: inpvar      ! input variables for LS EoS
(  232) 
(  233) REAL(double)                :: pe          ! raw electron pressure [dynes cm^{-2}]
(  234) REAL(double)                :: ee          ! raw electron energy [ergs cm^{-3}]
(  235) REAL(double)                :: entrop_e    ! entropy of electron/photon gas
(  236) REAL(double)                :: yeplus      ! positron fraction [unused]
(  237) REAL(double)                :: rel         ! relativity parameter [unused]
(  238) REAL(double)                :: tmev        ! temperature [MeV]
(  239) REAL(double)                :: brydns      ! LS input baryon density [fm^-3]
(  240) 
(  241) REAL(double)                :: xprev       ! LS input protron fraction
(  242) REAL(double)                :: pprev       ! previous value of proton density
(  243) REAL(double)                :: t_old       ! old value of temperature
(  244) 
(  245) !-----------------------------------------------------------------------
(  246) !  Convert to units for EoS and other intializations
(  247) !-----------------------------------------------------------------------
(  248) 
(  249) fail      = .false.
(  250) press     = zero
(  251) energ     = zero
(  252) entrop    = zero
(  253) chem_n    = zero
(  254) chem_p    = zero
(  255) chem_e    = zero
(  256) xn_neut   = zero
(  257) xn_prot   = zero
(  258) xn_alpha  = zero
(  259) xn_heavy  = zero
(  260) a_heavy   = zero
(  261) z_heavy   = zero
(  262) be_heavy  = zero
(  263) brydns    = rho * kfm
(  264) tmev      = temp * kmev
(  265) 
(  266) iflag     = 1
(  267) forflg    = 0
(  268) sf        = 1
(  269) 
(  270) !-----------------------------------------------------------------------
(  271) !  Compute electron equation of state






PGF90 (Version     14.9)          03/12/2015  00:11:53      page 6

(  272) !-----------------------------------------------------------------------
(  273) 
(  274) CALL e_p_eos( brydns, tmev, ye, pe, ee, entrop_e, chem_e, yeplus, rel )
(  275) 
(  276) SELECT CASE ( flag )
(  277) 
(  278)   CASE ('L') 
(  279) 
(  280) !-----------------------------------------------------------------------
(  281) ! Lattimer-Swesty EoS
(  282) !-----------------------------------------------------------------------
(  283) 
(  284)   pprev     = ye * brydns
(  285)   inpvar(1) = tmev
(  286)   inpvar(2) = 0.155d0
(  287)   inpvar(3) = -15.d0
(  288)   inpvar(4) = -10.d0
(  289) 
(  290)   CALL inveos( inpvar, t_old, ye, brydns, iflag, eosflg, forflg, sf,    &
(  291) &   xprev, pprev )
(  292) 
(  293) !-----------------------------------------------------------------------
(  294) !
(  295) !   ||||| If sf /= 0 (LS EOS has converged), proceed normally. |||||
(  296) !
(  297) !-----------------------------------------------------------------------
(  298) 
(  299)   IF ( sf /= 0 ) THEN
(  300) 
(  301)     inpvar_save(1) = pprev
(  302)     inpvar_save(2) = inpvar(2)
(  303)     inpvar_save(3) = inpvar(3)
(  304)     inpvar_save(4) = inpvar(4)
(  305) 
(  306) !-----------------------------------------------------------------------
(  307) !  Calculate XPROT and XNUT if ye < 0.03
(  308) !-----------------------------------------------------------------------
(  309) 
(  310)     IF ( ye < 0.03d0 ) THEN
(  311)       XPROT         = ye
(  312)       XNUT          = one - ye
(  313)     END IF
(  314) 
(  315) !-----------------------------------------------------------------------
(  316) !
(  317) !  ||||| If sf = 0 (LS EOS has failed to converge), call the  |||||
(  318) !  |||||   Lattimer-Swesty EOS again with inpvar_save from    |||||
(  319) !  |||||         previous call and hope it works!             |||||
(  320) !
(  321) !-----------------------------------------------------------------------
(  322) 
(  323)   ELSE  ! sf = 0
(  324)     pprev     = DMIN1( ye * brydns, inpvar_save(1) )
(  325)     inpvar(1) = tmev
(  326)     inpvar(2) = inpvar_save(2)
(  327)     inpvar(3) = inpvar_save(3)
(  328)     inpvar(4) = inpvar_save(4)
(  329) 






PGF90 (Version     14.9)          03/12/2015  00:11:53      page 7

(  330)     CALL inveos( inpvar, t_old, ye, brydns, iflag, eosflg, forflg, sf,  &
(  331) &     xprev, pprev )
(  332) 
(  333) !-----------------------------------------------------------------------
(  334) !  Calculate XPROT and XNUT if ye < 0.03
(  335) !-----------------------------------------------------------------------
(  336) 
(  337)     IF ( ye < 0.03d0 ) THEN
(  338)       XPROT         = ye
(  339)       XNUT          = one - ye
(  340)     END IF
(  341) 
(  342)   END IF ! sf /= 0
(  343) 
(  344) !-----------------------------------------------------------------------
(  345) !  Failure mode if retry failed
(  346) !-----------------------------------------------------------------------
(  347) 
(  348)   IF ( sf == 0 ) THEN
(  349)     fail = .true.
(  350)     RETURN
(  351)   END IF
(  352) 
(  353) !-----------------------------------------------------------------------
(  354) !  Convert to units for Chimera to be returned
(  355) !-----------------------------------------------------------------------
(  356) 
(  357)   press    = ( PTOT - EPRESS + pe ) * kp
(  358)   energ    = ( UTOT + UTOT0 - EU + ee ) * kp
(  359)   entrop   = ( STOT - ES ) + entrop_e
(  360)   chem_n   = ( MUN - dmnp )
(  361)   chem_p   =   MUPROT
(  362)   xn_neut  =   XNUT
(  363)   xn_prot  =   XPROT
(  364)   xn_heavy =   XH
(  365)   xn_alpha =   MAX( zero, one - xn_neut - xn_prot -xn_alpha ) 
(  366)   a_heavy  =   A
(  367)   z_heavy  =   X * A
(  368)   be_heavy =   BUNUC
(  369) 
(  370) !-----------------------------------------------------------------------
(  371) !  BCK EoS (NSE only!!!)
(  372) !-----------------------------------------------------------------------
(  373) 
(  374)   CASE ('B')
(  375) 
(  376) 
(  377) ! --- eosdtgen_x ---
(  378) 
(  379) !-----------------------------------------------------------------------
(  380) !  Call the nuclear equation of state
(  381) !-----------------------------------------------------------------------
(  382) 
(  383)   dbck     = brydns
(  384)   tbck     = tmev
(  385)   yebck    = ye
(  386)   un       = zero
(  387)   uhat     = zero






PGF90 (Version     14.9)          03/12/2015  00:11:53      page 8

(  388)   theta    = zero
(  389)   zabck    = zero
(  390)   xabck    = zero
(  391)   dtran    = zero
(  392) 
(  393)   CALL eos_bck_nse
(  394) 
(  395)   IF ( xnbck <= zero  .or.  xpbck <= zero  .or.  stotbck <= zero ) THEN
(  396)     dtran       = dbck
(  397)     CALL eos_bck_nse
(  398)   END IF ! xnbck < 0 or xpbck < 0 or stot < 0
(  399) 
(  400) !-----------------------------------------------------------------------
(  401) !  Convert thermodynamic quantities from units of mev and fm to cgs
(  402) !   units.
(  403) !-----------------------------------------------------------------------
(  404) 
(  405)   press    = ( ptotbck + pe ) * kp
(  406)   energ    = ( etot - yebck * dmnp + ee ) * ku
(  407)   entrop   = stotbck + entrop_e
(  408)   chem_n   = un
(  409)   chem_p   = un - uhat
(  410)   IF ( dbck >= dtran ) then
(  411)     xnbck  = one - ye
(  412)     xpbck  = ye
(  413)     xhbck  = zero
(  414)   END IF ! dbck >= dtran
(  415)   xn_neut  = DMAX1( xnbck , zero )
(  416)   xn_prot  = DMAX1( xpbck , zero )
(  417)   xn_heavy = DMAX1( xhbck , zero )
(  418)   xn_alpha = MAX( zero, one - xn_neut - xn_prot -xn_alpha ) 
(  419)   a_heavy  = ahbck
(  420)   z_heavy  = zabck * ahbck
(  421)   be_heavy = b_hvy
(  422) 
(  423) !-----------------------------------------------------------------------
(  424) !  Stop if unimplemented EoS is requested
(  425) !-----------------------------------------------------------------------
(  426) 
(  427)   CASE DEFAULT
(  428) 
(  429)   WRITE(*,*) "Bad EoS flag in get_full_eos ", flag
(  430)   STOP "Bad EoS flag in get_full_eos"
(  431) 
(  432) END SELECT
(  433) 
(  434) END SUBROUTINE wlGetFullEOS
(  435) 
(  436) !-----------------------------------------------------------------------
(  437) !  PRIVATE copy of bck "eos" driver routine for NSE computations only
(  438) !-----------------------------------------------------------------------
(  439) 
(  440) SUBROUTINE eos_bck_nse
(  441) 
(  442) USE eos_bck_module, ONLY: dbck, tbck, yebck, erad, prad, enu, pnu,      &
(  443) & sneu, dtran, etot, eh, ed, ptotbck, ph, pd, stotbck, sh, sd, dedt, un
(  444) 
(  445) IMPLICIT none






PGF90 (Version     14.9)          03/12/2015  00:11:53      page 9

(  446) 
(  447) !-----------------------------------------------------------------------
(  448) !        Local variables.
(  449) !-----------------------------------------------------------------------
(  450) 
(  451) REAL(double)           :: at4           ! photon energy (MeV fm^{-3})
(  452) REAL(double)           :: srad          ! entropy (nucleon^{-1})
(  453) REAL(double)           :: dtest         ! estimate of transition density to nuclear matter
(  454) 
(  455) !-----------------------------------------------------------------------
(  456) !-----------------------------------------------------------------------
(  457) 
(  458) !*************************************************** radiation *********
(  459) 
(  460) at4             = asig * tbck * tbck * tbck * tbck
(  461) erad            = at4/dbck
(  462) prad            = at4/3.d0
(  463) srad            = ( erad + prad/dbck )/tbck
(  464) enu             = erad
(  465) pnu             = prad
(  466) sneu            = srad
(  467) 
(  468) !**************************************************** nucleons *********
(  469) 
(  470) !........Matter is in NSE
(  471) 
(  472) dtest           = .16d0 * ( 1.d0 - 3.d0 * ( .5d0 - yebck )**2 )
(  473) IF ( dtran <= 0.0d0 ) dtran = dtest
(  474) dtran           = DMIN1( dtran, dtest )
(  475) 
(  476) !........Transition to nuclear matter
(  477) 
(  478) IF ( dbck >= dtran ) THEN
(  479)   CALL eosnm
(  480) ELSE
(  481)   CALL saha
(  482) END IF
(  483) 
(  484) !************************************************ get totals ***********
(  485) !-----------------------------------------------------------------------
(  486) !        Energy offset
(  487) !
(  488) !  The subroutine  eosnm, saha, and eosnuc_x return the energy including
(  489) !   the binding energy.
(  490) !  The quantity - yebck * dmnp is added so that the binding energy is
(  491) !   relative to free neutrons rather than free neutrons and protons
(  492) !  An energy offset 8.9d0 MeV/nucleon is added to prevent the internal
(  493) !   energy from becoming negative
(  494) !  Subtracting dmnp from un also subtracts it from up since the latter
(  495) !   is given by un - uhat. This normalizes these chemical potentials to
(  496) !   those given by the LS EOS.
(  497) !-----------------------------------------------------------------------
(  498) 
(  499) etot            = eh + erad + ed + UTOT0
(  500) ptotbck         = ph + prad + pd
(  501) stotbck         = sh + srad + sd
(  502) un              = un - dmnp
(  503) 






PGF90 (Version     14.9)          03/12/2015  00:11:53      page 10

(  504) !***************************************** approx for energy inversion *
(  505) 
(  506) dedt            = sh + erad*4.d0/tbck + ed/tbck
(  507) 
(  508) RETURN
(  509) END SUBROUTINE eos_bck_nse
(  510) 
(  511) !-----------------------------------------------------------------------
(  512) !-----------------------------------------------------------------------
(  513) 
(  514) END MODULE wlExtEOSWrapperModule
