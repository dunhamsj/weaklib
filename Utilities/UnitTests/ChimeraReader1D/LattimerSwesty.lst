


PGF90 (Version     14.9)          03/12/2015  00:11:50      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir /opt/cray/hdf5/1.8.13/PGI/141/include
          -idir /opt/cray/mpt/7.0.4/gni/mpich2-pgi/141/include
          -idir /opt/cray/rca/1.0.0-2.0502.53711.3.127.ari/include
          -idir /opt/cray/xpmem/0.1-2.0502.55507.3.2.ari/include
          -idir /opt/cray/gni-headers/3.0-1.0502.9684.5.2.ari/include
          -idir /opt/cray/pmi/5.0.4-1.0000.10161.132.4.ari/include
          -idir /opt/cray/ugni/5.0-1.0502.9685.4.24.ari/include
          -idir /opt/cray/udreg/2.3.2-1.0502.9275.1.12.ari/include
          -idir /opt/cray/alps/5.2.1-2.0502.9072.13.1.ari/include
          -idir /opt/cray/wlm_detect/1.0-1.0502.53341.1.1.ari/include
          -idir /opt/cray/alps/5.2.1-2.0502.9072.13.1.ari/include
          -idir /opt/cray/krca/1.0.0-2.0502.53880.4.104.ari/include
          -idir /opt/cray-hss-devel/7.2.0/include
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: ../../../External/LS/LattimerSwesty.f

(    1) Calfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalf
(    2) C23456789012345678901234567890123456789012345678901234567890123456789012
(    3) C***********************************************************************
(    4) C
(    5) C    FILE:         ALFEOS.FOR
(    6) C
(    7) C***********************************************************************
(    8) C
(    9) C    MODULE:       ALFEOS
(   10) C    TYPE:         SUBROUTINE
(   11) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
(   12) C
(   13) C    DATE:         8/30/90 Modified from model 4-A
(   14) C
(   15) C                  Please report any problems to me at:
(   16) C                  BITNET:  SWESTY@SUNYSBNP or
(   17) C                  INTERNET: FSWESTY@ASTRO.SUNYSB.EDU
(   18) C                            FSWESTY@SBAST3.SUNYSB.EDU
(   19) C
(   20) C
(   21) C    CALL LINE:    CALL ALFEOS(INPVAR,YE,BRYDNS)
(   22) C
(   23) C    INPUTS:       INPVAR = TEMP, INTERNAL ENG, OR ENTROPY
(   24) C                  YE = ELECTRON FRACTION
(   25) C                  BRYDNS = BARYON NUMBER DENSITY
(   26) C
(   27) C    OUTPUTS:
(   28) C
(   29) C
(   30) C    INCLUDE FILES:  EOS_M4C.INC
(   31) C
(   32) C
(   33) C***********************************************************************
(   34) C23456789012345678901234567890123456789012345678901234567890123456789012
(   35) C
(   36)       SUBROUTINE ALFEOS(INPVAR,YE,BRYDNS,P_PREV,SSFLAG)
(   37) C
(   38) C
(   39)       USE el_eos_module






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 2

(   40)       USE eos_m4c_module
(   41) C
(   42)       IMPLICIT NONE
(   43) C
(   44)       INTEGER SSFLAG
(   45)       DOUBLE PRECISION INPVAR(4),YE,BRYDNS,P_PREV,T
(   46) C
(   47) C                       "ZERO" flag
(   48)       INTEGER ZFLAG
(   49) C
(   50) C                       "Negative" flag
(   51)       INTEGER NFLAG
(   52) C
(   53) C                       Function type declarations
(   54) C
(   55)       DOUBLE PRECISION F_1_2, F_3_2, FINV12, FHALFO, FHALF
(   56) C
(   57) C                       Include the nucleon-nucleon interaction
(   58) C                       statement function definitions
(   59)       INCLUDE 'force.inc'
(   60) C
(   61) C                         Unset the zero flag
../../../External/LS/force.inc
(    1)*C23456789012345678901234567890123456789012345678901234567890123456789012
(    2)*C***********************************************************************
(    3)*C
(    4)*C    MODULE:       FORCE.INC
(    5)*C    TYPE:         INCLUDE FILE
(    6)*C    AUTHOR:       F. DOUGLAS SWESTY
(    7)*C    DATE:         2/29/92
(    8)*C
(    9)*C    PURPOSE:      This include file contains the statement function
(   10)*C                  definitions for the nuclear force expressions.  To
(   11)*C                  change the nucleon-nucleon interaction only this file
(   12)*C                  need be changed.  NOTE:  We have assumed that the
(   13)*C                  interaction is only density dependent, and that the
(   14)*C                  INTERACTION HAS NO EXPLICIT TEMPERATURE DEPENDENCE!
(   15)*C                  To introduce a temperature dependent interaction will
(   16)*C                  require modification of the temperature derivatives
(   17)*C                  in the routines NUCEOS & ALFEOS.
(   18)*C
(   19)*C
(   20)*C    CALL LINE:    INCLUDE 'FORCE.INC/LIST'
(   21)*C
(   22)*C23456789012345678901234567890123456789012345678901234567890123456789012
(   23)*C***********************************************************************
(   24)*C
(   25)*C                          Nucleon-Nucleon interaction parameters
(   26)*      DOUBLE PRECISION AA, BB, CC, DD, DD3, SCRDD3
(   27)*C
(   28)*C                          Compression modulus, symmetry energy,
(   29)*C                          binding energy, & saturation density
(   30)*      DOUBLE PRECISION COMP, SYMM, BIND_E, NSUBS
(   31)*C
(   32)*C                          Surface symmetry energy & surface tension
(   33)*      DOUBLE PRECISION SYM_S, SIG_S
(   34)*C
(   35)*C                          Numerical coefficient (called alpha in






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 3

(   36)*C                          the Nucl. Phys. A, vol. 535, pg. 331 paper)
(   37)*      DOUBLE PRECISION SKYRMC
(   38)*C
(   39)*C
(   40)*C                   This common block contains the variables that
(   41)*C                   specify the particular interaction used
(   42)*      COMMON /SKYRME/ AA, BB, CC, DD, DD3, SCRDD3,
(   43)*     1                COMP, SYMM, SKYRMC, BIND_E,
(   44)*     2                NSUBS, SYM_S, SIG_S
(   45)*C
(   46)*      DOUBLE PRECISION PV_E, DPVEDN, DPVEDX
(   47)*      DOUBLE PRECISION PV_PR, DPVRDP, DPVRDN
(   48)*      DOUBLE PRECISION PVP, DPVPDP, DPVPDN, DVP_DX, DVP_DI
(   49)*      DOUBLE PRECISION PVN, DPVNDP, DPVNDN, DVN_DX, DVN_DI
(   50)*      DOUBLE PRECISION DENOM, VETERM, VTERM1, VTERM2
(   51)*      DOUBLE PRECISION PROT_D, NUT_D, DENSIT, NNN, XXX
(   52)*C
(   53)*C
(   54)*C23456789012345678901234567890123456789012345678901234567890123456789012
(   55)*C-----------------------------------------------------------------------
(   56)*C                 These terms enter in many of the equations
(   57)*C-----------------------------------------------------------------------
(   58)*C
(   59)*      DENOM(DENSIT)=1.0+DD3*(DENSIT**(DD-1.0D+00))
(   60)*C
(   61)*      VETERM(DENSIT)= (CC*(1.0+DD)*(DENSIT**DD)+
(   62)*     1     2.0D+00*CC*DD3*(DENSIT**(2.0D+00*DD-1.0D+00)))/
(   63)*     2     (DENOM(DENSIT)**2)
(   64)*C
(   65)*C-----------------------------------------------------------------------
(   66)*C                        Internal energy stuff
(   67)*C-----------------------------------------------------------------------
(   68)*C
(   69)*C                 Internal energy (IE) due to interaction
(   70)*      PV_E(PROT_D,NUT_D)=AA*((PROT_D+NUT_D)**2)+
(   71)*     1     4.0D+00*BB*PROT_D*NUT_D+( CC*((PROT_D+NUT_D)**(1.0D+00+DD))/
(   72)*     2     DENOM(PROT_D+NUT_D) )+PROT_D*DELTAM
(   73)*C
(   74)*C                 Derivative of IE w.r.t. density at fixed X
(   75)*      DPVEDN(NNN,XXX)=2.0D+00*NNN*
(   76)*     1    (AA+4.0D+00*BB*XXX*(1.0D+00-XXX))+VETERM(NNN)+XXX*DELTAM
(   77)*C
(   78)*C                 Derivative of IE w.r.t. X at fixed density
(   79)*      DPVEDX(NNN,XXX)=4.0D+00*BB*(1.0D+00-2.0D+00*XXX)*(NNN**2)+
(   80)*     1    NNN*DELTAM
(   81)*C
(   82)*C-----------------------------------------------------------------------
(   83)*C                        Interaction potential stuff
(   84)*C-----------------------------------------------------------------------
(   85)*C
(   86)*C                 Proton & neutron interaction potentials
(   87)*      PVP(PROT_D,NUT_D)=2.0D+00*AA*(PROT_D+NUT_D)+
(   88)*     1     4.0D+00*BB*NUT_D+VETERM(PROT_D+NUT_D)+DELTAM
(   89)*C
(   90)*      PVN(PROT_D,NUT_D)=2.0D+00*AA*(PROT_D+NUT_D)+
(   91)*     1     4.0D+00*BB*PROT_D+VETERM(PROT_D+NUT_D)
(   92)*C
(   93)*C                 These terms enter in all of the equations






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 4

(   94)*      VTERM1(DENSIT)=CC*(
(   95)*     1    DD*(1.0D+00+DD)*(DENSIT**(DD-1.0D+00))+
(   96)*     2    2.0D+00*DD3*(2.0D+00*DD-1.0D0)*(DENSIT**(2.0D0*DD-2.0D0))
(   97)*     3    )/(DENOM(DENSIT)**2)
(   98)*      VTERM2(DENSIT)=-2.0D+00*CC*DD3*(
(   99)*     1    (DD**2-1.0D+00)*(DENSIT**(2.0D+00*DD-2.0D+00))+
(  100)*     2    2.0D+00*DD3*(DD-1.0D+00)*(DENSIT**(3.0D+00*DD-3.0D+00))
(  101)*     3    )/(DENOM(DENSIT)**3)
(  102)*C
(  103)*C                 Derivative of proton potential w.r.t.
(  104)*C                 proton density at fixed neutron density
(  105)*      DPVPDP(PROT_D,NUT_D)=2.0D+00*AA+
(  106)*     1    VTERM1(PROT_D+NUT_D)+VTERM2(PROT_D+NUT_D)
(  107)*C
(  108)*C                 Derivative of proton potential w.r.t.
(  109)*C                 neutron density at fixed proton density
(  110)*      DPVPDN(PROT_D,NUT_D)=2.0D+00*AA+4.0D+00*BB+
(  111)*     1    VTERM1(PROT_D+NUT_D)+VTERM2(PROT_D+NUT_D)
(  112)*C
(  113)*C                 Derivative of proton potential w.r.t.
(  114)*C                 X at fixed density
(  115)*cc      DVP_DX(NNN,XXX)=-4.0D+00*BB*NNN
(  116)*C
(  117)*C                 Derivative of proton potential w.r.t.
(  118)*C                 density at fixed X
(  119)*cc      DVP_DI(NNN,XXX)=2.0D+00*AA+4.0D+00*BB*(1.0D+00-XXX)+
(  120)*cc     1    VTERM1(NNN)+VTERM2(NNN)
(  121)*C
(  122)*C                 Derivative of neutron potential w.r.t.
(  123)*C                 neutron density at fixed proton density
(  124)*      DPVNDN(PROT_D,NUT_D)=2.0D+00*AA+
(  125)*     1    VTERM1(PROT_D+NUT_D)+VTERM2(PROT_D+NUT_D)
(  126)*C
(  127)*C                 Derivative of neutron potential w.r.t.
(  128)*C                 proton density at fixed neutron density
(  129)*      DPVNDP(PROT_D,NUT_D)=2.0D+00*AA+4.0D+00*BB+
(  130)*     1    VTERM1(PROT_D+NUT_D)+VTERM2(PROT_D+NUT_D)
(  131)*C
(  132)*C                 Derivative of neutron potential w.r.t.
(  133)*C                 X at fixed density
(  134)*cc      DVN_DX(NNN,XXX)=4.0D+00*BB*NNN
(  135)*C
(  136)*C                 Derivative of neutron potential w.r.t.
(  137)*C                 density at fixed X
(  138)*cc      DVN_DI(NNN,XXX)=2.0D+00*AA+4.0D+00*BB*XXX+
(  139)*cc     1    VTERM1(NNN)+VTERM2(NNN)
(  140)*C
(  141)*C-----------------------------------------------------------------------
(  142)*C                        Pressure potential stuff
(  143)*C-----------------------------------------------------------------------
(  144)*C
(  145)*C                 Interaction contribution to the pressure (IP)
(  146)*      PV_PR(PROT_D,NUT_D)=PROT_D*PVP(PROT_D,NUT_D)+
(  147)*     1    NUT_D*PVN(PROT_D,NUT_D)-PV_E(PROT_D,NUT_D)
(  148)*C
(  149)*C                 Derivative of IP w.r.t. proton density at
(  150)*C                 fixed neutron density
(  151)*      DPVRDP(PROT_D,NUT_D)=PROT_D*






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 5

(  152)*     1    DPVPDP(PROT_D,NUT_D)+NUT_D*DPVNDP(PROT_D,NUT_D)
(  153)*C
(  154)*C                 Derivative of IP w.r.t. neutron density at
(  155)*C                 fixed proton density
(  156)*      DPVRDN(PROT_D,NUT_D)=PROT_D*
(  157)*     1    DPVPDN(PROT_D,NUT_D)+NUT_D*DPVNDN(PROT_D,NUT_D)
(  158)*C
(  159)*C
(   62)       ZFLAG = 0
(   63) C
(   64) C                         Ratio of baryon density to saturation density
(   65)       Y = BRYDNS/NSUBS
(   66) C
(   67) C
(   68) C                         Set T equal to the input variable (the entropy
(   69) C                         and internal energy options are not implemente
(   70) C                         in this version)
(   71)       T = INPVAR(1)
(   72) C
(   73) C
(   74) C                         Calc the quantum concentration of nucleons
(   75)       NQ = 2.36D-4*T**1.5
(   76) C
(   77) C                         Calc the Fermi integral coefficent
(   78)       UQ = 20.721
(   79) C
(   80)       MQ = (T/UQ)**1.5
(   81) C
(   82)       KQ = ((T/UQ)**2.5)/(2.0*PI**2)
(   83) C
(   84)       LQ = UQ*(MQ**OVR53)/(3.0*(PI**2))
(   85) C
(   86)       ETAMAX = 0.95*FINV12(2.0*(PI**2)*BRYDNS/MQ)
(   87) C
(   88) C
(   89) C
(   90) C                              Set the proton density to its old value
(   91)       NPOUT = P_PREV
(   92) C
(   93)       IF(BRYDNS.GT.(0.98*2.0/(YE*V_ALFA))) THEN
(   94)         NPOUT = YE*BRYDNS
(   95)         NNOUT = (1.0-YE)*BRYDNS
(   96)         NOUT = BRYDNS
(   97) C
(   98) C
(   99) c20        VNOUT = EIFLAG*(2.0*AA*NOUT+4.0*BB*NPOUT+CC*(1.0+DD)*NOUT**DD
(  100)         VNOUT = EIFLAG*PVN(NPOUT,NNOUT)
(  101) C
(  102) c20        VPOUT = EIFLAG*(2.0*AA*NOUT+4.0*BB*NNOUT+
(  103) c20     1    CC*(1.0+DD)*NOUT**DD+DELTAM)
(  104)         VPOUT = EIFLAG*PVP(NPOUT,NNOUT)
(  105) C
(  106) C
(  107)         ZNO = 2.0*(PI**2)*NNOUT/MQ
(  108) C
(  109)         ZPO = 2.0*(PI**2)*NPOUT/MQ
(  110) C
(  111)         ETA_NO = FINV12(ZNO)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 6

(  112) C
(  113)         ETA_PO = FINV12(ZPO)
(  114) C
(  115)         F32_NO = F_3_2(ETA_NO)
(  116)         F32_PO = F_3_2(ETA_PO)
(  117) C
(  118)         TAU_NO = KQ*F32_NO
(  119)         TAU_PO = KQ*F32_PO
(  120) C
(  121) C
(  122) c20        BPROUT = LQ*(F32_PO+F32_NO)+EIFLAG*(
(  123) c20     1    AA*(NOUT**2)+4.0*BB*NPOUT*NNOUT+DD*CC*(NOUT**(1.0+DD)) )
(  124)         BPROUT = LQ*(F32_PO+F32_NO)+EIFLAG*PV_PR(NPOUT,NNOUT)
(  125) C
(  126) C
(  127)         MUN_O = T*ETA_NO+VNOUT
(  128)         MUN = MUN_O
(  129) C
(  130)         MUP_O = T*ETA_PO+VPOUT
(  131)         MUPROT = MUP_O
(  132) C
(  133) C                              Calculate diff. of chem. potentials
(  134)         MUHAT = MUN-MUPROT
(  135) C
(  136) C
(  137) C                              Calculate the alpha particle
(  138) C                              chemical potential
(  139)         MUALFA = 2.0*MUN+2.0*MUPROT+BALPHA-BPROUT*V_ALFA
(  140) C
(  141)         ALFDNS = 0.0
(  142) C
(  143)         EXALFA = 1.0-ALFDNS*V_ALFA
(  144) C
(  145)       ELSE
(  146) C
(  147) C                              Calculate the neutron density
(  148)         NNOUT = 2.0*BRYDNS*(1.0-2.0*YE)/(2.0-BRYDNS*YE*V_ALFA)+
(  149)      1            NPOUT*(2.0-(1.0-YE)*BRYDNS*V_ALFA)/
(  150)      2            (2.0-BRYDNS*YE*V_ALFA)
(  151) C
(  152) C                              Calculate density of outside nucleons
(  153)         NOUT = NPOUT+NNOUT
(  154) C
(  155) c20        VNOUT = EIFLAG*(2.0*AA*NOUT+4.0*BB*NPOUT+CC*(1.0+DD)*NOUT**DD
(  156)         VNOUT = EIFLAG*PVN(NPOUT,NNOUT)
(  157) C
(  158) c20        VPOUT = EIFLAG*(2.0*AA*NOUT+4.0*BB*NNOUT+
(  159) c20     1    CC*(1.0+DD)*NOUT**DD+DELTAM)
(  160)         VPOUT = EIFLAG*PVP(NPOUT,NNOUT)
(  161) C
(  162) C
(  163)         ZNO = 2.0*(PI**2)*NNOUT/MQ
(  164) C
(  165)         ZPO = 2.0*(PI**2)*NPOUT/MQ
(  166) C
(  167)         ETA_NO = FINV12(ZNO)
(  168) C
(  169)         ETA_PO = FINV12(ZPO)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 7

(  170) C
(  171)         F32_NO = F_3_2(ETA_NO)
(  172)         F32_PO = F_3_2(ETA_PO)
(  173) C
(  174)         TAU_NO = KQ*F32_NO
(  175)         TAU_PO = KQ*F32_PO
(  176) C
(  177) C
(  178) c20        BPROUT = LQ*(F32_PO+F32_NO)+EIFLAG*(
(  179) c20     1    AA*(NOUT**2)+4.0*BB*NPOUT*NNOUT+DD*CC*(NOUT**(1.0+DD)) )
(  180)         BPROUT = LQ*(F32_PO+F32_NO)+EIFLAG*PV_PR(NPOUT,NNOUT)
(  181) C
(  182) C
(  183)         MUN_O = T*ETA_NO+VNOUT
(  184)         MUN = MUN_O
(  185) C
(  186)         MUP_O = T*ETA_PO+VPOUT
(  187)         MUPROT = MUP_O
(  188) C
(  189) C                              Calculate diff. of chem. potentials
(  190)         MUHAT = MUN-MUPROT
(  191) C
(  192) C
(  193) C                              Calculate the alpha particle
(  194) C                              chemical potential
(  195)         MUALFA = 2.0*MUN+2.0*MUPROT+BALPHA-BPROUT*V_ALFA
(  196) C
(  197) C                              Calculate density of alpha particles
(  198) C
(  199)         IF(ABS(MUALFA/T).LT.30.0) THEN
(  200)           ALFDNS = 8.0*NQ*DEXP(MUALFA/T)
(  201)         ELSEIF((MUALFA/T).LT.-30.0) THEN
(  202)           ALFDNS = 0.0
(  203)         ELSE
(  204)           ALFDNS = 8.0*NQ*DEXP(3.0D1)
(  205)         ENDIF
(  206) C
(  207) C
(  208)         EXALFA = 1.0-ALFDNS*V_ALFA
(  209) C
(  210) C                              Calculate "non-zeroness" of baryon
(  211) C                              conservation equation and save the
(  212) C                              value to be used in the finite
(  213) C                              difference approximation of DGDPRT
(  214)         GOLD = BRYDNS-EXALFA*(NNOUT+NPOUT)-4.0*ALFDNS
(  215)         PRTOLD = NPOUT
(  216) C
(  217) C                              Take a small step to get derivative
(  218)         NPOUT = NPOUT+0.001*BRYDNS
(  219) C
(  220)         DO 11 I=1,30,1
(  221) C
(  222) C                              Unset the negative flag
(  223)           NFLAG = 0
(  224) C
(  225)  14       CONTINUE
(  226) C                              Calculate the neutron density
(  227)           NNOUT = 2.0*BRYDNS*(1.0-2.0*YE)/(2.0-BRYDNS*YE*V_ALFA)+






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 8

(  228)      1            NPOUT*(2.0-(1.0-YE)*BRYDNS*V_ALFA)/
(  229)      2            (2.0-BRYDNS*YE*V_ALFA)
(  230) C
(  231)           IF((NNOUT.LT.0.0).AND.(I.EQ.1)) THEN
(  232)             NPOUT = PRTOLD-0.5*DPRT
(  233)           ELSEIF((NNOUT.LT.0.0).AND.(I.EQ.1).AND.(NFLAG.NE.1)) THEN
(  234)             NPOUT = 0.99*P_PREV
(  235)             NFLAG = 1
(  236)           ELSEIF((NNOUT.LT.0.0).AND.(I.EQ.1).AND.(NFLAG.EQ.1)) THEN
(  237)             SSFLAG = 0
(  238)             GOTO 999
(  239)           ENDIF
(  240) C                              Calculate density of outside nucleons
(  241)           NOUT = NPOUT+NNOUT
(  242) C
(  243) c20          VNOUT = EIFLAG*
(  244) c20     1      (2.0*AA*NOUT+4.0*BB*NPOUT+CC*(1.0+DD)*NOUT**DD)
(  245)           VNOUT = EIFLAG*PVN(NPOUT,NNOUT)
(  246) C
(  247) c20          VPOUT = EIFLAG*(2.0*AA*NOUT+4.0*BB*NNOUT+
(  248) c20     1      CC*(1.0+DD)*NOUT**DD+DELTAM)
(  249)           VPOUT = EIFLAG*PVP(NPOUT,NNOUT)
(  250) C
(  251) C
(  252)           ZNO = 2.0*(PI**2)*NNOUT/MQ
(  253) C
(  254)           ZPO = 2.0*(PI**2)*NPOUT/MQ
(  255) C
(  256)           ETA_NO = FINV12(ZNO)
(  257) C
(  258)           ETA_PO = FINV12(ZPO)
(  259) C
(  260)           F32_NO = F_3_2(ETA_NO)
(  261) C
(  262)           F32_PO = F_3_2(ETA_PO)
(  263) C
(  264)           TAU_NO = KQ*F32_NO
(  265)           TAU_PO = KQ*F32_PO
(  266) C
(  267) c20          BPROUT = LQ*(F32_PO+F32_NO)+EIFLAG*
(  268) c20     1      (AA*(NOUT**2)+4.0*BB*NPOUT*NNOUT+DD*CC*(NOUT**(1.0+DD)) )
(  269)           BPROUT = LQ*(F32_PO+F32_NO)+EIFLAG*PV_PR(NPOUT,NNOUT)
(  270) C
(  271)           MUN_O = T*ETA_NO+VNOUT
(  272)           MUN = MUN_O
(  273) C
(  274)           MUP_O = T*ETA_PO+VPOUT
(  275)           MUPROT = MUP_O
(  276) C
(  277) C                              Calc difference of potentials
(  278)           MUHAT = MUN-MUPROT
(  279) C
(  280) C                              Calc alpha particle chemical potentials
(  281)           MUALFA = 2.0*MUN+2.0*MUPROT+BALPHA-BPROUT*V_ALFA
(  282) C
(  283) C                              Calc alpha particle density
(  284) C
(  285)           IF(ABS(MUALFA/T).LT.30.0) THEN






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 9

(  286)             ALFDNS = 8.0*NQ*DEXP(MUALFA/T)
(  287)           ELSEIF((MUALFA/T).LT.-30.0) THEN
(  288)             ALFDNS = 0.0
(  289)           ELSE
(  290)             ALFDNS = 8.0*NQ*DEXP(3.0D1)
(  291)           ENDIF
(  292) C
(  293) C
(  294)           EXALFA = 1.0-ALFDNS*V_ALFA
(  295) C
(  296) C                              Calc "non-zeroness" of baryon cons. eqn.
(  297)           G = BRYDNS-EXALFA*(NNOUT+NPOUT)-4.0*ALFDNS
(  298) C
(  299) C                              Calculate derivative of baryon conservati
(  300) C                              equation w.r.t. proton density by finite
(  301) C                              diference approximation
(  302)           DGDPRT = (G-GOLD)/(NPOUT-PRTOLD)
(  303) C
(  304) C                              If rate of change is near zero
(  305) C                              and zero flag is not set
(  306)           IF((ABS(DGDPRT).LT.1.0D-25).AND.(ZFLAG.EQ.0)) THEN
(  307) C                              Tweak the step size
(  308)             NPOUT = PRTOLD-0.5*DPRT
(  309) C                              and set the zero flag
(  310)             ZFLAG = 1
(  311) C                              and go back and try again
(  312)             GOTO 14
(  313) C                              If failure occurs again
(  314)           ELSEIF((ABS(DGDPRT).LT.1.0D-25).AND.(ZFLAG.EQ.1)) THEN
(  315) C                              declare an EOS failure
(  316)             SSFLAG = 0
(  317) C                              and return
(  318)             GOTO 999
(  319)           ENDIF
(  320) C
(  321) C                              Calculate new Newton-Raphson step
(  322)           DPRT = G/DGDPRT
(  323) C
(  324) C                              Save old value of proton density & G
(  325)           PRTOLD = NPOUT
(  326)           GOLD = G
(  327) C
(  328) C
(  329)  13       CONTINUE
(  330) C
(  331) C                              Potential "new" value of proton density
(  332)           PRTNEW = NPOUT-DPRT
(  333) C
(  334) C                              If new proton density is less than the
(  335) C                              baryon density and greater than zero
(  336) C                              then update the proton density
(  337)           IF(PRTNEW*(BRYDNS-PRTNEW).GT.0.0) THEN
(  338)             NPOUT = NPOUT-DPRT
(  339) C                              Else cut the step size in half and try ag
(  340)           ELSE
(  341)             DPRT = DPRT*0.5
(  342)             GOTO 13
(  343)           ENDIF






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 10

(  344) C
(  345) C                              If step size is small enough break out of
(  346) C                              the DO 11 loop, otherwise continue
(  347)           IF(ABS(DPRT/NPOUT).LT.10E-11) GOTO 12
(  348)  11     CONTINUE
(  349) C
(  350) c      write(*,*) 'A failed to converge; switching to F' ! take out late
(  351)         SSFLAG = 0
(  352)         GOTO 999
(  353) C
(  354) C
(  355)  12     CONTINUE
(  356) C
(  357)       ENDIF
(  358) C                              Set the success flag
(  359)       SSFLAG = 1
(  360) C
(  361) C
(  362) C                              Calc outside nucleon density
(  363)       NOUT = NNOUT+NPOUT
(  364) C
(  365) C                              Calc outside nucleon fraction
(  366)       XOUT = NPOUT/NOUT
(  367) C
(  368) C                              Calculate particle fractions
(  369)       XALFA = 4.0*ALFDNS/BRYDNS
(  370)       XPROT = EXALFA*NPOUT/BRYDNS
(  371)       XNUT = EXALFA*NNOUT/BRYDNS
(  372)       XH = 0.0
(  373) C
(  374) C                              Baryons
(  375) C
(  376)       F32_NO = F_3_2(ETA_NO)
(  377) C
(  378)       F32_PO = F_3_2(ETA_PO)
(  379) C
(  380)       TAU_PO = KQ*F32_PO
(  381) C
(  382)       TAU_NO = KQ*F32_NO
(  383) C
(  384) C
(  385) C
(  386) C
(  387) C
(  388) C
(  389) C                    Calculate internal energy of outside nucleons
(  390) c20      BUOUT = (XNUT+XPROT)*( UQ*(TAU_PO+TAU_NO)+
(  391) c20     1    EIFLAG*((NOUT**2)*AA+
(  392) c20     2   4.0*BB*NPOUT*NNOUT+CC*NOUT**(1.0+DD)+NPOUT*DELTAM) )/NOUT
(  393)       BUOUT = (XNUT+XPROT)*( UQ*(TAU_PO+TAU_NO)+
(  394)      1    EIFLAG*PV_E(NPOUT,NNOUT) )/NOUT
(  395) C
(  396) C
(  397) C                                Calc alfa particle internal energy
(  398)       BUALFA = 0.25*XALFA*(1.5*T-BALPHA)
(  399) C
(  400) C                                Set nuclei internal energy to zero
(  401)       BUNUC = 0.0






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 11

(  402) C                                Calculate total baryon internal energy
(  403) C                                (per baryon)
(  404)       BU = BUOUT+BUALFA+BUNUC
(  405) C
(  406) C
(  407) C                                Calc entropy of outside nucleons
(  408)       BSOUT = (XNUT+XPROT)*( (5.0*UQ/(3.0*T))*(TAU_NO+TAU_PO)-
(  409)      1   NNOUT*ETA_NO-NPOUT*ETA_PO )/NOUT
(  410) C
(  411) C                                Calc alpha particle entropy
(  412)       BSALFA = 0.25*XALFA*(2.5-MUALFA/T)
(  413) C
(  414) C                                Set nuclei entropy to zero
(  415)       BSNUC = 0.0
(  416) C
(  417) C                                Calc total baryon entropy (per baryon)
(  418)       BS = BSOUT+BSALFA+BSNUC
(  419) C
(  420) C
(  421) C
(  422) C                                Calc outside free energy
(  423)       BFOUT = BUOUT-T*BSOUT
(  424) C                                Calc alpha particle free energy
(  425)       BFALFA = BUALFA-T*BSALFA
(  426) C                                Set nuclei free energy to zero
(  427)       BFNUC = BUNUC-T*BSNUC
(  428) C                                Calc total baryon free energy (per nucl
(  429)       BFTOT = BFOUT+BFALFA+BFNUC
(  430) C
(  431) C
(  432) C
(  433) C
(  434) C
(  435) C                                Calc outside pressure
(  436) c20      BPROUT = LQ*(F32_PO+F32_NO)+EIFLAG*(
(  437) c20     1    AA*(NOUT**2)+4.0*BB*NPOUT*NNOUT+DD*CC*(NOUT**(1.0+DD)))
(  438)       BPROUT = LQ*(F32_PO+F32_NO)+EIFLAG*PV_PR(NPOUT,NNOUT)
(  439) C
(  440) C                                Calc alfa particle pressure
(  441)       BPRALF = ALFDNS*T
(  442) C
(  443) C                                Set nuclei pressure to zero
(  444)       BPRNUC = 0.0
(  445) C
(  446) C                                Calc total baryon pressure
(  447)       BPRESS = BPROUT+BPRALF+BPRNUC
(  448) C
(  449) C
(  450) C
(  451) C
(  452) C
(  453) C
(  454) C
(  455) C
(  456) C                           Leptons & Photons
(  457)       CALL EL_EOS(T,YE,BRYDNS)
(  458) C
(  459) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 12

(  460) C
(  461) C                           Total pressure and eng/ent per baryon
(  462) C
(  463)       FBARY = BFTOT+FSUBE
(  464)       PBARY = BPRESS+EPRESS
(  465)       MUBARY = YE*MUPROT+(1.0-YE)*MUN
(  466)       MU_MAT = YE*(MUPROT+MUSUBE)+(1.0-YE)*MUN
(  467) C
(  468)       FTOT = BFTOT+FSUBE+PF
(  469)       UTOT = BU+EU+PU
(  470)       STOT = BS+ES+PS
(  471)       PTOT = BPRESS+EPRESS+PPRESS
(  472) C
(  473) C
(  474) C
(  475) C
(  476) C
(  477) C23456789012345678901234567890123456789012345678901234567890123456789012
(  478) C-----------------------------------------------------------------------
(  479) C                Derivatives of thermodynamic variables
(  480) C-----------------------------------------------------------------------
(  481) C
(  482) C
(  483) C
(  484) cc      GPO = 2.0*FHALFO(ETA_PO)
(  485) cc      GNO = 2.0*FHALFO(ETA_NO)
(  486) C
(  487) C
(  488)       GPO = 2.0*FHALF(ETA_PO)
(  489)       GNO = 2.0*FHALF(ETA_NO)
(  490) C
(  491) C
(  492) C                 ------------------------------------
(  493) C                 !      Derivatives of exterior     !
(  494) C                 !      quantities                  !
(  495) C                 !      (w.r.t. Temp. and ETA's)    !
(  496) C                 !                                  !
(  497) C                 ------------------------------------
(  498) C
(  499) C
(  500) C                  Derivatives of exterior potentials
(  501) C                  w.r.t. particle densities
(  502) c20      DVPODP = EIFLAG*(2.0*AA+DD*(1.0+DD)*CC*(NOUT**(DD-1.0)) )
(  503)       DVPODP = EIFLAG*DPVPDP(NPOUT,NNOUT)
(  504) c20      DVPODN = EIFLAG*(2.0*AA+4.0*BB+DD*(1.0+DD)*CC*(NOUT**(DD-1.0)) 
(  505)       DVPODN = EIFLAG*DPVPDN(NPOUT,NNOUT)
(  506) c20      DVNODP = DVPODN
(  507)       DVNODP = EIFLAG*DPVNDP(NPOUT,NNOUT)
(  508) c20      DVNODN = DVPODP
(  509)       DVNODN = EIFLAG*DPVNDN(NPOUT,NNOUT)
(  510) C
(  511) C
(  512) C                  Derviatives of exterior chem. pot. w.r.t. ETA's
(  513) C                  (at fixed T)
(  514)       DMPDEP = T+DVPODP*NPOUT/GPO
(  515)       DMPDEN = DVPODN*NNOUT/GNO
(  516)       DMNDEP = DVNODP*NPOUT/GPO
(  517)       DMNDEN = T+DVNODN*NNOUT/GNO






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 13

(  518) C
(  519) C                  Derivatives of pressure potential w.r.t.
(  520) C                  particle densities
(  521) c20      DV_DPO = EIFLAG*
(  522) c20     1    (2.0*AA*NOUT+4.0*BB*NNOUT+CC*DD*(1.0+DD)*(NOUT**DD) )
(  523)       DV_DPO = EIFLAG*DPVRDP(NPOUT,NNOUT)
(  524) c20      DV_DNO = EIFLAG*
(  525) c20     1    (2.0*AA*NOUT+4.0*BB*NPOUT+CC*DD*(1.0+DD)*(NOUT**DD) )
(  526)       DV_DNO = EIFLAG*DPVRDN(NPOUT,NNOUT)
(  527) C
(  528) C                  Derivatives of pressure potential w.r.t. ETA's
(  529) C                  (at fixed T)
(  530)       DV_DEP = DV_DPO*NPOUT/GPO
(  531)       DV_DEN = DV_DNO*NNOUT/GNO
(  532) C
(  533) C                  Derivatives of outside pressure w.r.t. ETA's
(  534) C                  (at fixed T)
(  535)       DPODEP = NPOUT*T+DV_DEP
(  536)       DPODEN = NNOUT*T+DV_DEN
(  537) C
(  538) C                  Derivatives of alpha density w.r.t. ETA's
(  539) C                  (at fixed T)
(  540)       DNADEP = ALFDNS*(2.0*DMPDEP+2.0*DMNDEP-V_ALFA*DPODEP)/T
(  541)       DNADEN = ALFDNS*(2.0*DMPDEN+2.0*DMNDEN-V_ALFA*DPODEN)/T
(  542) C
(  543) C
(  544) C                  Derivatives of particle densities w.r.t. T
(  545) C                  (at fixed ETA's)
(  546)       DNPODT = 1.5*NPOUT/T
(  547)       DNNODT = 1.5*NNOUT/T
(  548) C
(  549) C                  Derivatives of exterior chem. pot. w.r.t. T
(  550) C                  (at fixed ETA's)
(  551)       DMPODT = ETA_PO+DVPODP*DNPODT+DVPODN*DNNODT
(  552)       DMNODT = ETA_NO+DVNODP*DNPODT+DVNODN*DNNODT
(  553) C
(  554) C                  Derivative of pressure potential w.r.t. T
(  555) C                  (at fixed ETA's)
(  556)       DV_DT = DV_DPO*DNPODT+DV_DNO*DNNODT
(  557) C
(  558) C                  Derivative of outside pressure w.r.t. T
(  559) C                  (at fixed ETA's)
(  560)       DPODT = OVR23*UQ*2.5*(TAU_PO+TAU_NO)/T+DV_DT
(  561) C
(  562) C                  Derivative of alpha chem. pot. w.r.t. T
(  563) C                  (at fixed ETA's)
(  564)       DMUADT = 2.0*DMPODT+2.0*DMNODT-V_ALFA*DPODT
(  565) C
(  566) C                  Derivative of alpha particle density w.r.t. T
(  567) C                  (at fixed ETA's)
(  568)       DNADT = 1.5*ALFDNS/T-ALFDNS*MUALFA/(T**2)+ALFDNS*DMUADT/T
(  569) C
(  570) C                  Derivative of alpha particle pressure w.r.t. T
(  571) C                  (at fixed ETA's)
(  572)       DPADT = ALFDNS+T*DNADT
(  573) C
(  574) C
(  575) C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 14

(  576) C
(  577) C
(  578) C
(  579) C                 ------------------------------------
(  580) C                 !      Derivatives of constraint   !
(  581) C                 !      and equilibrium equations   !
(  582) C                 !      with respect to the five    !
(  583) C                 !      compositional variables     !
(  584) C                 !      (U,x,n_i,eta_po,eta_no)     !
(  585) C                 !      and the three independent   !
(  586) C                 !      variables                   !
(  587) C                 !      (Baryon density, T, and Ye) !
(  588) C                 !                                  !
(  589) C                 ------------------------------------
(  590) C
(  591) C23456789012345678901234567890123456789012345678901234567890123456789012
(  592) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(  593) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(  594) C
(  595) C                Equation 1 (Baryon conservation)
(  596) C
(  597) C
(  598) C
(  599)       DG1DO1 = -EXALFA*NPOUT/GPO+(V_ALFA*NOUT-4.0)*DNADEP
(  600) C
(  601)       DG1DO2 = -EXALFA*NNOUT/GNO+(V_ALFA*NOUT-4.0)*DNADEN
(  602) C
(  603) C
(  604)       DG1DL1 = 1.0
(  605) C
(  606)       DG1DL2 = -EXALFA*(DNNODT+DNPODT)+(V_ALFA*NOUT-4.0)*DNADT
(  607) C
(  608)       DG1DL3 = 0.0
(  609) C
(  610) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(  611) C
(  612) C                Equation 2 (Charge conservation)
(  613) C
(  614) C
(  615)       DG2DO1 = -EXALFA*NPOUT/GPO+(V_ALFA*NPOUT-2.0)*DNADEP
(  616) C
(  617)       DG2DO2 = (V_ALFA*NPOUT-2.0)*DNADEN
(  618) C
(  619) C
(  620)       DG2DL1 = YE
(  621) C
(  622)       DG2DL2 = -EXALFA*DNPODT+(V_ALFA*NPOUT-2.0)*DNADT
(  623) C
(  624)       DG2DL3 = BRYDNS
(  625) C
(  626) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(  627) C
(  628)       DET_GT = DG1DO1*DG2DO2-DG1DO2*DG2DO1
(  629) C
(  630) C
(  631)       DEP_DN = (DG1DO2*DG2DL1-DG2DO2*DG1DL1)/DET_GT
(  632)       DEN_DN = (DG2DO1*DG1DL1-DG1DO1*DG2DL1)/DET_GT
(  633) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 15

(  634) C
(  635)       DEP_DT = (DG1DO2*DG2DL2-DG2DO2*DG1DL2)/DET_GT
(  636)       DEN_DT = (DG2DO1*DG1DL2-DG1DO1*DG2DL2)/DET_GT
(  637) C
(  638) C
(  639)       DEP_DY = (DG1DO2*DG2DL3-DG2DO2*DG1DL3)/DET_GT
(  640)       DEN_DY = (DG2DO1*DG1DL3-DG1DO1*DG2DL3)/DET_GT
(  641) C
(  642) C
(  643) C
(  644) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(  645) C
(  646) C                 -------------------------------------
(  647) C                 !      Derivatives of exterior bulk !
(  648) C                 !      nucleon internal energy &    !
(  649) C                 !      entropy densities and the    !
(  650) C                 !      chem. pot.  w.r.t. to eta_p, !
(  651) C                 !      ate_n & T. These are used in !
(  652) C                 !      calculating the derivatives  !
(  653) C                 !      w.r.t. the independant vars  !
(  654) C                 !      (Baryon density, T, and Ye)  !
(  655) C                 !                                   !
(  656) C                 -------------------------------------
(  657) C
(  658) C
(  659)       S_OUT =(OVR53*UQ/T)*(TAU_NO+TAU_PO)-NNOUT*ETA_NO-NPOUT*ETA_PO
(  660) C
(  661) c20      E_OUT = UQ*(TAU_PO+TAU_NO)+EIFLAG*
(  662) c20     1((NOUT**2)*AA+4.0*BB*NPOUT*NNOUT+CC*NOUT**(1.0+DD)+NPOUT*DELTAM
(  663)       E_OUT = UQ*(TAU_PO+TAU_NO)+EIFLAG*PV_E(NPOUT,NNOUT)
(  664) C
(  665) C                   Derivative of exterior entropy density w.r.t. T
(  666)       DSODT =  OVR53*UQ*(1.5*(TAU_PO+TAU_NO)/(T**2))-
(  667)      1     1.5*(NPOUT*ETA_PO+NNOUT*ETA_NO)/T
(  668) C
(  669)       DEODT = T*DSODT
(  670) C
(  671) C                    Derivatives of exterior particle densities w.r.t.
(  672) C                    Temperature (ETA's fixed)
(  673)       DNPODT = 1.5*NPOUT/T
(  674)       DNNODT = 1.5*NNOUT/T
(  675) C
(  676)       DMPODT = ETA_PO+DVPODP*DNPODT+DVPODN*DNNODT
(  677)       DMNODT = ETA_NO+DVNODP*DNPODT+DVNODN*DNNODT
(  678) C
(  679) C
(  680)       DNPDEP = NPOUT/GPO
(  681)       DNNDEN = NNOUT/GNO
(  682) C
(  683)       DTPDEP = 1.5*T*NPOUT/UQ
(  684)       DTNDEN = 1.5*T*NNOUT/UQ
(  685) C
(  686)       DSODEP = (OVR53*UQ/T)*DTPDEP-NPOUT-ETA_PO*DNPDEP
(  687)       DSODEN = (OVR53*UQ/T)*DTNDEN-NNOUT-ETA_NO*DNNDEN
(  688) C
(  689) C
(  690) C                    Exterior particle potentials
(  691) c20      VNOUT = EIFLAG*(2.0*AA*NOUT+4.0*BB*NPOUT+CC*(1.0+DD)*NOUT**DD )






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 16

(  692)       VNOUT = EIFLAG*PVN(NPOUT,NNOUT)
(  693) c20      VPOUT = EIFLAG*
(  694) c20     1    (2.0*AA*NOUT+4.0*BB*NNOUT+CC*(1.0+DD)*NOUT**DD+DELTAM)
(  695)       VPOUT = EIFLAG*PVP(NPOUT,NNOUT)
(  696) C
(  697) C
(  698)       DEODEP = UQ*DTPDEP+VPOUT*DNPDEP
(  699)       DEODEN = UQ*DTNDEN+VNOUT*DNNDEN
(  700) C
(  701)       DMPDEP = T+DVPODP*NPOUT/GPO
(  702)       DMPDEN = DVPODN*NNOUT/GNO
(  703)       DMNDEP = DVNODP*NPOUT/GPO
(  704)       DMNDEN = T+DVNODN*NNOUT/GNO
(  705) C
(  706) C
(  707) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(  708) C
(  709) C                 -------------------------------------
(  710) C                 !      Derivatives of alpha         !
(  711) C                 !      particle internal energy &   !
(  712) C                 !      entropy densities and the    !
(  713) C                 !      chem. pot.  w.r.t. to eta_p, !
(  714) C                 !      ate_n & T. These are used in !
(  715) C                 !      calculating the derivatives  !
(  716) C                 !      w.r.t. the independant vars  !
(  717) C                 !      (Baryon density, T, and Ye)  !
(  718) C                 !                                   !
(  719) C                 -------------------------------------
(  720) C
(  721) C
(  722) C
(  723) C
(  724)       S_ALFA = ALFDNS*(2.5-MUALFA/T)
(  725) C
(  726) C
(  727)       E_ALFA = ALFDNS*(1.5*T-BALPHA)
(  728) C
(  729) C                  Derivative of pressure potential w.r.t. T
(  730)       DV_DT = DV_DPO*DNPODT+DV_DNO*DNNODT
(  731) C
(  732) C                  Derivative of outside pressure w.r.t. T
(  733)       DPODT = OVR23*UQ*2.5*(TAU_PO+TAU_NO)/T+DV_DT
(  734) C
(  735) C
(  736)       DMUADT = 2.0*DMPODT+2.0*DMNODT-V_ALFA*DPODT
(  737) C
(  738) C                  Derivative of alpha particle density w.r.t. T
(  739)       DNADT = 1.5*ALFDNS/T-ALFDNS*MUALFA/(T**2)+ALFDNS*DMUADT/T
(  740) C
(  741) C
(  742)       DSADT = DNADT*(2.5-MUALFA/T)-ALFDNS*DMUADT/T+ALFDNS*MUALFA/T**2
(  743) C
(  744)       DEADT = DNADT*(1.5*T-BALPHA)+1.5*ALFDNS
(  745) C
(  746) C
(  747)       DV_DEP = DV_DPO*NPOUT/GPO
(  748)       DV_DEN = DV_DNO*NNOUT/GNO
(  749) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 17

(  750)       DPODEP = OVR23*UQ*DTPDEP+DV_DEP
(  751)       DPODEN = OVR23*UQ*DTNDEN+DV_DEN
(  752) C
(  753)       DMADEP = 2.0*DMPDEP+2.0*DMNDEP-V_ALFA*DPODEP
(  754)       DMADEN = 2.0*DMPDEN+2.0*DMNDEN-V_ALFA*DPODEN
(  755) C
(  756)       DNADEP = ALFDNS*DMADEP/T
(  757)       DNADEN = ALFDNS*DMADEN/T
(  758) C
(  759)       DSADEP = DNADEP*(2.5-MUALFA/T)-ALFDNS*DMADEP/T
(  760)       DSADEN = DNADEN*(2.5-MUALFA/T)-ALFDNS*DMADEN/T
(  761) C
(  762)       DEADEP = DNADEP*(1.5*T-BALPHA)
(  763)       DEADEN = DNADEN*(1.5*T-BALPHA)
(  764) C
(  765) C\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
(  766) C23456789012345678901234567890123456789012345678901234567890123456789012
(  767) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(  768) C
(  769)       S_DENS = EXALFA*S_OUT+S_ALFA
(  770) C
(  771)       E_DENS = EXALFA*E_OUT+E_ALFA
(  772) C
(  773) C
(  774) C23456789012345678901234567890123456789012345678901234567890123456789012
(  775) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(  776) C
(  777) C
(  778) C                 ------------------------------------
(  779) C                 !                                  !
(  780) C                 !                                  !
(  781) C                 !                                  !
(  782) C                 !      Temperature Derivatives     !
(  783) C                 !                                  !
(  784) C                 !                                  !
(  785) C                 !                                  !
(  786) C                 ------------------------------------
(  787) C
(  788)       DNA_DT = DNADT+DNADEP*DEP_DT+DNADEN*DEN_DT
(  789) C
(  790) C
(  791)       DBSDT = (-V_ALFA*DNA_DT*S_OUT+
(  792)      1    EXALFA*(DSODT+DSODEP*DEP_DT+DSODEN*DEN_DT)+
(  793)      2    (DSADT+DSADEP*DEP_DT+DSADEN*DEN_DT) )/BRYDNS
(  794) C
(  795) C~~~~~~~~~~~~~~~~~~
(  796) C
(  797)       DBUDT = T*DBSDT
(  798) C
(  799) C
(  800) C~~~~~~~~~~~~~~~~~~
(  801) C
(  802) C
(  803)       DBFDT = DBUDT-S_DENS/BRYDNS-T*DBSDT
(  804) C
(  805) C~~~~~~~~~~~~~~~~~~
(  806) C
(  807)       DBMUDT = YE*(DMPODT+DMPDEP*DEP_DT+DMPDEN*DEN_DT)+






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 18

(  808)      1    (1.0-YE)*(DMNODT+DMNDEP*DEP_DT+DMNDEN*DEN_DT)
(  809) C
(  810) C~~~~~~~~~~~~~~~~~~
(  811) C
(  812)       DBPDT = BRYDNS*(DBMUDT-DBFDT)
(  813) C
(  814) C
(  815) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(  816) C23456789012345678901234567890123456789012345678901234567890123456789012
(  817) C
(  818) C
(  819) C
(  820) C                 ------------------------------------
(  821) C                 !                                  !
(  822) C                 !                                  !
(  823) C                 !                                  !
(  824) C                 !       Density Derivatives        !
(  825) C                 !                                  !
(  826) C                 !                                  !
(  827) C                 !                                  !
(  828) C                 ------------------------------------
(  829) C
(  830) C
(  831)       DNA_DN = DNADEP*DEP_DN+DNADEN*DEN_DN
(  832) C
(  833) C
(  834)       DBSDN = (-V_ALFA*DNA_DN*S_OUT+
(  835)      1    EXALFA*(DSODEP*DEP_DN+DSODEN*DEN_DN)+
(  836)      2   (DSADEP*DEP_DN+DSADEN*DEN_DN) )/BRYDNS-S_DENS/BRYDNS**2
(  837) C
(  838) C
(  839) C~~~~~~~~~~~~~~~~~~
(  840) C
(  841) C
(  842)       DBUDN = (-V_ALFA*DNA_DN*E_OUT+
(  843)      1    EXALFA*(DEODEP*DEP_DN+DEODEN*DEN_DN)+
(  844)      2   (DEADEP*DEP_DN+DEADEN*DEN_DN) )/BRYDNS-E_DENS/BRYDNS**2
(  845) C
(  846) C
(  847) C
(  848) C~~~~~~~~~~~~~~~~~~
(  849) C
(  850) C
(  851)       DBFDN = DBUDN-T*DBSDN
(  852) C
(  853) C~~~~~~~~~~~~~~~~~~
(  854) C
(  855)       DBMUDN = YE*(DMPDEP*DEP_DN+DMPDEN*DEN_DN)+
(  856)      1    (1.0-YE)*(DMNDEP*DEP_DN+DMNDEN*DEN_DN)
(  857) C
(  858) C~~~~~~~~~~~~~~~~~~
(  859) C
(  860)       DBPDN = BRYDNS*(DBMUDN-DBFDN)+MUBARY-BFTOT
(  861) C
(  862) C
(  863) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(  864) C23456789012345678901234567890123456789012345678901234567890123456789012
(  865) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 19

(  866) C
(  867) C
(  868) C                 ------------------------------------
(  869) C                 !                                  !
(  870) C                 !                                  !
(  871) C                 !                                  !
(  872) C                 !         Ye Derivatives           !
(  873) C                 !                                  !
(  874) C                 !                                  !
(  875) C                 !                                  !
(  876) C                 ------------------------------------
(  877) C
(  878) C
(  879) C
(  880) C
(  881)       DNA_DY = DNADEP*DEP_DY+DNADEN*DEN_DY
(  882) C
(  883) C
(  884)       DBSDY = (-V_ALFA*DNA_DY*S_OUT+
(  885)      1    EXALFA*(DSODEP*DEP_DY+DSODEN*DEN_DY)+
(  886)      2   (DSADEP*DEP_DY+DSADEN*DEN_DY) )/BRYDNS
(  887) C
(  888) C
(  889) C~~~~~~~~~~~~~~~~~~
(  890) C
(  891) C
(  892)       DBUDY = (-V_ALFA*DNA_DY*E_OUT+
(  893)      1    EXALFA*(DEODEP*DEP_DY+DEODEN*DEN_DY)+
(  894)      2   (DEADEP*DEP_DY+DEADEN*DEN_DY) )/BRYDNS
(  895) C
(  896) C
(  897) C~~~~~~~~~~~~~~~~~~
(  898) C
(  899) C
(  900)       DBFDY = DBUDY-T*DBSDY
(  901) C
(  902) C~~~~~~~~~~~~~~~~~~
(  903) C
(  904)       DBMUDY = YE*(DMPDEP*DEP_DY+DMPDEN*DEN_DY)+MUPROT+
(  905)      1    (1.0-YE)*(DMNDEP*DEP_DY+DMNDEN*DEN_DY)-MUN
(  906) C
(  907) C~~~~~~~~~~~~~~~~~~
(  908) C
(  909)       DBPDY = BRYDNS*(DBMUDY-DBFDY)
(  910) C
(  911) C
(  912) C
(  913) C
(  914) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(  915) C23456789012345678901234567890123456789012345678901234567890123456789012
(  916) C
(  917) C
(  918) C
(  919) C-----------------------------------------------------------------------
(  920) C                End of derivatives of thermodynamic variables
(  921) C-----------------------------------------------------------------------
(  922) C
(  923) C                  Total derivatives






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 20

(  924) C                  (Baryons+Electrons+Photons)
(  925) C
(  926)       DUDT = DBUDT+DEUDT+DPUDT
(  927)       DUDN = DBUDN+DEUDN+DPUDN
(  928)       DUDY = DBUDY+DEUDY+DPUDY
(  929) C
(  930) C
(  931)       DSDT = DBSDT+DESDT+DPSDT
(  932)       DSDN = DBSDN+DESDN+DPSDN
(  933)       DSDY = DBSDY+DESDY+DPSDY
(  934) C
(  935) C
(  936)       DPDT = DBPDT+DEPDT+DPPDT
(  937)       DPDN = DBPDN+DEPDN+DPPDN
(  938)       DPDY = DBPDY+DEPDY+DPPDY
(  939) C
(  940) C
(  941)       DMUDT = DBMUDT+YE*DEMUDT
(  942)       DMUDN = DBMUDN+YE*DEMUDN
(  943)       DMUDY = DBMUDY+YE*DEMUDY
(  944) C
(  945) C
(  946) C                  Adiabatic index
(  947)       GAM_S = BRYDNS*DPDN/PTOT+T*(DPDT**2)/(BRYDNS*PTOT*DUDT)
(  948) C
(  949) C
(  950)       INPVAR(2) = NSUBS
(  951)       INPVAR(3) = ETA_PO
(  952)       INPVAR(4) = ETA_NO
(  953) C
(  954) C
(  955) C                           Approximate the nuclear density
(  956)       NSUBI = NSUBS
(  957) C
(  958) C                           Use 0.45 as the nuclear proton fraction
(  959)       X = 0.45
(  960)       A = 4.0D0
(  961) C
(  962) C                           Save the proton number density for use
(  963) C                           as the initial guess on next call
(  964)       P_PREV = NPOUT
(  965) C
(  966)   999 CONTINUE
(  967) C
(  968)       RETURN
(  969) C
(  970)       END

















PGF90 (Version     14.9)          03/12/2015  00:11:50      page 21

(  971) Calfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalfaalf
(  972) 
(  973) !///////////////////////////////////////////////////////////////////////
(  974) 
(  975) C23456789012345678901234567890123456789012345678901234567890123456789012
(  976) C***********************************************************************
(  977) C
(  978) C    FILE:         EL_EOS.FOR
(  979) C
(  980) C***********************************************************************
(  981) C
(  982) C    MODULE:       EL_EOS
(  983) C    TYPE:         SUBROUTINE
(  984) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
(  985) C
(  986) C    DATE:         2/12/91
(  987) C
(  988) C                  BITNET:  SWESTY@SUNYSBNP or
(  989) C                  INTERNET: FSWESTY@SBAST1.SUNYSB.EDU or
(  990) C                            fswesty@sbast3.sunysb.edu
(  991) C
(  992) C    PURPOSE:      The elctron and photon equation of state
(  993) C
(  994) C
(  995) C    CALL LINE:    CALL EL_EOS(T,YE,BRYDNS)
(  996) C
(  997) C    INPUTS:       T = TEMPERATURE
(  998) C                  YE = ELECTRON FRACTION
(  999) C                  BRYDNS = BARYON NUMBER DENSITY
( 1000) C
( 1001) C    OUTPUTS:      NONE
( 1002) C
( 1003) C
( 1004) C
( 1005) C    INCLUDE FILES:  EL_EOS.INC
( 1006) C
( 1007) C
( 1008) C***********************************************************************
( 1009) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1010) C
( 1011)       SUBROUTINE EL_EOS(T,YE,BRYDNS)
( 1012) C
( 1013)       USE el_eos_module
( 1014) C
( 1015)       IMPLICIT NONE
( 1016) C
( 1017)       DOUBLE PRECISION T, YE, BRYDNS
( 1018) C
( 1019) C
( 1020) C
( 1021) C                           Plancks constant & speed of light
( 1022)       DOUBLE PRECISION HBAR, C
( 1023)       PARAMETER (HBAR=6.58217317D-22,C=2.997924581D23)
( 1024) C
( 1025) C                           Pi and 1/3
( 1026)       DOUBLE PRECISION PI, PI2, OVR3, MOVR3, OVR23
( 1027)       PARAMETER(PI=3.1415927, PI2=9.8696044)
( 1028)       PARAMETER(OVR3=0.33333333, MOVR3=-0.33333333, OVR23=0.66666667)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 22

( 1029) C
( 1030) C
( 1031)       IF( ((BRYDNS*YE*1.66D15).GT.5.0D9).OR.(T.GT.5.0D0) ) THEN
( 1032) C                      Assume that the electrons are relativistic
( 1033) c        write(*,*) ' rel: '
( 1034)         CALL EL_REL(T,YE,BRYDNS)
( 1035)       ELSE
( 1036) c        write(*,*) ' gl: '
( 1037) C                      Otherwise call the Gauss-Laguerre version
( 1038)         CALL EL_GL(T,YE,BRYDNS)
( 1039) C                      If the stuff is really degenerate call the
( 1040) C                      relativistic version anyway
( 1041)         IF((MUSUBE/T).GT.2.0D1) THEN
( 1042) c        write(*,*) ' rel2: ',musube/t
( 1043)           CALL EL_REL(T,YE,BRYDNS)
( 1044)         ENDIF
( 1045)       ENDIF
( 1046) C
( 1047) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1048) C
( 1049) C
( 1050)  999  RETURN
( 1051) C
( 1052) C
( 1053)       END







































PGF90 (Version     14.9)          03/12/2015  00:11:50      page 23

( 1054) 
( 1055) !///////////////////////////////////////////////////////////////////////
( 1056) 
( 1057) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1058) C***********************************************************************
( 1059) C
( 1060) C    FILE:         EL_GL.FOR
( 1061) C
( 1062) C***********************************************************************
( 1063) C
( 1064) C    MODULE:       EL_GL
( 1065) C    TYPE:         SUBROUTINE
( 1066) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 1067) C
( 1068) C    DATE:         2/12/91
( 1069) C                  version 2.0 1/24/93 (includes full fermi integrals)
( 1070) C
( 1071) C                  BITNET:  SWESTY@SUNYSBNP or
( 1072) C                  INTERNET: swesty@nuclear.physics.sunysb.edu or
( 1073) C                            fswesty@sbast3.ess.sunysb.edu
( 1074) C
( 1075) C    PURPOSE:      The elctron and photon equation of state
( 1076) C
( 1077) C
( 1078) C    CALL LINE:    CALL EL_GL(T,YE,BRYDNS)
( 1079) C
( 1080) C    INPUTS:       T = TEMPERATURE
( 1081) C                  YE = ELECTRON FRACTION
( 1082) C                  BRYDNS = BARYON NUMBER DENSITY
( 1083) C
( 1084) C    OUTPUTS:      NONE
( 1085) C
( 1086) C
( 1087) C
( 1088) C    INCLUDE FILES:  EL_EOS.INC
( 1089) C
( 1090) C
( 1091) C***********************************************************************
( 1092) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1093) C
( 1094)       SUBROUTINE EL_GL(T,YE,BRYDNS)
( 1095) C
( 1096)       USE el_eos_module
( 1097) C
( 1098)       IMPLICIT NONE
( 1099) C
( 1100)       CHARACTER*128 c_diagnostic
( 1101) C
( 1102)       DOUBLE PRECISION T, YE, BRYDNS
( 1103) C
( 1104) C
( 1105) C
( 1106) C                           Plancks constant & speed of light
( 1107)       DOUBLE PRECISION HBAR, C
( 1108)       PARAMETER (HBAR=6.58217317D-22,C=2.997924581D23)
( 1109)       DOUBLE PRECISION MASS_E
( 1110)       PARAMETER(MASS_E=0.51100D0)
( 1111) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 24

( 1112) C                           Pi and 1/3
( 1113)       DOUBLE PRECISION PI, PI2, OVR3, MOVR3, OVR23
( 1114)       PARAMETER(PI=3.1415927, PI2=9.8696044)
( 1115)       PARAMETER(OVR3=0.33333333, MOVR3=-0.33333333, OVR23=0.66666667)
( 1116) C
( 1117) C                           2nd Fermi integral
( 1118)       DOUBLE PRECISION F_2
( 1119) C                           Positron degeneracy parameter
( 1120)       DOUBLE PRECISION ELPETA
( 1121) C                           Multiplicative factors in the G-L
( 1122) C                           quadrature
( 1123)       DOUBLE PRECISION TFAC, DTFDT, EFAC, PFAC
( 1124) C                           Electron eta and beta
( 1125)       DOUBLE PRECISION ETA_E, BETA, DBTDT, DETDT, DETDNE, D_ETA
( 1126) C                           Number density and it's derivatives
( 1127)       DOUBLE PRECISION NE_CHK, NEN, DNENDB, DNENDE
( 1128) C                           Energy density & derivatives
( 1129)       DOUBLE PRECISION E_ENG, DEDB, DEDE
( 1130) C                           Pressure & derivatives
( 1131)       DOUBLE PRECISION E_PR, DPDB, DPDE
( 1132) C                           Electron & positron occupation numbers
( 1133)       DOUBLE PRECISION FE, FP, DFEDB, DFEDE, DFPDB, DFPDE
( 1134) C                           Integrand factors & derivatives
( 1135)       DOUBLE PRECISION XN1, DXN1DB, XROOT
( 1136)       DOUBLE PRECISION XN2, DXN2DB, XN3, DXN3DB
( 1137) C                           Loop variables
( 1138)       INTEGER I, J, MAXITR
( 1139)       PARAMETER(MAXITR=30)
( 1140) C
( 1141) C                           Convergence tolerance for N-R iteration
( 1142)       DOUBLE PRECISION EPSIL
( 1143)       PARAMETER(EPSIL=1.0D-10)
( 1144) C
( 1145)       INTEGER NGAUSS
( 1146)       PARAMETER(NGAUSS=16)
( 1147) c      PARAMETER(NGAUSS=36)
( 1148)       DOUBLE PRECISION WGHT(NGAUSS), X(NGAUSS)
( 1149) C
( 1150)       DATA X /.087649410479D00
( 1151)      *,.46269632892D00,.11410577748D01,.21292836451D01,.34370866339D01
( 1152)      *,.50780186145D01,.70703385350D01,.94383143364D01,.12214223369D02
( 1153)      *,.15441527369D02,.19180156857D02,.23515905694D02,.28578729743D02
( 1154)      *,.34583398702D02,.41940452648D02,.51701160340D02/
( 1155)       DATA WGHT /.22503631486D00
( 1156)      *,.52583605276D00,.83196139169D00,.11460992410D01,.14717513170D01
( 1157)      *,.18131346874D01,.21755175197D01,.25657627502D01,.29932150864D01
( 1158)      *,.34712344831D01,.40200440864D01,.46725166077D01,.54874206580D01
( 1159)      *,.65853612333D01,.82763579844D01,.11824277552D02/
( 1160) C
( 1161) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1162) c      DATA X /
( 1163) c     * 3.961320640860D-02 ,  2.088002856543D-01 ,  5.135107755352D-01 ,
( 1164) c     * 9.543811530791D-01 ,  1.532249225394D+00 ,  2.248215817854D+00 ,
( 1165) c     * 3.103661490498D+00 ,  4.100262545699D+00 ,  5.240010108755D+00 ,
( 1166) c     * 6.525233330468D+00 ,  7.958627508999D+00 ,  9.543288035279D+00 ,
( 1167) c     * 1.128275128666D+01 ,  1.318104390025D+01 ,  1.524274226656D+01 ,
( 1168) c     * 1.747304463141D+01 ,  1.987785893308D+01 ,  2.246391051439D+01 ,
( 1169) c     * 2.523887525730D+01 ,  2.821154567688D+01 ,  3.139204037421D+01 ,






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 25

( 1170) c     * 3.479207144800D+01 ,  3.842529076480D+01 ,  4.230774567208D+01 ,
( 1171) c     * 4.645849004290D+01 ,  5.090042150332D+01 ,  5.566145791468D+01 ,
( 1172) c     * 6.077624068453D+01 ,  6.628869068025D+01 ,  7.225601475446D+01 ,
( 1173) c     * 7.875533816278D+01 ,  8.589548142950D+01 ,  9.383992978484D+01 ,
( 1174) c     * 1.028580101471D+02 ,  1.134651354897D+02 ,  1.269880151966D+02 /
( 1175) C
( 1176) c      DATA WGHT /
( 1177) c     * 1.016694751217D-01 ,  2.368502055548D-01 ,  3.726715786250D-01 ,
( 1178) c     * 5.092083225550D-01 ,  6.467110475491D-01 ,  7.854519690232D-01 ,
( 1179) c     * 9.257184440339D-01 ,  1.067815135684D+00 ,  1.212067715646D+00 ,
( 1180) c     * 1.358827381029D+00 ,  1.508476196330D+00 ,  1.661433435563D+00 ,
( 1181) c     * 1.818163187438D+00 ,  1.979183577131D+00 ,  2.145078075547D+00 ,
( 1182) c     * 2.316509528323D+00 ,  2.494237764181D+00 ,  2.679141968116D+00 ,
( 1183) c     * 2.872249479966D+00 ,  3.074773384330D+00 ,  3.288162326323D+00 ,
( 1184) c     * 3.514167642788D+00 ,  3.754935526960D+00 ,  4.013136236755D+00 ,
( 1185) c     * 4.292149591579D+00 ,  4.596338646060D+00 ,  4.931466465190D+00 ,
( 1186) c     * 5.305354988656D+00 ,  5.728974249695D+00 ,  6.218344086884D+00 ,
( 1187) c     * 6.798089006814D+00 ,  7.508695084046D+00 ,  8.423188762282D+00 ,
( 1188) c     * 9.692562072805D+00 ,  1.170765394670D+01 ,  1.607328906573D+01 /
( 1189) C
( 1190) C
( 1191) C-----------------------------------------------------------------------
( 1192) C
( 1193) C
( 1194) C
( 1195) C
( 1196) C                    Electron number density
( 1197)       NSUBE = BRYDNS*YE
( 1198) C
( 1199) C                    Coefficants for chemical potential
( 1200) C                    and thermodynamics quantities
( 1201)       QSUBE = 1.0D0/( 3.0D0*(PI**2)*((HBAR*C)**3) )
( 1202) C
( 1203)       ACOEF = 0.5D0*NSUBE/QSUBE
( 1204) C
( 1205)       BCOEF = (ACOEF**2+((PI**6)*T**6)/27.0D0)**0.5D0
( 1206) C
( 1207)       DBDT = (PI**6)*(T**5)/(9.0D0*BCOEF)
( 1208) C
( 1209)       CCOEF = (ACOEF+BCOEF)**OVR3
( 1210) C
( 1211) C
( 1212) C                    Electron chemical potential
( 1213)       MUSUBE = CCOEF-OVR3*((PI*T)**2)/CCOEF
( 1214) C
( 1215) C
( 1216) C
( 1217) C                            Initial guess at electron degeneracy
( 1218) C                            parameter
( 1219)       ETA_E = MUSUBE/T
( 1220) C
( 1221)       BETA = MASS_E/T
( 1222)       DBTDT = -BETA/T
( 1223) C                            Multiplicative factor in Fermi integrals
( 1224)       TFAC = (T**3)/((PI**2)*(HBAR*C)**3)
( 1225)       DTFDT = 3.0D0*TFAC/T
( 1226)       PFAC = TFAC*T*OVR3
( 1227)       EFAC = TFAC*T/BRYDNS






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 26

( 1228) C
( 1229) C                            Loop until the N-R iteration for the
( 1230) C                            chemical potential converges
( 1231)       DO 20 J=1,MAXITR,1
( 1232) C
( 1233) C                            Zero the electron number density integral
( 1234)         NEN = 0.0D0
( 1235)         DNENDE = 0.0D0
( 1236)         DNENDB = 0.0D0
( 1237) C
( 1238) C                            Zero the electron energy density integral
( 1239)         E_ENG = 0.0D0
( 1240)         DEDE = 0.0D0
( 1241)         DEDB = 0.0D0
( 1242) C
( 1243) C                            Zero the electron pressure integral
( 1244)         E_PR = 0.0D0
( 1245)         DPDE = 0.0D0
( 1246)         DPDB = 0.0D0
( 1247) C
( 1248) C                            Zero the positron number density
( 1249)         NEPLUS = 0.0D0
( 1250) C
( 1251) C       ----------------------------------------------------------------
( 1252) C       |                    Do the Gaussian Quadrature                |
( 1253)         DO 10 I=1,NGAUSS,1
( 1254) C       |                    Electron occupation numbers               |
( 1255)           FE = 1.0D0/(DEXP(X(I)+BETA-ETA_E)+1.0D0)
( 1256) C       |                    Positron occupation numbers               |
( 1257)           FP = 1.0D0/(DEXP(X(I)+BETA+ETA_E)+1.0D0)
( 1258) C       |                    Derivatives w.r.t. beta                   |
( 1259)           DFEDB = -FE*(1.0D0-FE)
( 1260)           DFPDB = -FP*(1.0D0-FP)
( 1261) C       |                    Derivatives w.r.t. Eta                    |
( 1262)           DFEDE = FE*(1.0D0-FE)
( 1263)           DFPDE = -FP*(1.0D0-FP)
( 1264) C       |                                                              |
( 1265) C       |                    Number density integral & derivatives     |
( 1266)           XROOT = DSQRT(X(I)*(X(I)+2.0D0*BETA))
( 1267)           XN1 = XROOT*(X(I)+BETA)
( 1268)           DXN1DB = XROOT+X(I)*(X(I)+BETA)/XROOT
( 1269)           NEN = NEN+WGHT(I)*XN1*(FE-FP)
( 1270)           DNENDB = DNENDB+WGHT(I)*(DXN1DB*(FE-FP)+XN1*(DFEDB-DFPDB))
( 1271)           DNENDE = DNENDE+WGHT(I)*XN1*(DFEDE-DFPDE)
( 1272) C       |                    Sum for positron # integral               |
( 1273)           NEPLUS = NEPLUS+WGHT(I)*XN1*FP
( 1274) C       |                                                              |
( 1275) C       |                                                              |
( 1276) C       |                    Energy integral & derivatives             |
( 1277)           XN2 = XROOT*(X(I)+BETA)**2
( 1278)           DXN2DB = 2.0D0*XROOT*(X(I)+BETA)+
( 1279)      1          X(I)*((X(I)+BETA)**2)/XROOT
( 1280)           E_ENG = E_ENG+WGHT(I)*XN2*(FE+FP)
( 1281)           DEDB = DEDB+WGHT(I)*(DXN2DB*(FP+FE)+XN2*(DFEDB+DFPDB))
( 1282)           DEDE = DEDE+WGHT(I)*XN2*(DFEDE+DFPDE)
( 1283) C       |                                                              |
( 1284) C       |                                                              |
( 1285) C       |                    Pressure integral & derivatives           |






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 27

( 1286)           XN3 = XROOT**3
( 1287)           DXN3DB = 3.0D0*XROOT*X(I)
( 1288)           E_PR = E_PR+WGHT(I)*XN3*(FE+FP)
( 1289)           DPDB = DPDB+WGHT(I)*(DXN3DB*(FE+FP)+XN3*(DFEDB+DFPDB))
( 1290)           DPDE = DPDE+WGHT(I)*XN3*(DFEDE+DFPDE)
( 1291) C       |                                                              |
( 1292) C       |                                                              |
( 1293)  10     CONTINUE
( 1294) C       |                                                              |
( 1295) C       ----------------------------------------------------------------
( 1296) C                            Multiply by the temperature factor to get
( 1297) C                            number density
( 1298)         NE_CHK = TFAC*NEN
( 1299) C                            Multiply by the temperature factor to get
( 1300) C                            number density
( 1301)         NEPLUS = TFAC*NEPLUS
( 1302) C
( 1303) C                            Calculate the new change in ETA
( 1304)         D_ETA = -(NE_CHK-NSUBE)/(DNENDE*TFAC+EPSIL)
( 1305) C
( 1306) C                   If we've met the convergence criterion...
( 1307)         IF(DABS(D_ETA).LT.(EPSIL*ETA_E)) THEN
( 1308) C                          Then break out the chemical potential
( 1309) C                          loop
( 1310)           GOTO 30
( 1311)         ELSE
( 1312) C                          Otherwise update the chemical potential
( 1313)           ETA_E = ETA_E+D_ETA
( 1314)         ENDIF
( 1315) C
( 1316)  20   CONTINUE
( 1317) C
( 1318) C                                      If we reached this point the
( 1319) C                                      N-R iteration didn't converge
( 1320) C      WRITE(*,*) ' EL_EOS: N-R iteration didnt converge!, 
( 1321) C     *  T , YE, BRYDNS, RHO', T ,YE , BRYDNS, 
( 1322) C     * BRYDNS * 1.674d-24/1.d-39
( 1323) C      c_diagnostic = ' EL_EOS: N-R iteration didnt converge'
( 1324) C
( 1325) C
( 1326) C               If we reached this point then the N-R iteration has
( 1327) C               converged.
( 1328)  30   CONTINUE
( 1329) C
( 1330) C                     Is the result consistent with electron number
( 1331) C                     density?
( 1332) C      IF(DABS((NE_CHK-NSUBE)/NSUBE).GT.1.0D-5) THEN
( 1333) C        WRITE(*,*) ' EL_EOS: Gaussian quadrature converged badly!'
( 1334) C        STOP
( 1335) C      ENDIF
( 1336) C
( 1337) C             Calculate thermodynamic quantities...
( 1338) C
( 1339) C                          Electron chemical potential
( 1340)       MUSUBE = T*ETA_E
( 1341) C                          Electron pressure
( 1342)       EPRESS = PFAC*E_PR
( 1343) C                          Electron internal energy per baryon






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 28

( 1344)       EU = EFAC*E_ENG
( 1345) C                          Electron free energy per baryon
( 1346)       FSUBE = YE*MUSUBE-EPRESS/BRYDNS
( 1347) C                          Electron entropy per baryon
( 1348)       ES = (EU-FSUBE)/T
( 1349) C
( 1350) C                          Derivative of the electron eta w.r.t. T
( 1351)       DETDT = -(DTFDT*NEN+TFAC*DNENDB*DBTDT)/(TFAC*DNENDE)
( 1352) C                          Derivative of the electron eta w.r.t. NSUBE
( 1353)       DETDNE = 1.0D0/(TFAC*DNENDE)
( 1354) C
( 1355) C                    Derivatives of chem. potential w.r.t. T,
( 1356) C                    BRYDNS, YE
( 1357)       DEMUDT = T*DETDT+MUSUBE/T
( 1358)       DEMUDN = YE*T*DETDNE
( 1359)       DEMUDY = BRYDNS*T*DETDNE
( 1360) C
( 1361) C
( 1362) C                    Derivatives of pressure w.r.t. BRYDNS,YE,T
( 1363)       DEPDN = YE*PFAC*DPDE*DETDNE
( 1364)       DEPDY = BRYDNS*PFAC*DPDE*DETDNE
( 1365)       DEPDT = (4.0D0*PFAC/T)*E_PR+PFAC*(DPDE*DETDT+DPDB*DBTDT)
( 1366) C
( 1367) C                    Derivatives of internal energy w.r.t.
( 1368) C                    T,BRYDNS,YE
( 1369)       DEUDT = (4.0D0*EFAC/T)*E_ENG+EFAC*(DEDB*DBTDT+DEDE*DETDT)
( 1370)       DEUDN = (-1.0D0*EFAC/BRYDNS)*E_ENG+YE*EFAC*DEDE*DETDNE
( 1371)       DEUDY = BRYDNS*EFAC*DEDE*DETDNE
( 1372) C
( 1373) C                    Derivatives of entropy w.r.t. T,BRYDNS,YE
( 1374)       DESDT = -ES/T+(DEUDT-YE*DEMUDT+DEPDT/BRYDNS)/T
( 1375)       DESDN = (DEUDN-YE*DEMUDN+DEPDN/BRYDNS-EPRESS/(BRYDNS**2))/T
( 1376)       DESDY = (DEUDY-MUSUBE-YE*DEMUDY+DEPDY/BRYDNS)/T
( 1377) C
( 1378) C
( 1379) C
( 1380) C                    Photon pressure
( 1381)       PPRESS = (PI**2)*(T**4)/(45.0*((HBAR*C)**3))
( 1382) C                    Photon entropy per baryon
( 1383)       PS = 4.0*PPRESS/(T*BRYDNS)
( 1384) C
( 1385) C                    Photon internal energy per baryon
( 1386)       PU = 3.0*PPRESS/BRYDNS
( 1387) C
( 1388) C                    Photon free energy per baryon
( 1389)       PF = PU-T*PS
( 1390) C
( 1391) C
( 1392) C                    Derivatives of photon pressure
( 1393)       DPPDN = 0.0
( 1394)       DPPDT = BRYDNS*PS
( 1395)       DPPDY = 0.0
( 1396) C
( 1397) C                    Derivatives of photon entropy
( 1398)       DPSDN = -PS/BRYDNS
( 1399)       DPSDT = 3.0*PS/T
( 1400)       DPSDY = 0.0
( 1401) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 29

( 1402) C                    Derivatives of internal energy
( 1403)       DPUDN = -0.75*T*PS/BRYDNS
( 1404)       DPUDT = 3.0*PS
( 1405)       DPUDY = 0.0
( 1406) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1407) C
( 1408)  999  RETURN
( 1409) C
( 1410) C
( 1411)       END






















































PGF90 (Version     14.9)          03/12/2015  00:11:50      page 30

( 1412) 
( 1413) !///////////////////////////////////////////////////////////////////////
( 1414) 
( 1415) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1416) C***********************************************************************
( 1417) C
( 1418) C    MODULE:       F_2
( 1419) C    TYPE:         DOUBLE PRECISION FUNCTION
( 1420) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 1421) C    DATE:         12/16/91
( 1422) C                  Version 2: 1/24/93
( 1423) C
( 1424) C    CALL LINE:    F_2(Y)      (2nd Fermi Integral)
( 1425) C
( 1426) C    INPUTS:       Y (DOUBLE PRECISION)   (Argument)
( 1427) C
( 1428) C    RETURN:       2nd Fermi Integral (DOUBLE PRECISION)
( 1429) C
( 1430) C***********************************************************************
( 1431)       DOUBLE PRECISION FUNCTION F_2(Y)
( 1432)       IMPLICIT NONE
( 1433)       CHARACTER*128 c_diagnostic
( 1434)       DOUBLE PRECISION Y, YEXP
( 1435)       IF(Y.GT.3.0D0) THEN
( 1436)         WRITE(*,*) ' F_2(Y) FAILS FOR Y .GT. 3; Y =',Y
( 1437)         STOP
( 1438)       ENDIF
( 1439) C
( 1440) C                       Note: This approximation is based on the
( 1441) C                       Bludman & Van Riper approximation (see
( 1442) C                       Ap. J. Vol. 212 page 866-867 (1977))
( 1443) C                       equation (3.6)
( 1444) C
( 1445)       IF(Y.LT.-1.0D0) THEN
( 1446)         YEXP = EXP(Y)
( 1447)         F_2 = 2.0*YEXP*(1.0-0.125*YEXP+0.037037*(YEXP**2))
( 1448)       ELSE
( 1449)         F_2 = 1.803D0+1.645D0*Y+0.6931D0*(Y**2)+0.1666667D0*(Y**3)+
( 1450)      1        2.0833333D-2*(Y**4)-3.4722D-4*(Y**6)
( 1451)       ENDIF
( 1452)  999  RETURN
( 1453)       END






















PGF90 (Version     14.9)          03/12/2015  00:11:50      page 31

( 1454) 
( 1455) !///////////////////////////////////////////////////////////////////////
( 1456) 
( 1457) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1458) C***********************************************************************
( 1459) C
( 1460) C    FILE:         EL_REL.FOR
( 1461) C
( 1462) C***********************************************************************
( 1463) C
( 1464) C    MODULE:       EL_REL
( 1465) C    TYPE:         SUBROUTINE
( 1466) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 1467) C
( 1468) C    DATE:         2/12/91
( 1469) C
( 1470) C                  BITNET:  SWESTY@SUNYSBNP or
( 1471) C                  INTERNET: swesty@nuclear.physics.sunysb.edu or
( 1472) C                            fswesty@sbast3.ess.sunysb.edu
( 1473) C
( 1474) C    PURPOSE:      The relativistic electron and photon EOS
( 1475) C
( 1476) C
( 1477) C    CALL LINE:    CALL EL_REL(T,YE,BRYDNS)
( 1478) C
( 1479) C    INPUTS:       T = TEMPERATURE
( 1480) C                  YE = ELECTRON FRACTION
( 1481) C                  BRYDNS = BARYON NUMBER DENSITY
( 1482) C
( 1483) C    OUTPUTS:      NONE
( 1484) C
( 1485) C
( 1486) C
( 1487) C    INCLUDE FILES:  EL_REL.INC
( 1488) C
( 1489) C
( 1490) C***********************************************************************
( 1491) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1492) C
( 1493)       SUBROUTINE EL_REL(T,YE,BRYDNS)
( 1494) C
( 1495)       USE el_eos_module
( 1496) C
( 1497)       IMPLICIT NONE
( 1498) C
( 1499)       DOUBLE PRECISION T, YE, BRYDNS
( 1500) C
( 1501) C
( 1502) C
( 1503) C                           Plancks constant & speed of light
( 1504)       DOUBLE PRECISION HBAR, C
( 1505)       PARAMETER (HBAR=6.58217317D-22,C=2.997924581D23)
( 1506) C
( 1507) C                           Pi and 1/3
( 1508)       DOUBLE PRECISION PI, PI2, OVR3, MOVR3, OVR23
( 1509)       PARAMETER(PI=3.1415927, PI2=9.8696044)
( 1510)       PARAMETER(OVR3=0.33333333, MOVR3=-0.33333333, OVR23=0.66666667)
( 1511) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 32

( 1512) C                           2nd Fermi integral
( 1513)       DOUBLE PRECISION F_2
( 1514) C
( 1515) C                           Positron degeneracy parameter
( 1516)       DOUBLE PRECISION ELPETA
( 1517) C
( 1518) C
( 1519) C                    Leptons
( 1520) C
( 1521) C                    Electron number density
( 1522)       NSUBE = BRYDNS*YE
( 1523) C
( 1524) C                    Coefficants for chemical potential
( 1525) C                    and thermodynamics quantities
( 1526)       QSUBE = 1.0/( 3.0*(PI**2)*((HBAR*C)**3) )
( 1527) C
( 1528)       ACOEF = 0.5*NSUBE/QSUBE
( 1529) C
( 1530)       BCOEF = (ACOEF**2+((PI**6)*T**6)/27.0)**0.5
( 1531) C
( 1532)       DBDT = (PI**6)*(T**5)/(9.0*BCOEF)
( 1533) C
( 1534)       CCOEF = (ACOEF+BCOEF)**OVR3
( 1535) C
( 1536) C
( 1537) C                    Electron chemical potential
( 1538)       MUSUBE = CCOEF-OVR3*((PI*T)**2)/CCOEF
( 1539) C
( 1540) C                    Positron degeneracy parameter
( 1541)       ELPETA = -MUSUBE/T
( 1542) C
( 1543) C                    Positron number density
( 1544)       NEPLUS =  3.0*QSUBE*(T**3)*F_2(ELPETA)
( 1545) C
( 1546) C
( 1547) C                    Electron pressure for rel. case
( 1548)       EPRESS = 0.25*QSUBE*(MUSUBE**4+2.0*(PI*T*MUSUBE)**2+
( 1549)      1 7.0*((PI*T)**4)/15.0)
( 1550) C
( 1551) C
( 1552) C                    Electron internal energy per baryon
( 1553)       EU = 0.75*QSUBE*(MUSUBE**4+2.0*(PI*MUSUBE*T)**2+
( 1554)      1 7.0*((PI*T)**4)/15.0)/BRYDNS
( 1555) C
( 1556) C
( 1557) C                    Electron free energy per baryon
( 1558)       FSUBE = ((MUSUBE*NSUBE)-EPRESS)/BRYDNS
( 1559) C
( 1560) C                    Electron entropy per baryon
( 1561)       ES = QSUBE*(((PI*MUSUBE)**2)*T+7.0*(PI**4)*(T**3)/
( 1562)      1 15.0)/BRYDNS
( 1563) C
( 1564) C                    Photons
( 1565) C
( 1566) C                    Photon pressure
( 1567)       PPRESS = (PI**2)*(T**4)/(45.0*((HBAR*C)**3))
( 1568) C                    Photon entropy per baryon
( 1569)       PS = 4.0*PPRESS/(T*BRYDNS)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 33

( 1570) C
( 1571) C                    Photon internal energy per baryon
( 1572)       PU = 3.0*PPRESS/BRYDNS
( 1573) C
( 1574) C                    Photon free energy per baryon
( 1575)       PF = PU-T*PS
( 1576) C
( 1577) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1578) C
( 1579) C                    Derivatives of chem. potential w.r.t. T,
( 1580) C                    BRYDNS, YE
( 1581) C
( 1582)       DEMUDT = DBDT/(3.0*CCOEF**2)-OVR23*(PI**2)*T/CCOEF+
( 1583)      1         DBDT*((PI*T)**2)/(9.0*CCOEF**4)
( 1584) C
( 1585)       DEMUDN = (YE*PI2*(HBAR*C)**3)/(MUSUBE**2+OVR3*PI2*T**2)
( 1586) C
( 1587)       DEMUDY = BRYDNS*DEMUDN/YE
( 1588) C
( 1589) C
( 1590) C                    Derivatives of pressure w.r.t. BRYDNS,YE,T
( 1591) C
( 1592)       DEPDN = BRYDNS*YE*DEMUDN
( 1593) C
( 1594)       DEPDY = BRYDNS*DEPDN/YE
( 1595) C
( 1596)       DEPDT = BRYDNS*(ES+YE*DEMUDT)
( 1597) C
( 1598) C
( 1599) C                    Derivatives of entropy w.r.t. T,BRYDNS,YE
( 1600) C
( 1601)       DESDT = ES/T+OVR23*(7.0*PI2*(T**2)/15.0+MUSUBE*T*DEMUDT)/
( 1602)      1        (BRYDNS*(HBAR*C)**3)
( 1603) C
( 1604)       DESDN = -1.0*DEPDT/(BRYDNS**2)
( 1605) C
( 1606)       DESDY = 2.0*T*QSUBE*PI2*MUSUBE*DEMUDY/BRYDNS
( 1607) C
( 1608) C
( 1609) C                    Derivatives of internal energy w.r.t.
( 1610) C                    T,BRYDNS,YE
( 1611)       DEUDT = T*DESDT
( 1612) C
( 1613)       DEUDN = (YE*(MUSUBE-T*DEMUDT)-EU)/BRYDNS
( 1614) C
( 1615)       DEUDY = 3.0*QSUBE*((MUSUBE**3)+PI2*(T**2)*MUSUBE)*
( 1616)      1        DEMUDY/BRYDNS
( 1617) C
( 1618) C
( 1619) C                               Photons
( 1620) C
( 1621) C                    Derivatives of photon pressure
( 1622)       DPPDN = 0.0
( 1623)       DPPDT = BRYDNS*PS
( 1624)       DPPDY = 0.0
( 1625) C
( 1626) C                    Derivatives of photon entropy
( 1627)       DPSDN = -PS/BRYDNS






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 34

( 1628)       DPSDT = 3.0*PS/T
( 1629)       DPSDY = 0.0
( 1630) C
( 1631) C                    Derivatives of internal energy
( 1632)       DPUDN = -0.75*T*PS/BRYDNS
( 1633)       DPUDT = 3.0*PS
( 1634)       DPUDY = 0.0
( 1635) C
( 1636) C
( 1637) C
( 1638) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1639) C
( 1640) C
( 1641)  999  RETURN
( 1642) C
( 1643) C
( 1644)       END















































PGF90 (Version     14.9)          03/12/2015  00:11:50      page 35

( 1645) 
( 1646) !///////////////////////////////////////////////////////////////////////
( 1647) 
( 1648) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1649) C***********************************************************************
( 1650) C
( 1651) C    MODULE:       EOS_M4C
( 1652) C    TYPE:         SUBROUTINE
( 1653) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 1654) C
( 1655) C    DATE:         3/3/92  Model 4C modifications completed
( 1656) C                  12/15/90 Modified from model 4A to include the
( 1657) C                  phase boundary cutoffs and Maxwell construction
( 1658) C                  boundaries.
( 1659) C                  7/13/90 Modified from model 1-d to include Maxwell
( 1660) C                  construction
( 1661) C                  5/25/90  MODEL 1D
( 1662) C
( 1663) C                  Please report any problems to me at:
( 1664) C                  BITNET:  SWESTY@SUNYSBNP or
( 1665) C                  INTERNET: FSWESTY@ASTRO.SUNYSB.EDU or
( 1666) C                            fswesty@sbast3.sunysb.edu
( 1667) C
( 1668) C
( 1669) C    CALL LINE:    CALL EOS_M4C(INPVAR,YE,BRYDNS,IFLAG,EOSFLG,FFLAG,
( 1670) C                  XPREV,P_PREV)
( 1671) C
( 1672) C    INPUTS:       INPVAR = TEMP, INTERNAL ENG, OR ENTROPY
( 1673) C                  YE = ELECTRON FRACTION
( 1674) C                  BRYDNS = BARYON NUMBER DENSITY
( 1675) C                  IFLAG = 1 --> INPVAR IS TEMPERATURE
( 1676) C                          2 --> INPVAR IS INTERNAL ENERGY (NOT IMPLEM)
( 1677) C                          3 --> INPVAR IS ENTROPY (NOT IMPLEMENTED)
( 1678) C                          (IFLAG=1 is now assumed at this level)
( 1679) C                  FFLAG = "FORCING FLAG"  0 --> NO FORCING
( 1680) C                                          1 --> FORCE A PARTICULAR
( 1681) C                                                SCHEME TO BE USED
( 1682) C
( 1683) C
( 1684) C    OUTPUTS:      EOSFLG = 1 --> Not implemented in model 4B
( 1685) C                           2 --> GENERAL EOS
( 1686) C                           3 --> BULK EOS (includes alpha's)
( 1687) C                  XPREV = PREVIOUS VALUE OF X (MUST BE SUPPLIED ON
( 1688) C                          FIRST CALL)
( 1689) C                  P_PREV = PREVIOUS VALUE OF PROTON DENSITY (MUST BE
( 1690) C                          SUPPLIED ON FIRST CALL)
( 1691) C
( 1692) C
( 1693) C
( 1694) C
( 1695) C    INCLUDE FILES:  EOS_M4C.INC
( 1696) C
( 1697) C
( 1698) C***********************************************************************
( 1699) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1700) C
( 1701)       SUBROUTINE EOS_M4C(INPVAR,YE,BRYDNS,IFLAG,EOSFLG,FFLAG,
( 1702)      1                   SSFLAG,XPREV,P_PREV)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 36

( 1703) C
( 1704)       USE eos_m4c_module, ONLY: SWTFLG, RSFLAG, XH, HEAVCT, NF_FLG
( 1705)      
( 1706) C
( 1707)       IMPLICIT NONE
( 1708) C
( 1709)       DOUBLE PRECISION OUTVAR(4)
( 1710) C
( 1711)       INTEGER IFLAG,EOSFLG,FFLAG,SSFLAG
( 1712)       DOUBLE PRECISION INPVAR(4),YE,BRYDNS,XPREV,P_PREV
( 1713)       DOUBLE PRECISION T
( 1714) C
( 1715) C
( 1716) C                       This include file contains all variable
( 1717) C                       declarations.  NOTE:: no implicit typing
( 1718) C                       scheme is followed in this code; if you
( 1719) C                       have any doubt as to a variables type CHECK
( 1720) C                       IT!!!!.  Also note that ALL variables are
( 1721) C                       declared explicitly.
( 1722) C
( 1723) C
( 1724) C                         Set the "switch" flag to zero
( 1725)       SWTFLG = 0
( 1726) C
( 1727) C                         Set T equal to the input variable (the entropy
( 1728) C                         and internal energy options should go through
( 1729) C                         INVEOS untill further notice)
( 1730)       T = INPVAR(1)
( 1731) C
( 1732) C
( 1733) C                         If the "forcing" flag is set then skip
( 1734) C                         the EOS determination logic and go straight
( 1735) C                         to the EOS determined by EOSFLG
( 1736)       IF(FFLAG.EQ.1) THEN
( 1737)         GOTO 10
( 1738)       ELSE
( 1739) C                         Otherwise let the EOS logic module determine
( 1740) C                         the correct EOS to use
( 1741)         CALL EOSLOG(INPVAR,YE,BRYDNS,EOSFLG)
( 1742)       ENDIF
( 1743) C
( 1744) C
( 1745) C-----------------------------------------------------------------------
( 1746) C-----------------------------------------------------------------------
( 1747) C                        Try NUCEOS first and if not successfull
( 1748) C                        then try bulk EOS
( 1749)  10   CONTINUE
( 1750)       IF(EOSFLG.EQ.1) THEN
( 1751) C
( 1752)         CALL NUCEOS(INPVAR,YE,BRYDNS,XPREV,P_PREV,SSFLAG)
( 1753) C
( 1754) C                    If the nuclear EOS failed and the reset flag is set
( 1755) C                    then reset the initial guesses and try again
( 1756)         IF((SSFLAG.NE.1).AND.(RSFLAG.EQ.1)) THEN
( 1757)           CALL RESET(INPVAR,YE,BRYDNS,OUTVAR)
( 1758)           OUTVAR(1) = INPVAR(1)
( 1759)           CALL NUCEOS(OUTVAR,YE,BRYDNS,XPREV,P_PREV,SSFLAG)
( 1760) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 37

( 1761) C
( 1762) C                    Make a last ditch effort at convergence
( 1763)           IF(SSFLAG.NE.1) THEN
( 1764)             OUTVAR(2) = 0.155
( 1765)             OUTVAR(3) = -15.0
( 1766)             OUTVAR(4) = -20.0
( 1767)             CALL NUCEOS(OUTVAR,YE,BRYDNS,XPREV,P_PREV,SSFLAG)
( 1768)           ENDIF
( 1769) C
( 1770)         ENDIF
( 1771) C
( 1772) C
( 1773) C
( 1774)         IF((XH.GT.HEAVCT).AND.(SSFLAG.EQ.1)) THEN
( 1775) C                    Set EOS flag to full scheme
( 1776)           EOSFLG = 2
( 1777) C
( 1778) C                    Else if fraction of nuclei is less than the minimum
( 1779) C                    or if NUCEOS was unsuccessful use the no nuclei EOS
( 1780)         ELSE
( 1781)           IF(FFLAG.NE.1) THEN
( 1782) C
( 1783)             CALL ALFEOS(INPVAR,YE,BRYDNS,P_PREV,SSFLAG)
( 1784) C
( 1785)             IF((SSFLAG.NE.1).AND.(FFLAG.EQ.1)) THEN
( 1786)               EOSFLG = 1
( 1787)               WRITE(*,*) 'A2 failed at try = ',T,BRYDNS,YE
( 1788)               GOTO 999
( 1789)             ENDIF
( 1790) C
( 1791) C                    Set nuclei to bulk EOS
( 1792)             EOSFLG = 3
( 1793) C                    Save value of proton fraction
( 1794)             P_PREV = YE*BRYDNS
( 1795) C
( 1796)             GOTO 999
( 1797) C
( 1798)           ELSE
( 1799)             IF(NF_FLG.EQ.1)
( 1800)      1          WRITE(*,*) 'NUC failed at t,rho = ',t,brydns
( 1801)             GOTO 999
( 1802)           ENDIF
( 1803)         ENDIF
( 1804) C
( 1805)       ENDIF
( 1806) C
( 1807) C
( 1808) C          End of NUCEOS--BULK EOS calculations
( 1809) C-----------------------------------------------------------------------
( 1810) C-----------------------------------------------------------------------
( 1811) C
( 1812) C
( 1813) C
( 1814) C
( 1815) C
( 1816) C
( 1817) C
( 1818) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 38

( 1819) C
( 1820) C
( 1821) C
( 1822) C-----------------------------------------------------------------------
( 1823) C-----------------------------------------------------------------------
( 1824) C                            CALCULATE FULL EOS (INCLUDING NUCLEI)
( 1825)       IF(EOSFLG.EQ.2) THEN
( 1826) C
( 1827) C                    Call the nuclear EOS
( 1828)         CALL NUCEOS(INPVAR,YE,BRYDNS,XPREV,P_PREV,SSFLAG)
( 1829) C
( 1830) C
( 1831) C                    If the nuclear EOS failed and the reset flag is set
( 1832) C                    then reset the initial guesses and try again
( 1833)         IF((SSFLAG.NE.1).AND.(RSFLAG.EQ.1)) THEN
( 1834) cccc          WRITE(*,*) ' EOS_M4C:: r.i.gs.'
( 1835)           CALL RESET(INPVAR,YE,BRYDNS,OUTVAR)
( 1836)           OUTVAR(1) = INPVAR(1)
( 1837)           CALL NUCEOS(OUTVAR,YE,BRYDNS,XPREV,P_PREV,SSFLAG)
( 1838) C
( 1839) C
( 1840) C                    Make a last ditch effort at convergence
( 1841)           IF(SSFLAG.NE.1) THEN
( 1842)             OUTVAR(2) = 0.155
( 1843)             OUTVAR(3) = -15.0
( 1844)             OUTVAR(4) = -20.0
( 1845)             CALL NUCEOS(OUTVAR,YE,BRYDNS,XPREV,P_PREV,SSFLAG)
( 1846)           ENDIF
( 1847) C
( 1848) C
( 1849) C
( 1850)           IF(SSFLAG.NE.1) THEN
( 1851) cccc            WRITE(*,*) '     r.i.gs. failure @ try: ',inpvar
( 1852)             GOTO 999
( 1853)           ELSE
( 1854)             INPVAR(2) = OUTVAR(2)
( 1855)             INPVAR(3) = OUTVAR(3)
( 1856)             INPVAR(4) = OUTVAR(4)
( 1857)           ENDIF
( 1858) C                    Otherwise quit and return
( 1859)         ELSEIF((SSFLAG.NE.1).AND.(FFLAG.EQ.1)) THEN
( 1860)           GOTO 999
( 1861)         ENDIF
( 1862) C
( 1863) C
( 1864) C
( 1865) C
( 1866) C                    If fraction of heavies is greater than the minimum
( 1867) C                    parameter, then this EOS is OK
( 1868)         IF((XH.GT.HEAVCT).AND.(SSFLAG.EQ.1)) THEN
( 1869) C                    Set EOS flag to full scheme
( 1870)           EOSFLG = 2
( 1871) C
( 1872) C                    Else if fraction of nuclei is less than the minimum
( 1873) C                    or if NUCEOS was unsuccessful use the no nuclei EOS
( 1874)         ELSE
( 1875) C                    If the forcing flag is not set
( 1876)           IF(FFLAG.NE.1) THEN






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 39

( 1877) C                    Set nuclei to no nuclei EOS
( 1878)             EOSFLG = 3
( 1879) C                    Set flag to indicate switch is being made
( 1880)             SWTFLG = 1
( 1881) C
( 1882)             WRITE(*,*) ' NUCEOS failed at try =',t,brydns,ye
( 1883)             WRITE(*,*) ' where it shouldnt have; Bulk EOS was used'
( 1884)             WRITE(*,*) ' IV = ',INPVAR
( 1885)             WRITE(*,*) ' '
( 1886) C
( 1887) C                    Branch to bulk EOS
( 1888)             GOTO 50
( 1889) C
( 1890) C                    Otherwise since forcing flag is set then declare
( 1891) C                    a failure and return
( 1892)           ELSE
( 1893) C                      If the failure message flag is set then announce
( 1894) C                      the failure
( 1895)             IF(NF_FLG.EQ.1)
( 1896)      1          WRITE(*,*) 'NUC failed at t,r = ',t,brydns
( 1897)             GOTO 999
( 1898)           ENDIF
( 1899)         ENDIF
( 1900) C
( 1901)       ENDIF
( 1902) C                              END OF FULL EOS CALULATIONS
( 1903) C-----------------------------------------------------------------------
( 1904) C-----------------------------------------------------------------------
( 1905) C
( 1906) C
( 1907) C
( 1908) C
( 1909) C
( 1910) C
( 1911) C
( 1912) C
( 1913) C
( 1914) C-----------------------------------------------------------------------
( 1915) C-----------------------------------------------------------------------
( 1916) C                              CALCULATE BULK EOS
( 1917)  50   CONTINUE
( 1918)       IF(EOSFLG.EQ.3) THEN
( 1919) C
( 1920)         CALL ALFEOS(INPVAR,YE,BRYDNS,P_PREV,SSFLAG)
( 1921) C
( 1922)         IF((SSFLAG.EQ.0).AND.(FFLAG.EQ.1).AND.(NF_FLG.EQ.1)) THEN
( 1923)           WRITE(*,*) 'A1 failed at t,rho = ',t,brydns
( 1924)           GOTO 999
( 1925)         ENDIF
( 1926) C                           If this EOS was used as a result of the
( 1927) C                           nuclear EOS failing then set the
( 1928) C                           success flag to indicate a warning
( 1929)         IF(SWTFLG.EQ.1) THEN
( 1930)           SSFLAG = 2
( 1931)         ENDIF
( 1932) C
( 1933) C                           Save the value of the proton fraction
( 1934)         P_PREV = YE*BRYDNS






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 40

( 1935) C
( 1936)         GOTO 999
( 1937) C
( 1938)       ENDIF
( 1939) C                END OF BULK EOS CALCULATIONS
( 1940) C-----------------------------------------------------------------------
( 1941) C-----------------------------------------------------------------------
( 1942) C
( 1943) C
( 1944) C
( 1945) C
( 1946) C
( 1947) C
( 1948) C-----------------------------------------------------------------------
( 1949) C-----------------------------------------------------------------------
( 1950) C                              CALCULATE VIA MAXWELL CONSTRUCTION
( 1951)       IF(EOSFLG.EQ.4) THEN
( 1952) C
( 1953)         CALL MAXWEL(INPVAR,YE,BRYDNS,XPREV,P_PREV,SSFLAG)
( 1954) C
( 1955) C                 Save the value of the proton fraction
( 1956)         P_PREV = YE*BRYDNS
( 1957) C
( 1958) C                 If Maxwell EOS failed then announce the failure
( 1959)         IF(SSFLAG.NE.1) THEN
( 1960)           WRITE(*,*) ' MAXWEL failed at try = '
( 1961)           WRITE(*,*) T,BRYDNS,YE
( 1962)         ENDIF
( 1963) C
( 1964)           GOTO 999
( 1965) C
( 1966)       ENDIF
( 1967) C                END OF MAXWELL CONSTRUCTION CALCULATIONS
( 1968) C-----------------------------------------------------------------------
( 1969) C-----------------------------------------------------------------------
( 1970) C
( 1971)   999 CONTINUE
( 1972) C
( 1973)       RETURN
( 1974) C
( 1975)       END























PGF90 (Version     14.9)          03/12/2015  00:11:50      page 41

( 1976) C
( 1977) 
( 1978) !///////////////////////////////////////////////////////////////////////
( 1979) 
( 1980) C23456789012345678901234567890123456789012345678901234567890123456789012
( 1981) C***********************************************************************
( 1982) C
( 1983) C    FILE:         EOSLOG.FOR
( 1984) C
( 1985) C***********************************************************************
( 1986) C
( 1987) C    MODULE:       EOSLOG
( 1988) C    TYPE:         SUBROUTINE
( 1989) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 1990) C
( 1991) C    DATE:         12/15/90
( 1992) C
( 1993) C                  Please report any problems to me at:
( 1994) C                  BITNET:  SWESTY@SUNYSBNP or
( 1995) C                  INTERNET: FSWESTY@ASTRO.SUNYSB.EDU or
( 1996) C                            fswesty@sbast3.sunysb.edu
( 1997) C
( 1998) C
( 1999) C    CALL LINE:    CALL EOSLOG(INPVAR,YE,BRYDNS,EOSFLG)
( 2000) C
( 2001) C
( 2002) C    INPUTS:       INPVAR = TEMP, INTERNAL ENG, OR ENTROPY
( 2003) C                  YE = ELECTRON FRACTION
( 2004) C                  BRYDNS = BARYON NUMBER DENSITY
( 2005) C
( 2006) C
( 2007) C
( 2008) C    OUTPUTS:      EOSFLG = 1 --> Not implemented in model 4B
( 2009) C                           2 --> GENERAL EOS
( 2010) C                           3 --> BULK EOS (includes alpha's)
( 2011) C
( 2012) C
( 2013) C
( 2014) C
( 2015) C    INCLUDE FILES:  EOS_M4C.INC, MAXWEL.INC
( 2016) C
( 2017) C
( 2018) C***********************************************************************
( 2019) C23456789012345678901234567890123456789012345678901234567890123456789012
( 2020) C
( 2021)       SUBROUTINE EOSLOG(INPVAR,YE,BRYDNS,EOSFLG)
( 2022) C
( 2023) C
( 2024)       USE eos_m4c_module
( 2025)       USE maxwel_module
( 2026) C
( 2027) C
( 2028)       IMPLICIT NONE
( 2029) C
( 2030) C                       This include file contains all variable
( 2031) C                       declarations.  NOTE:: no implicit typing
( 2032) C                       scheme is followed in this code; if you
( 2033) C                       have any doubt as to a variables type CHECK






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 42

( 2034) C                       IT!!!!.  Also note that ALL variables are
( 2035) C                       declared explicitly.
( 2036) C
( 2037) C
( 2038)       DOUBLE PRECISION NLOW, NHI, N_CUT, TEMP_1, TEMP_2, T_BNDY
( 2039) C
( 2040)       DOUBLE PRECISION LMM, LMP, LPM, LPP
( 2041)       DOUBLE PRECISION DNDY1, DNDY2
( 2042) C
( 2043)       INTEGER EOSFLG
( 2044)       DOUBLE PRECISION INPVAR(4),YE,BRYDNS,T
( 2045) C
( 2046) C
( 2047)  10   CONTINUE
( 2048) C
( 2049) C
( 2050) C                         Set T equal to the input variable (any calls
( 2051) C                         with entropy or internal energy should go
( 2052) C                         the the EOS_M4B subroutine)
( 2053) C
( 2054)       T = INPVAR(1)
( 2055) C
( 2056) C-----------------------------------------------------------------------
( 2057) C         code to figure out the boundaries from the tables
( 2058) C-----------------------------------------------------------------------
( 2059) C
( 2060) C
( 2061) C
( 2062) C
( 2063)       IF(YE.GT.Y_HI) THEN
( 2064) C                         Ye is too large for EOS
( 2065) C
( 2066)         WRITE(*,*) ' EOSLOG:: Cant do Ye = ',YE, 'at this time'
( 2067)         WRITE(*,*) ' EOSLOG:: assuming YE =',Y_HI,' instead'
( 2068)         YE = Y_HI-1.0D-6
( 2069)         GOTO 10
( 2070) C
( 2071)       ELSEIF(YE.GE.Y_LOW) THEN
( 2072) C                         Calculate high and low boundary densities
( 2073) C                         for the Maxwell construction
( 2074) C
( 2075) C----------------------------------------------------------
( 2076) C           Calc Ye index
( 2077) C----------------------------------------------------------
( 2078) C
( 2079)         YFRAC = (YE-Y_LOW)/(Y_HI-Y_LOW)
( 2080)         J_MXWL = INT(YFRAC*(NUMYE-1))+1
( 2081)         DELT_Y = (Y_HI-Y_LOW)/DBLE(NUMYE-1)
( 2082) C
( 2083)         YMINUS = Y_LOW+DBLE(J_MXWL-1)*DELT_Y
( 2084)         YPLUS = Y_LOW+DBLE(J_MXWL)*DELT_Y
( 2085) C
( 2086) C
( 2087)         IF((YE.GE.YMINUS).AND.(YE.LE.YPLUS)) THEN
( 2088)           J_BD = J_MXWL
( 2089)           J_BNDY = J_MXWL
( 2090)         ELSEIF(YE.GT.YPLUS) THEN
( 2091)           J_MXWL = J_MXWL+1






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 43

( 2092)           J_BD = J_MXWL
( 2093)           J_BNDY = J_MXWL
( 2094)           YMINUS = Y_LOW+DBLE(J_MXWL-1)*DELT_Y
( 2095)           YPLUS = Y_LOW+DBLE(J_MXWL)*DELT_Y
( 2096)         ELSE
( 2097)           J_MXWL = J_MXWL-1
( 2098)           J_BD = J_MXWL
( 2099)           J_BNDY = J_MXWL
( 2100)           YMINUS = Y_LOW+DBLE(J_MXWL-1)*DELT_Y
( 2101)           YPLUS = Y_LOW+DBLE(J_MXWL)*DELT_Y
( 2102)         ENDIF
( 2103) C
( 2104) C
( 2105)         IF(J_MXWL.GT.(NUMYE-1)) THEN
( 2106)           J_MXWL = NUMYE-1
( 2107)           J_BD = J_MXWL
( 2108)           J_BNDY = J_MXWL
( 2109)           YMINUS = Y_LOW+DBLE(J_MXWL-1)*DELT_Y
( 2110)           YPLUS = Y_LOW+DBLE(J_MXWL)*DELT_Y
( 2111)         ENDIF
( 2112) C
( 2113) C
( 2114)         YINTRP = (YE-YMINUS)/(YPLUS-YMINUS)
( 2115) C
( 2116) C----------------------------------------------------------
( 2117) C           Calc T index
( 2118) C----------------------------------------------------------
( 2119) C
( 2120) C
( 2121)         TFRAC = (T-T_LOW)/(T_HI-T_LOW)
( 2122)         I_MXWL = INT(TFRAC*(NUMTMP-1))+1
( 2123)         DELT_T = (T_HI-T_LOW)/DBLE(NUMTMP-1)
( 2124) C
( 2125)         TMINUS = T_LOW+DBLE(I_MXWL-1)*DELT_T
( 2126)         TPLUS = T_LOW+DBLE(I_MXWL)*DELT_T
( 2127) C
( 2128) C
( 2129)         IF((T.GT.TMINUS).AND.(T.LE.TPLUS)) THEN
( 2130)           TMINUS = T_LOW+DBLE(I_MXWL-1)*DELT_T
( 2131)           TPLUS = T_LOW+DBLE(I_MXWL)*DELT_T
( 2132)         ELSEIF(T.GT.TPLUS) THEN
( 2133)           I_MXWL = I_MXWL+1
( 2134)           TMINUS = T_LOW+DBLE(I_MXWL-1)*DELT_T
( 2135)           TPLUS = T_LOW+DBLE(I_MXWL)*DELT_T
( 2136)         ELSE
( 2137)           I_MXWL = I_MXWL-1
( 2138)           TMINUS = T_LOW+DBLE(I_MXWL-1)*DELT_T
( 2139)           TPLUS = T_LOW+DBLE(I_MXWL)*DELT_T
( 2140)         ENDIF
( 2141) C
( 2142) C
( 2143)         IF(I_MXWL.GT.(NUMTMP-1)) THEN
( 2144)           I_MXWL = NUMTMP-1
( 2145)           TMINUS = T_LOW+DBLE(I_MXWL-1)*DELT_T
( 2146)           TPLUS = T_LOW+DBLE(I_MXWL)*DELT_T
( 2147)         ENDIF
( 2148) 
( 2149)         IF ( I_MXWL == 0 ) THEN






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 44

( 2150)           WRITE (*,3001) I_MXWL, T_HI, T_LOW, T
( 2151)  3001     FORMAT (' i_MXWL=',i4,' T_HI=',es11.3,' T_LOW=',es11.3,
( 2152)      1     ' T=',es11.3)
( 2153)         ENDIF
( 2154) C
( 2155) C
( 2156)         TINTRP = (T-TMINUS)/(TPLUS-TMINUS)
( 2157) C
( 2158) C
( 2159) C
( 2160) C
( 2161) C                Find the temperature and density at the top of the
( 2162) C                Maxwel construction
( 2163) C
( 2164) CC      T_MXWL = YINTRP*(T_H(J_MXWL+1)-T_H(J_MXWL))+T_H(J_MXWL)
( 2165) CC      D_MXWL = YINTRP*(D_H(J_MXWL+1)-D_H(J_MXWL))+D_H(J_MXWL)
( 2166) 
( 2167)         IF ( J_MXWL == 0 ) THEN
( 2168)           WRITE (*,3002) J_MXWL, T_HI, T_LOW, T
( 2169)  3002     FORMAT (' J_MXWL=',i4,' T_HI=',es11.3,' T_LOW=',es11.3,
( 2170)      1     ' T=',es11.3)
( 2171)         ENDIF
( 2172) 
( 2173)         T_MXWL = DMIN1(T_H(J_MXWL+1),T_H(J_MXWL))
( 2174)         IF(T_H(J_MXWL+1).GT.T_H(J_MXWL)) THEN
( 2175)           D_MXWL = D_H(J_MXWL)
( 2176)         ELSE
( 2177)           D_MXWL = D_H(J_MXWL+1)
( 2178)         ENDIF
( 2179) C
( 2180) C
( 2181) C
( 2182) C--------------------------------------------------------------------
( 2183) C            Interpolate to get Maxwell construction densities
( 2184) C--------------------------------------------------------------------
( 2185) C
( 2186) C
( 2187) C
( 2188)         DNS_1 = YINTRP*(BRYLOW(I_MXWL,J_MXWL+1)-BRYLOW(I_MXWL,J_MXWL))+
( 2189)      1               BRYLOW(I_MXWL,J_MXWL)
( 2190)         DNS_2 = YINTRP*
( 2191)      1        (BRYLOW(I_MXWL+1,J_MXWL+1)-BRYLOW(I_MXWL+1,J_MXWL))+
( 2192)      2               BRYLOW(I_MXWL+1,J_MXWL)
( 2193) C
( 2194)         LOWDNS = TINTRP*(DNS_2-DNS_1)+DNS_1
( 2195) C
( 2196) C                Derivative of lower density w.r.t. T
( 2197)         DNL_DT = (DNS_2-DNS_1)/DELT_T
( 2198) C
( 2199)         DNDY1 = (BRYLOW(I_MXWL,J_MXWL+1)-BRYLOW(I_MXWL,J_MXWL))/DELT_Y
( 2200)         DNDY2 = (BRYLOW(I_MXWL+1,J_MXWL+1)-
( 2201)      1      BRYLOW(I_MXWL+1,J_MXWL))/DELT_Y
( 2202)         DNL_DY = TINTRP*(DNDY2-DNDY1)+DNDY1
( 2203) C
( 2204) C
( 2205) C
( 2206) C
( 2207)         IF(YE.GT.Y_CUT) THEN






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 45

( 2208) C
( 2209)           DNS_1 = YINTRP*
( 2210)      1        (BRYHI(I_MXWL,J_MXWL+1)-BRYHI(I_MXWL,J_MXWL))+
( 2211)      2        BRYHI(I_MXWL,J_MXWL)
( 2212)           DNS_2 = YINTRP*
( 2213)      1        (BRYHI(I_MXWL+1,J_MXWL+1)-BRYHI(I_MXWL+1,J_MXWL))+
( 2214)      2               BRYHI(I_MXWL+1,J_MXWL)
( 2215) C
( 2216)           HIDNS = TINTRP*(DNS_2-DNS_1)+DNS_1
( 2217) C
( 2218) C                Derivative of higher density w.r.t. T
( 2219)           DNH_DT = (DNS_2-DNS_1)/DELT_T
( 2220) C
( 2221) C
( 2222)         DNDY1 = (BRYHI(I_MXWL,J_MXWL+1)-
( 2223)      1      BRYHI(I_MXWL,J_MXWL))/DELT_Y
( 2224)         DNDY2 = (BRYHI(I_MXWL+1,J_MXWL+1)-
( 2225)      1      BRYHI(I_MXWL+1,J_MXWL))/DELT_Y
( 2226)         DNH_DY = TINTRP*(DNDY2-DNDY1)+DNDY1
( 2227) C
( 2228) C
( 2229)         ELSE
( 2230)           HIDNS = LOWDNS
( 2231)         ENDIF
( 2232) C
( 2233) C
( 2234) C--------------------------------------------------------------------
( 2235) C--------------------------------------------------------------------
( 2236) C
( 2237) C                       Ye is too low
( 2238)       ELSE
( 2239)         WRITE(*,*) ' EOSLOG:: Cant do Ye = ',YE, 'at this time'
( 2240)         WRITE(*,*) ' EOSLOG:: assuming YE =',Y_LOW,' instead'
( 2241)         WRITE(*,"(' rho, T, Ye=',3es11.3)") 
( 2242)      & 1.67d+15 * BRYDNS, T/8.62d-11,YE
( 2243)         YE = Y_LOW+1.0D-6
( 2244)         GOTO 10
( 2245)       ENDIF
( 2246) C
( 2247) C
( 2248) C
( 2249) C
( 2250) C
( 2251)       DLTLN1 = (LNCUT-LNLOW)/DBLE(NUMLOW-1)
( 2252)       DLTLN2 = (LNHI-LNCUT)/DBLE(NUMHI-1)
( 2253) C
( 2254) C
( 2255)       NLOW = 10.0**LNLOW
( 2256)       NHI = 10.0**LNHI
( 2257)       N_CUT = 10.0**LNCUT
( 2258)       LOGBRY = DLOG10(BRYDNS)
( 2259)       LOGBCH = LOGBRY
( 2260) C
( 2261) C
( 2262) C
( 2263) C
( 2264) C----------------------------------------------------------
( 2265) C           Calc T index






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 46

( 2266) C----------------------------------------------------------
( 2267) C
( 2268) C
( 2269)       IF(LOGBRY.GE.LNHI) THEN
( 2270)         I_BD = NBPNTS
( 2271)         I_BNDY = NBPNTS
( 2272)         T_BNDY = YINTRP*
( 2273)      1           (LBOUND(I_BNDY,J_BNDY+1)-LBOUND(I_BNDY,J_BNDY))+
( 2274)      2            LBOUND(I_BNDY,J_BNDY)
( 2275)         TCHK_B = 1.01*T_BNDY
( 2276)         TCHK_N = 0.95*T_BNDY
( 2277)         GOTO 70
( 2278)       ELSEIF((LOGBRY.LT.LNHI).AND.(LOGBRY.GT.LNCUT)) THEN
( 2279) C
( 2280)         I_BD = INT((LOGBRY-LNCUT)/DLTLN2)+NUMLOW
( 2281)         LNMINS = LNCUT+DBLE(I_BD-NUMLOW)*DLTLN2
( 2282)         LNPLUS = LNCUT+DBLE(I_BD-NUMLOW+1)*DLTLN2
( 2283)         IF((LOGBCH.LE.LNPLUS).AND.(LOGBCH.GE.LNMINS)) THEN
( 2284)           I_BNDY = I_BD
( 2285)         ELSEIF(LOGBCH.GT.LNPLUS) THEN
( 2286)           I_BD = I_BD+1
( 2287)           I_BNDY = I_BD
( 2288)           LNMINS = LNCUT+DBLE(I_BNDY-NUMLOW)*DLTLN2
( 2289)           LNPLUS = LNCUT+DBLE(I_BNDY-NUMLOW+1)*DLTLN2
( 2290)         ELSE
( 2291)           I_BD = I_BD-1
( 2292)           I_BNDY = I_BD
( 2293)           LNMINS = LNCUT+DBLE(I_BNDY-NUMLOW)*DLTLN2
( 2294)           LNPLUS = LNCUT+DBLE(I_BNDY-NUMLOW+1)*DLTLN2
( 2295)         ENDIF
( 2296) C
( 2297)       ELSEIF((LOGBRY.LE.LNCUT).AND.(LOGBRY.GT.LNLOW)) THEN
( 2298) C
( 2299)         I_BD = INT((LOGBRY-LNLOW)/DLTLN1)+1
( 2300)         LNMINS = LNLOW+DBLE(I_BD-1)*DLTLN1
( 2301)         LNPLUS = LNLOW+DBLE(I_BD)*DLTLN1
( 2302)         IF((LOGBCH.LE.LNPLUS).AND.(LOGBCH.GE.LNMINS)) THEN
( 2303)           I_BNDY = I_BD
( 2304)         ELSEIF(LOGBCH.GT.LNPLUS) THEN
( 2305)           I_BD = I_BD+1
( 2306)           I_BNDY = I_BD
( 2307)           LNMINS = LNLOW+DBLE(I_BNDY-1)*DLTLN1
( 2308)           LNPLUS = LNLOW+DBLE(I_BNDY)*DLTLN1
( 2309)         ELSE
( 2310)           I_BD = I_BD-1
( 2311)           I_BNDY = I_BD
( 2312)           LNMINS = LNLOW+DBLE(I_BNDY-1)*DLTLN1
( 2313)           LNPLUS = LNLOW+DBLE(I_BNDY)*DLTLN1
( 2314)         ENDIF
( 2315) C
( 2316)       ENDIF
( 2317) C
( 2318)       IF(I_BNDY.GT.(NBPNTS-1)) THEN
( 2319)         I_BD = NBPNTS-1
( 2320)         I_BNDY = I_BD
( 2321)         LNMINS = LNCUT+DBLE(I_BNDY-NUMLOW)*DLTLN2
( 2322)         LNPLUS = LNCUT+DBLE(I_BNDY-NUMLOW+1)*DLTLN2
( 2323)       ENDIF






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 47

( 2324) C
( 2325) C
( 2326) C
( 2327)       LMM = LBOUND(I_BNDY,J_BNDY)
( 2328)       LPM = LBOUND(I_BNDY+1,J_BNDY)
( 2329)       LMP = LBOUND(I_BNDY,J_BNDY+1)
( 2330)       LPP = LBOUND(I_BNDY+1,J_BNDY+1)
( 2331) C
( 2332)       LNFRAC = (LOGBCH-LNMINS)/(LNPLUS-LNMINS)
( 2333) C
( 2334) C                Interpolate in Ye first
( 2335) C
( 2336)       TEMP_1 = YINTRP*
( 2337)      1           (LBOUND(I_BNDY,J_BNDY+1)-LBOUND(I_BNDY,J_BNDY))+
( 2338)      2            LBOUND(I_BNDY,J_BNDY)
( 2339)       TEMP_2 = YINTRP*
( 2340)      1        (LBOUND(I_BNDY+1,J_BNDY+1)-LBOUND(I_BNDY+1,J_BNDY))+
( 2341)      2               LBOUND(I_BNDY+1,J_BNDY)
( 2342) C
( 2343) C                Interpolate in density between the two Ye
( 2344) C                interpolated values
( 2345) C
( 2346)       T_BNDY = LNFRAC*(TEMP_2-TEMP_1)+TEMP_1
( 2347) C
( 2348)       TCHK_B = 1.01*T_BNDY
( 2349)       TCHK_N = 0.95*T_BNDY
( 2350) C
( 2351)       IF((LMM.GE.LPM).OR.(LMP.GT.LPP)) THEN
( 2352)         TCHK_N = DMAX1(0.0D0,DMIN1(0.95*TCHK_N,T_BNDY-3.0))
( 2353)       ENDIF
( 2354) C
( 2355) C----------------------------------------------------------
( 2356) C----------------------------------------------------------
( 2357) C
( 2358)  70   CONTINUE
( 2359) C
( 2360) C-----------------------------------------------------------------------
( 2361) C               EOS Logic
( 2362) C-----------------------------------------------------------------------
( 2363) C23456789012345678901234567890123456789012345678901234567890123456789012
( 2364) C
( 2365) C                     If T is below the maximum for maxwel construction
( 2366)       IF(T.LT.T_MXWL) THEN
( 2367) C                       If rho is greater than the upper max. con.
( 2368) C                       density the use the bulk EOS
( 2369)         IF(BRYDNS.GT.HIDNS) THEN
( 2370)           EOSFLG = 3
( 2371) C                       Else if rho is greater than the lower max. con.
( 2372) C                       density then
( 2373)         ELSEIF(BRYDNS.GT.LOWDNS) THEN
( 2374) C                         If Ye is large enough to have a signifigant
( 2375) C                         max con then use the maxwell con. EOS
( 2376)           IF(YE.GT.Y_CUT) THEN
( 2377)             EOSFLG = 4
( 2378) C                         Otherwise use the bulk EOS
( 2379)           ELSE
( 2380)             EOSFLG = 3
( 2381)           ENDIF






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 48

( 2382) C
( 2383) C                       If density is greater than the minimum
( 2384) C                       Maxwell con. density, then we know that we are
( 2385) C                       in the Nuclear EOS density
( 2386)         ELSEIF(BRYDNS.GT.D_MXWL) THEN
( 2387)           EOSFLG = 2
( 2388) C
( 2389) C
( 2390) C                       Otherwise check the Boundary table
( 2391)         ELSE
( 2392) C
( 2393) C                         If T is well below the phase boundary curve
( 2394) C                         then use the nuclear EOS
( 2395)           IF(T.LT.TCHK_N) THEN
( 2396)             EOSFLG = 2
( 2397) C                         Otherwise if T is near the boundary, first
( 2398) C                         try the nuclear EOS and if not successfull
( 2399) C                         then use the bulk EOS
( 2400)           ELSEIF(T.LT.TCHK_B) THEN
( 2401)             EOSFLG = 1
( 2402)           ELSE
( 2403) C                         Otherwise T is well above the boundary so
( 2404) C                         use the bulk EOS
( 2405)             EOSFLG = 3
( 2406)           ENDIF
( 2407)         ENDIF
( 2408) C
( 2409) C                     Otherwise T is above the maximum for a maxwell
( 2410) C                     construction
( 2411)       ELSE
( 2412) C                       If density is greater than that at the top of
( 2413) C                       the maxwell construction then use the bulk EOS
( 2414)         IF(BRYDNS.GT.D_MXWL) THEN
( 2415)           EOSFLG = 3
( 2416) C
( 2417) C                       Otherwise density is below the maxwell con.
( 2418)         ELSE
( 2419) C
( 2420) C                         If T is well below the phase boundary curve
( 2421) C                         then use the nuclear EOS
( 2422)           IF(T.LT.TCHK_N) THEN
( 2423)             EOSFLG = 2
( 2424) C
( 2425) C                         Otherwise if T is near the phase boundary
( 2426) C                         curve then try the nuclear EOS and if not
( 2427) C                         successfull then use the bulk EOS
( 2428)           ELSEIF(T.LT.TCHK_B) THEN
( 2429)             EOSFLG = 1
( 2430) C
( 2431) C                         Otherwise T is well above the phase boundary
( 2432) C                         curve so use the bulk EOS
( 2433)           ELSE
( 2434)             EOSFLG = 3
( 2435)           ENDIF
( 2436)         ENDIF
( 2437)       ENDIF
( 2438) C
( 2439) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 49

( 2440) C-----------------------------------------------------------------------
( 2441) C                         Done with EOS logic so return EOSFLG
( 2442) C-----------------------------------------------------------------------
( 2443) C
( 2444) C
( 2445)   999 CONTINUE
( 2446) C
( 2447)       RETURN
( 2448) C
( 2449) C
( 2450)       END





















































PGF90 (Version     14.9)          03/12/2015  00:11:50      page 50

( 2451) 
( 2452) !///////////////////////////////////////////////////////////////////////
( 2453) 
( 2454) C23456789012345678901234567890123456789012345678901234567890123456789012
( 2455) C***********************************************************************
( 2456) C
( 2457) C    MODULE:       F_1_2
( 2458) C    TYPE:         DOUBLE PRECISION FUNCTION
( 2459) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 2460) C    DATE:         11/29/89
( 2461) C
( 2462) C    CALL LINE:    F_1_2(Y)      (1/2th Fermi Integral)
( 2463) C
( 2464) C    INPUTS:       Y (DOUBLE PRECISION)   (Argument)
( 2465) C
( 2466) C    RETURN:       1/2th Fermi Integral (DOUBLE PRECISION)
( 2467) C
( 2468) C***********************************************************************
( 2469)       DOUBLE PRECISION FUNCTION F_1_2(Y)
( 2470)       IMPLICIT REAL*8(A-H,O-Z)
( 2471)       parameter(n=201)
( 2472)       DIMENSION A(7),eta(n),f32(n),f32a(n),f12(n),fr(n),f12a(n),fra(n),
( 2473)      > fia(n)
( 2474)       common /spl/eta,f32,f12,fr,f32a,f12a,fra,fia
( 2475)       DATA A,th,klo,khi/6.16850274D0,1.77568655D0,6.92965606D0,
( 2476)      & .176776695D0
( 2477)      &,6.41500299D-02,.4D0,1.32934039D0,.33333333333d0,1,n/
( 2478)       IF(y .gt. 30.) goto 10
( 2479)       if(y .lt. -10.) goto 20
( 2480)       call splint(eta,f12,f12a,n,y,f1,klo,khi)
( 2481)       GO TO 100
( 2482)  10   X2=y**(-2)
( 2483)       F1=A(6)*y*SQRT(y)*th*(5+(A(1)+(3*A(2)+7*X2*A(3))*X2)*x2)
( 2484)       GO TO 100
( 2485)  20   F0=DEXP(y)
( 2486)       F1=A(7)*th*F0*(2-(4*A(4)-(6*A(5)-.25*F0)*F0)*F0)
( 2487)  100  F_1_2=F1
( 2488)  999  RETURN
( 2489)       END

























PGF90 (Version     14.9)          03/12/2015  00:11:50      page 51

( 2490) 
( 2491) !///////////////////////////////////////////////////////////////////////
( 2492) 
( 2493) C23456789012345678901234567890123456789012345678901234567890123456789012
( 2494) C***********************************************************************
( 2495) C
( 2496) C    MODULE:       F_3_2
( 2497) C    TYPE:         DOUBLE PRECISION FUNCTION
( 2498) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 2499) C    DATE:         11/29/89
( 2500) C
( 2501) C    CALL LINE:    F_3_2(Y)      (3/2th Fermi Integral)
( 2502) C
( 2503) C    INPUTS:       Y (DOUBLE PRECISION)   (Argument)
( 2504) C
( 2505) C    RETURN:       3/2th Fermi Integral (DOUBLE PRECISION)
( 2506) C
( 2507) C***********************************************************************
( 2508)       DOUBLE PRECISION FUNCTION F_3_2(y)
( 2509)       IMPLICIT REAL*8(A-H,O-Z)
( 2510)       parameter(n=201)
( 2511)       DIMENSION A(7),eta(n),f32(n),f32a(n),f12(n),fr(n),f12a(n),fra(n),
( 2512)      > fia(n)
( 2513)       common /spl/eta,f32,f12,fr,f32a,f12a,fra,fia
( 2514)       DATA A,klo,khi/6.16850274D0,1.77568655D0,6.92965606D0,.176776695D0
( 2515)      1,6.41500299D-02,.4D0,1.32934039D0,1,n/
( 2516)       IF(y .gt. 30.) goto 10
( 2517)       if(y .lt. -10.) goto 20
( 2518)       call splint(eta,f32,f32a,n,y,f1,klo,khi)
( 2519)       GO TO 100
( 2520)  10   X2=y**(-2)
( 2521)       F1=A(6)*SQRT(y)*(1./X2+A(1)-(A(2)+X2*A(3))*X2)
( 2522)       GO TO 100
( 2523)  20   F0=DEXP(y)
( 2524)       F1=A(7)*F0*(1.-(A(4)-(A(5)-.03125*F0)*F0)*F0)
( 2525)  100  F_3_2=F1
( 2526)  999  RETURN
( 2527)       END


























PGF90 (Version     14.9)          03/12/2015  00:11:50      page 52

( 2528) 
( 2529) !///////////////////////////////////////////////////////////////////////
( 2530) 
( 2531) C23456789012345678901234567890123456789012345678901234567890123456789012
( 2532) C***********************************************************************
( 2533) C
( 2534) C    MODULE:       FHALF
( 2535) C    TYPE:         DOUBLE PRECISION FUNCTION
( 2536) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 2537) C    DATE:         3/10/90
( 2538) C
( 2539) C    CALL LINE:    FHALF(Y)
( 2540) C
( 2541) C    INPUTS:       Y (DOUBLE PRECISION)   (Argument)
( 2542) C
( 2543) C    RETURN:       Ratio of 1/2th Fermi Integral to the -1/2th Fermi
( 2544) C                  Integral (DOUBLE PRECISION)
( 2545) C
( 2546) C***********************************************************************
( 2547)       DOUBLE PRECISION FUNCTION FHALF(y)
( 2548)       IMPLICIT real*8(a-h,o-z)
( 2549)       parameter(n=201)
( 2550)       DIMENSION A(7),f12(n),fia(n),eta(n),f32(n),fr(n),f32a(n),
( 2551)      > fra(n),f12a(n)
( 2552)       common /spl/eta,f32,f12,fr,f32a,f12a,fra,fia
( 2553)       DATA A,th,klo,khi/6.16850274D0,1.77568655D0,6.92965606D0,
( 2554)      &  .176776695D0
( 2555)      &,6.41500299D-02,.4D0,1.32934039D0,.3333333333333d0,1,n/
( 2556)       IF(y .gt. 30.) goto 10
( 2557)       if(y .lt. -10.) goto 20
( 2558)       call splint(eta,fr,fra,n,y,f1,klo,khi)
( 2559)       GO TO 100
( 2560)  10   X2=y**(-2)
( 2561)       F1=y*th*(1.+(.2*A(1)+(.6*A(2)+1.4*X2*A(3))*X2)*x2)
( 2562)      > /(1.-(.2*th*a(1)-(a(2)-4.2*x2*a(3))*x2)*x2)
( 2563)       GO TO 100
( 2564)  20   F0=EXP(y)
( 2565)       F1=(1.-(2*a(4)-(3*a(5)-.125*f0)*f0)*f0)/
( 2566)      > (2.-(8*a(4)-(18*a(5)-f0)*f0)*f0)
( 2567)  100  FHALF=F1
( 2568)  999  RETURN
( 2569)       END






















PGF90 (Version     14.9)          03/12/2015  00:11:50      page 53

( 2570) 
( 2571) !///////////////////////////////////////////////////////////////////////
( 2572) 
( 2573) C23456789012345678901234567890123456789012345678901234567890123456789012
( 2574) C***********************************************************************
( 2575) C
( 2576) C    MODULE:       FINV12
( 2577) C    TYPE:         DOUBLE PRECISION FUNCTION
( 2578) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 2579) C    DATE:         11/29/89
( 2580) C
( 2581) C    CALL LINE:    FINV12(Y)      (Inverse of the 1/2th Fermi Integral)
( 2582) C
( 2583) C    INPUTS:       Y (DOUBLE PRECISION)   (Argument)
( 2584) C
( 2585) C    RETURN:       Inverse of Fermi Integral (DOUBLE PRECISION)
( 2586) C
( 2587) C***********************************************************************
( 2588)       DOUBLE PRECISION FUNCTION FINV12(y)
( 2589)       IMPLICIT REAL*8(A-H,O-Z)
( 2590)       parameter(n=201)
( 2591)       DIMENSION AI(8),f12(n),fia(n),eta(n),f32(n),fr(n),f32a(n),
( 2592)      > fra(n),f12a(n)
( 2593)       common /spl/eta,f32,f12,fr,f32a,f12a,fra,fia
( 2594)       DATA AI,klo,khi/-.822467032D0,-1.21761363D0,-9.16138616D0,
( 2595)      1.398942281D0,.0732748216D0,-1.310707D0,1.12837917D0,
( 2596)      28.2810645D-3,1,n/
( 2597)       if(y .gt. 109.695) goto 10
( 2598)       if(y .lt. 4.0234e-5) goto 20
( 2599)       call splint(f12,eta,fia,n,y,f1,klo,khi)
( 2600)       GO TO 100
( 2601)  10   X2=(1.5*y)**(.666666667)
( 2602)       X4=1./(X2*X2)
( 2603)       F1=X2*(1.+(AI(1)+(AI(2)+AI(3)*X4)*X4)*X4)
( 2604)       GO TO 100
( 2605)  20   F1=LOG(AI(7)*MAX(y,1.D-20)*(1.+(AI(4)+(AI(5)+AI(8)*y)*y)*y))
( 2606)  100  finv12=F1
( 2607)  999  RETURN
( 2608)       END

























PGF90 (Version     14.9)          03/12/2015  00:11:50      page 54

( 2609) 
( 2610) !///////////////////////////////////////////////////////////////////////
( 2611) 
( 2612) C23456789012345678901234567890123456789012345678901234567890123456789012
( 2613) C***********************************************************************
( 2614) C
( 2615) C    MODULE:       GETFNM.FOR
( 2616) C    TYPE:         SUBROUTINE
( 2617) C    AUTHOR:       F. DOUGLAS SWESTY
( 2618) C    DATE:         8/5/89
( 2619) C
( 2620) C    PURPOSE:      OBTAINS A FILE NAME FROM USER
( 2621) C
( 2622) C    CALL LINE:    CALL GETFNM(FNAME,FNML,PROMPT,PROMTL)
( 2623) C
( 2624) C    INPUTS:       PROMPT = STRING TO POMPT USER WITH (C*60)
( 2625) C                  PROMTL = LENGTH OF PROMPT STRING (I)
( 2626) C
( 2627) C    OUTPUTS:      FNAME = FILE NAME (C*60)
( 2628) C                  FNML = FILE NAME LENGTH (I)
( 2629) C***********************************************************************
( 2630) C
( 2631)       SUBROUTINE GETFNM(FNAME,FNML,PROMPT,PROMTL)
( 2632) C
( 2633)       IMPLICIT NONE
( 2634) C
( 2635)       INTEGER FNML, PROMTL
( 2636)       CHARACTER*60 FNAME, PROMPT
( 2637) C
( 2638) C                       Local variables
( 2639) C
( 2640)       INTEGER STDOUT, STDIN, I
( 2641)       DATA STDOUT/6/, STDIN/5/
( 2642) C
( 2643) C                       Prompt user for file name
( 2644) C
( 2645)       WRITE(STDOUT,'(T2,A,$)') PROMPT(1:PROMTL)
( 2646)       READ(STDIN,'(A)') FNAME
( 2647) C
( 2648) C                        Figure out input file name length
( 2649)       DO 10 I=1,20,1
( 2650)         IF(FNAME(I:I).EQ.' ') GOTO 20
( 2651)  10   CONTINUE
( 2652) C
( 2653)  20   CONTINUE
( 2654)       FNML = I-1
( 2655) C
( 2656) C
( 2657)  999  RETURN
( 2658)       END














PGF90 (Version     14.9)          03/12/2015  00:11:50      page 55

( 2659) 
( 2660) !///////////////////////////////////////////////////////////////////////
( 2661) 
( 2662) C23456789012345678901234567890123456789012345678901234567890123456789012
( 2663) C***********************************************************************
( 2664) C
( 2665) C    FILE:         INVEOS
( 2666) C    MODULE:       INVEOS
( 2667) C    TYPE:         SUBROUTINE
( 2668) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 2669) C
( 2670) C    DATE:         5/23/90
( 2671) C                  Bug fixed on (5/24/90) (affected only performance
( 2672) C                  of code NOT the results!)
( 2673) C
( 2674) C
( 2675) C    CALL LINE:    CALL INVEOS(INPVAR,T_OLD,YE,BRYDNS,IFLAG,EOSFLG,XPREV
( 2676) C
( 2677) C    INPUTS:       INPVAR = TEMP, INTERNAL ENG, OR ENTROPY
( 2678) C                  T_OLD = INITIAL GUESS AT THE TEMPERATURE
( 2679) C                  YE = ELECTRON FRACTION
( 2680) C                  BRYDNS = BARYON NUMBER DENSITY
( 2681) C                  IFLAG = 1 --> INPVAR IS TEMPERATURE
( 2682) C                          2 --> INPVAR IS INTERNAL ENERGY
( 2683) C                          3 --> INPVAR IS ENTROPY (NOT IMPLEM)
( 2684) C
( 2685) C    OUTPUTS       EOSFLG = 1 --> "NO NUCLEI" EOS
( 2686) C                           2 --> GENERAL EOS
( 2687) C                           3 --> BULK EOS FOR DENSITIES ABOVE NUCLEAR
( 2688) C                  XPREV = UNUSED
( 2689) C                  P_PREV = PREVIOUS VALUE OF PROTON DENSITY
( 2690) C
( 2691) C
( 2692) C
( 2693) C
( 2694) C    INCLUDE FILES:  EOS_M4C.INC
( 2695) C
( 2696) C
( 2697) C***********************************************************************
( 2698) C23456789012345678901234567890123456789012345678901234567890123456789012
( 2699) C
( 2700)       SUBROUTINE INVEOS(INPVAR,T_OLD,YE,BRYDNS,IFLAG,EOSFLG,
( 2701)      1                  FORFLG,SF,XPREV,P_PREV)
( 2702) C
( 2703) C
( 2704) C
( 2705)  
( 2706) C
( 2707)       USE eos_m4c_module
( 2708) C
( 2709)       IMPLICIT NONE
( 2710) C
( 2711) C                         Local variables
( 2712) C
( 2713)       DOUBLE PRECISION INP_V, INP_VO, INP_VN, UFTN, DUFTN, DT
( 2714)       DOUBLE PRECISION T_OLD, T_NEW, T_TEMP, T_LB, T_UB, PERDIF
( 2715)       INTEGER LOOP, SF, NEW_F
( 2716) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 56

( 2717)       INTEGER IFLAG,EOSFLG,FORFLG
( 2718)       DOUBLE PRECISION INPVAR(4),YE,BRYDNS,XPREV,P_PREV
( 2719) C
( 2720) C
( 2721)       RSFLAG = 1
( 2722) C                         Input is the temperature; call the EOS
( 2723) C                         normally and then return
( 2724)       IF(IFLAG.EQ.1) THEN
( 2725)         CALL EOS_M4C(INPVAR,YE,BRYDNS,1,EOSFLG,FORFLG,SF,
( 2726)      1 XPREV,P_PREV)
( 2727)        T_OLD = INPVAR(1)
( 2728)         RETURN
( 2729)       ENDIF
( 2730) C
( 2731) C
( 2732) C                         The input variable must be the internal
( 2733) C                         energy so calc the internal energy for
( 2734) C                         the initial guess at the temperature
( 2735)         INP_V = INPVAR(1)
( 2736) C
( 2737)         T_LB = 0.05
( 2738)         T_UB = 50.0
( 2739) C
( 2740)         INPVAR(1) = T_OLD
( 2741)         CALL EOS_M4C(INPVAR,YE,BRYDNS,1,EOSFLG,FORFLG,SF,
( 2742)      1 XPREV,P_PREV)
( 2743) CCC      CALL EOS_M1D(T_OLD,YE,BRYDNS,1,EOSFLG,XPREV,P_PREV)
( 2744) C
( 2745) C                         Save the value of the internal energy
( 2746)       IF(IFLAG.EQ.2) THEN
( 2747)         INP_VO = UTOT
( 2748)       ELSEIF(IFLAG.EQ.3) THEN
( 2749)         INP_VO = STOT
( 2750)       ENDIF
( 2751) C
( 2752) C
( 2753) C                         Tweak the initial guess slightly so as to
( 2754) C                         get a new value of the internal energy
( 2755) C
( 2756)       T_NEW = 1.1*T_OLD
( 2757) C
( 2758)       NEW_F = 1
( 2759) C
( 2760)       DO 20 LOOP=1,50,1
( 2761) C
( 2762)         INPVAR(1) = T_NEW
( 2763)         CALL EOS_M4C(INPVAR,YE,BRYDNS,1,EOSFLG,FORFLG,SF,
( 2764)      1 XPREV,P_PREV)
( 2765) CCC        CALL EOS_M1D(T_NEW,YE,BRYDNS,1,EOSFLG,XPREV,P_PREV)
( 2766) C
( 2767) C
( 2768)         IF(SF.NE.1.AND.NEW_F.EQ.1) THEN
( 2769) cc          WRITE(*,*) 'INVEOS: EOS fatally failed at try:'
( 2770) cc          WRITE(*,*) T_NEW,BRYDNS,YE
( 2771)           T_NEW = T_NEW-0.25
( 2772)           T_LB = DMIN1(T_LB,T_NEW-1.0D-1)
( 2773)           GOTO 20
( 2774)         ELSEIF(SF.NE.1) THEN






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 57

( 2775)            DT = 0.5*DT
( 2776)            T_NEW = T_NEW+DT
( 2777)         ELSE
( 2778) C
( 2779)           NEW_F = 0
( 2780) C
( 2781) C                         Save this value of the internal energy too
( 2782)           IF(IFLAG.EQ.2) THEN
( 2783)             INP_VN = UTOT
( 2784)           ELSEIF(IFLAG.EQ.3) THEN
( 2785)             INP_VN = STOT
( 2786)           ENDIF
( 2787) C
( 2788)           IF(INP_VN.LT.INP_V) THEN
( 2789)             T_LB = T_NEW
( 2790) c            write(*,*) 'l @ ',t_new,inp_vn,inp_v
( 2791)           ELSEIF(INP_VN.GT.INP_V) THEN
( 2792) c            write(*,*) 'u @ ',t_new,inp_vn,inp_v
( 2793)             T_UB = T_NEW
( 2794)           ENDIF
( 2795)         ENDIF
( 2796) C
( 2797)         UFTN = INP_VN-INP_V
( 2798) C
( 2799)         IF(LOOP.LT.20) THEN
( 2800) C                         This is the function to be zeroed by the
( 2801) C                         Newton-Raphson iteration
( 2802) C
( 2803) C                         Numerical derivative of the above function
( 2804) C                         w.r.t. the temperature
( 2805) CC          DUFTN = ((INP_VN-INP_VO)/(T_NEW-T_OLD))+1.0D-15
( 2806) C
( 2807) C                         Analytic derivatives
( 2808)           IF(IFLAG.EQ.2) THEN
( 2809)             DUFTN = DUDT
( 2810)           ELSEIF(IFLAG.EQ.3) THEN
( 2811)             DUFTN = DSDT
( 2812)           ENDIF
( 2813) C
( 2814) C                         Estimated correction to temperature
( 2815)           DT = UFTN/DUFTN
( 2816) C
( 2817) C
( 2818)  10       CONTINUE
( 2819) C                         Temporarily store the new temperature
( 2820)           T_TEMP = T_NEW-DT
( 2821) C
( 2822) C                         Is the new temp within a valid range?
( 2823)           IF((T_TEMP.GT.T_LB).AND.(T_TEMP.LT.T_UB)) THEN
( 2824)             T_OLD = T_NEW
( 2825)             INP_VO = INP_VN
( 2826)             T_NEW = T_TEMP
( 2827)           ELSE
( 2828) C                         If not cut the step size in half & try again
( 2829)             DT = 0.5*DT
( 2830)             IF(T_TEMP.EQ.T_NEW) THEN
( 2831)               T_OLD = T_NEW
( 2832)               T_NEW = 0.5*(T_LB+T_UB)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 58

( 2833)               DT = T_NEW-T_OLD
( 2834)             ELSE
( 2835)               GOTO 10
( 2836)             ENDIF
( 2837)           ENDIF
( 2838) C
( 2839)         ELSE
( 2840) C
( 2841)           T_OLD = T_NEW
( 2842)           T_NEW = 0.5*(T_LB+T_UB)
( 2843)           DT = T_NEW-T_OLD
( 2844) C
( 2845)         ENDIF
( 2846) C
( 2847) C                         If relative change in T is less than 1.0e-5
( 2848) C                         then quit out of loop
( 2849)         IF(ABS(DT/T_NEW).LT.1.0D-5) GOTO 30
( 2850) C
( 2851) C                End of the Do loop
( 2852)  20   CONTINUE
( 2853) C
( 2854) C                Didn't meet convergence criterion
( 2855)       SF = 0
( 2856)       WRITE(*,*) ' INVERSION OF EOS FAILED TO CONVERGE',DT,T_NEW
( 2857) C
( 2858) C                Met the convergence criterion!!!
( 2859)  30   CONTINUE
( 2860) C
( 2861) c                This stuff is commented out for speed reasons; it
( 2862) c                virtually never gets tripped anyway
( 2863) cc      INPVAR(1) = T_OLD
( 2864) cc      CALL EOS_M4C(INPVAR,YE,BRYDNS,1,EOSFLG,FORFLG,SF,XPREV,P_PREV)
( 2865) cc      IF(IFLAG.EQ.2) THEN
( 2866) cc        PERDIF = INP_V-UTOT
( 2867) cc      ELSE
( 2868) cc        PERDIF = INP_V-STOT
( 2869) cc      ENDIF
( 2870) cc      IF(ABS(PERDIF).GT.1.0D-4) THEN
( 2871) cc        WRITE(*,*) 'INVEOS: FAILURE',INP_V,STOT
( 2872) cc        write(*,*) uftn,dt,loop
( 2873) cc        WRITE(*,*) 'TRY:',T_NEW,BRYDNS,YE
( 2874) cc        SF = 0
( 2875) cc        RETURN
( 2876) cc      ENDIF
( 2877) C
( 2878) C                Return this value for T
( 2879)       INPVAR(1) = INP_V
( 2880)       T_OLD = T_NEW
( 2881) C
( 2882) C                Time to call it quits!
( 2883)   999 CONTINUE
( 2884) C
( 2885)       RETURN
( 2886) C
( 2887)       END









PGF90 (Version     14.9)          03/12/2015  00:11:50      page 59

( 2888) C
( 2889) C
( 2890) 
( 2891) !///////////////////////////////////////////////////////////////////////
( 2892) 
( 2893) c----------------------------------------------------------------------c
( 2894) c                                                                      c
( 2895) c    File:         lubksb                                              c
( 2896) c    Module:       lubksb                                              c
( 2897) c    Type:         Subprogram                                          c
( 2898) c    Author:       S. W. Bruenn, Dept of Physics, FAU,                 c
( 2899) c                  Boca Raton, FL 33431-0991                           c
( 2900) c                                                                      c
( 2901) c    Date:         8/22/00                                             c
( 2902) c                                                                      c
( 2903) c    Purpose:                                                          c
( 2904) c      Solves the set of of n linear equations ax = b. Here a is       c
( 2905) c       input, not as the matrix a but rather as its LU decomposition, c
( 2906) c       determined by subroutine ludcmp. indx is input as the          c
( 2907) c       permutation vector returned by ludcmp. b is input as the       c
( 2908) c       right-hand side vector, and returns with the solution vector   c
( 2909) c       x. a, n, np, and indx are not modified by this rotine and      c
( 2910) c       can be left in place for successive calls with different       c
( 2911) c       right-hand sides b. This routine takes into account the        c
( 2912) c       possibility that b will begin with many zero elements, so it   c
( 2913) c       is efficient for use in matrix inversion.                      c
( 2914) c                                                                      c
( 2915) c    Subprograms called:                                               c
( 2916) c      none                                                            c
( 2917) c                                                                      c
( 2918) c    Input arguments:                                                  c
( 2919) c   a         : nxn LU decomposed matrix of coefficients               c
( 2920) c   n         : dimension of a                                         c
( 2921) c   np        : physical dimension of a                                c
( 2922) c   indx      : record of row permutation                              c
( 2923) c   b         : constant vector                                        c
( 2924) c                                                                      c
( 2925) c    Output arguments:                                                 c
( 2926) c   b         : solution vector                                        c
( 2927) c                                                                      c
( 2928) c    Variables that must be passed through common:                     c
( 2929) c      none                                                            c
( 2930) c                                                                      c
( 2931) c    Include files:                                                    c
( 2932) c      none                                                            c
( 2933) c                                                                      c
( 2934) c----------------------------------------------------------------------c
( 2935)       subroutine lubksb(a,n,np,indx,b)
( 2936) c                                                                      c
( 2937) c                                                                      c
( 2938)       implicit none
( 2939)       save
( 2940) c                                                                      c
( 2941) c        Local variables (not in common blocks)                        c
( 2942)       integer i,ii,indx,j,ll,n,np
( 2943)       double precision a,b,sum,zero
( 2944) c                                                                      c
( 2945) c                                                                      c






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 60

( 2946)       dimension a(np,np),indx(n),b(n)
( 2947) c                                                                      c
( 2948) c                                                                      c
( 2949)       data zero /0.0d+00/
( 2950) c----------------------------------------------------------------------c
( 2951) c        When ii is set to a positive value, it will become the index  c
( 2952) c         of the first nonvanishing element of b. We now do the        c
( 2953) c         forward substitution. The only new wrinkle is to unscramble  c
( 2954) c         the permutation as we go.                                    c
( 2955) c----------------------------------------------------------------------c
( 2956)       ii                = 0
( 2957)       do 1000 i = 1,n
( 2958)        ll               = indx(i)
( 2959)        sum              = b(ll)
( 2960)        b(ll)            = b(i)
( 2961)        if ( ii .ne. 0 ) then
( 2962)         do 100 j = ii,i-1
( 2963)          sum            = sum - a(i,j) * b(j)
( 2964)   100   continue
( 2965)        else if ( sum .ne. zero ) then
( 2966)         ii              = i
( 2967)        end if ! ii ne 0
( 2968)        b(i)             = sum
( 2969)  1000 continue
( 2970) c----------------------------------------------------------------------c
( 2971) c        Now we do the back substitution.                              c
( 2972) c----------------------------------------------------------------------c
( 2973)       do 2000 i = n,1,-1
( 2974)        sum              = b(i)
( 2975)        if ( i .lt. n ) then
( 2976)        do 200 j = i+1,n
( 2977)         sum             = sum - a(i,j) * b(j)
( 2978)   200  continue
( 2979)        end if
( 2980)        b(i)             = sum/a(i,i)
( 2981)  2000 continue
( 2982) c                                                                      c
( 2983) c                                                                      c
( 2984)       return
( 2985)       end
























PGF90 (Version     14.9)          03/12/2015  00:11:50      page 61

( 2986)       
( 2987) !///////////////////////////////////////////////////////////////////////
( 2988) 
( 2989) c----------------------------------------------------------------------c
( 2990) c                                                                      c
( 2991) c    File:         ludcmp                                              c
( 2992) c    Module:       ludcmp                                              c
( 2993) c    Type:         Subprogram                                          c
( 2994) c    Author:       S. W. Bruenn, Dept of Physics, FAU,                 c
( 2995) c                  Boca Raton, FL 33431-0991                           c
( 2996) c                                                                      c
( 2997) c    Date:         8/21/00                                             c
( 2998) c                                                                      c
( 2999) c    Purpose:                                                          c
( 3000) c      Given an nxn matrix a, with physical dimension np, this         c
( 3001) c       replaces it by the LU decomposition of a rowwise permutation   c
( 3002) c       of itself. A is output arranged as                             c
( 3003) c                                                                      c
( 3004) c              b11  b12  b13  b14                                      c
( 3005) c              a21  b22  b23  b24                                      c
( 3006) c              a31  a32  b33  b34                                      c
( 3007) c              a41  a42  a43  b44                                      c
( 3008) c                                                                      c
( 3009) c       indx is an output vector which records the row permutation     c
( 3010) c       effected by the partial pivoting; d is output + or - 1         c
( 3011) c       depending on whether the number of row interchanges was        c
( 3012) c       even or odd, respectively. This routine is used in combina-    c
( 3013) c       tion with lubksb to solve linear equations or invert a         c
( 3014) c       matrix.                                                        c
( 3015) c                                                                      c
( 3016) c    Subprograms called:                                               c
( 3017) c      none                                                            c
( 3018) c                                                                      c
( 3019) c    Input arguments:                                                  c
( 3020) c   a         : nxn matrix                                             c
( 3021) c   n         : dimension of a                                         c
( 3022) c   np        : physical dimension of a                                c
( 3023) c                                                                      c
( 3024) c    Output arguments:                                                 c
( 3025) c   a         : LU decomposition of a                                  c
( 3026) c   indx      : record of row permutation                              c
( 3027) c   d         : odd or even permutation number index                   c
( 3028) c                                                                      c
( 3029) c    Variables that must be passed through common:                     c
( 3030) c      none                                                            c
( 3031) c                                                                      c
( 3032) c    Include files:                                                    c
( 3033) c      none                                                            c
( 3034) c                                                                      c
( 3035) c----------------------------------------------------------------------c
( 3036)       subroutine ludcmp(a,n,np,indx,d)
( 3037) 
( 3038) c                                                                      c
( 3039) c                                                                      c
( 3040)       implicit none
( 3041)       save
( 3042) c                                                                      c
( 3043) c        Local variables (not in common blocks)                        c






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 62

( 3044)       CHARACTER*128 c_diagnostic
( 3045)       integer i,imax,indx,j,j1,j2,k,n,np,nmax
( 3046)       double precision a,aamax,d,dum,one,sum,tiny,vv,zero
( 3047) c                                                                      c
( 3048) c                                                                      c
( 3049)       parameter (nmax = 100,tiny = 1.d-20)
( 3050) c                                                                      c
( 3051) c                                                                      c
( 3052)       dimension a(np,np),indx(n),vv(nmax)
( 3053) c                                                                      c
( 3054) c                                                                      c
( 3055)       data zero /0.0d+00/
( 3056)       data one  /1.0d+00/
( 3057) 
( 3058)  1001 FORMAT (81(1pe11.3))
( 3059) 
( 3060) c----------------------------------------------------------------------c
( 3061) c        Loop over rows to get the implicit scaling information.       c
( 3062) c----------------------------------------------------------------------c
( 3063)       d             = one
( 3064)       do 1000 i = 1,n
( 3065)        aamax        = zero
( 3066)        do 100 j = 1,n
( 3067)         if ( dabs(a(i,j)) .gt. aamax ) aamax = dabs(a(i,j))
( 3068)   100  continue
( 3069)        IF ( aamax .eq. zero ) THEN
( 3070)          WRITE (6,*) 'Singular matrix.'
( 3071)          DO j1 = 1,n
( 3072)            WRITE (6,1001) (a(j1,j2),j2 = 1,n)
( 3073)          END DO
( 3074)          STOP
( 3075)        END IF
( 3076)        vv(i)        = one/aamax
( 3077)  1000 continue
( 3078) c----------------------------------------------------------------------c
( 3079) c        Loop over columns of Crout's method.                          c
( 3080) c----------------------------------------------------------------------c
( 3081)       do 2000 j = 1,n
( 3082)        if ( j .gt. 1 ) then
( 3083)         do 200 i = 1,j-1
( 3084)          sum        = a(i,j)
( 3085)          if ( i .gt. 1 ) then
( 3086)           do 20 k = 1,i-1
( 3087)            sum      = sum - a(i,k) * a(k,j)
( 3088)    20     continue
( 3089)           a(i,j)    = sum
( 3090)          end if ! i > 1
( 3091)   200   continue
( 3092)        end if ! j > 1
( 3093) c----------------------------------------------------------------------c
( 3094) c        Initialize the search for the largest pivot.                  c
( 3095) c----------------------------------------------------------------------c
( 3096)        aamax        = zero
( 3097)        do 210 i = j,n
( 3098)         sum         = a(i,j)
( 3099)         if ( j .gt. 1 ) then
( 3100)          do 21 k = 1,j-1
( 3101)           sum       = sum - a(i,k) * a(k,j)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 63

( 3102)    21    continue
( 3103)          a(i,j)     = sum
( 3104)         end if ! j > 1
( 3105)         dum         = vv(i) * dabs(sum)
( 3106)         if ( dum .ge. aamax ) then
( 3107)          imax       = i
( 3108)          aamax      = dum
( 3109)         end if ! dum ge aamax
( 3110)   210  continue
( 3111) c----------------------------------------------------------------------c
( 3112) c        Do we need to interchange rows?                               c
( 3113) c----------------------------------------------------------------------c
( 3114)        if ( j .ne. imax ) then
( 3115)         do 220 k = 1,n
( 3116)          dum        = a(imax,k)
( 3117)          a(imax,k)  = a(j,k)
( 3118)          a(j,k)     = dum
( 3119)   220   continue
( 3120)         d           = -d
( 3121)         vv(imax)    = vv(j)
( 3122)        end if ! j ne imax
( 3123)        indx(j)      = imax
( 3124) c----------------------------------------------------------------------c
( 3125) c        If the pivot element is zero the matrix is singular (at       c
( 3126) c         least to the precision of the algorithm). For some applica-  c
( 3127) c         tions on singular matrices, it is desirable to substitute    c
( 3128) c         tiny for zero.                                               c
( 3129) c----------------------------------------------------------------------c
( 3130)        if ( a(j,j) .eq. zero ) a(j,j) = tiny
( 3131) c----------------------------------------------------------------------c
( 3132) c        Now, finally, divide by the pivot element.                    c
( 3133) c----------------------------------------------------------------------c
( 3134)        if ( j .ne. n ) then
( 3135)         dum         = one/a(j,j)
( 3136)         do 230 i = j+1,n
( 3137)          a(i,j)     = a(i,j) * dum
( 3138)   230   continue
( 3139)        end if ! j ne n
( 3140) c----------------------------------------------------------------------c
( 3141) c        Go back for the next column in the reduction.                 c
( 3142) c----------------------------------------------------------------------c
( 3143)  2000 continue
( 3144) c                                                                      c
( 3145) c                                                                      c
( 3146)       return
( 3147)       end


















PGF90 (Version     14.9)          03/12/2015  00:11:50      page 64

( 3148) 
( 3149) !///////////////////////////////////////////////////////////////////////
( 3150) 
( 3151) C***********************************************************************
( 3152) C
( 3153) C    MODULE:       MATADD
( 3154) C    TYPE:         SUBROUTINE
( 3155) C    AUTHOR:       F. DOUGLAS SWESTY
( 3156) C    DATE:         4/3/90
( 3157) C
( 3158) C    PURPOSE:      Adds two N by M Matrices
( 3159) C
( 3160) C    CALL LINE:    CALL MATINV(A,B,C,N,M)
( 3161) C
( 3162) C    INPUTS:       A,B= Arrays to be added  (D)
( 3163) C                  N = Number of rows in arrays (I)
( 3164) C                  M = Number of columns in arrays (I)
( 3165) C
( 3166) C    OUTPUTS:      C = Array containing A+B (D)
( 3167) C
( 3168) C    CALLS :       None
( 3169) C***********************************************************************
( 3170) C23456789012345678901234567890123456789012345678901234567890123456789012
( 3171)       SUBROUTINE MATADD(A,B,C,N,M)
( 3172) C
( 3173)       IMPLICIT NONE
( 3174) C
( 3175)       INTEGER N,M
( 3176)       DOUBLE PRECISION A(N,M), B(N,M), C(N,M)
( 3177) C
( 3178) C
( 3179) C                 Local variables
( 3180) C
( 3181)       INTEGER I, J
( 3182) C
( 3183)       DO 20 J=1,M,1
( 3184)         DO 10 I=1,N,1
( 3185)           C(I,J) = A(I,J)+B(I,J)
( 3186)  10     CONTINUE
( 3187)  20   CONTINUE
( 3188) C
( 3189)  999  RETURN
( 3190) C
( 3191)       END




















PGF90 (Version     14.9)          03/12/2015  00:11:50      page 65

( 3192) 
( 3193) !///////////////////////////////////////////////////////////////////////
( 3194) 
( 3195) C
( 3196) C***********************************************************************
( 3197) C
( 3198) C    MODULE:       MATCOP
( 3199) C    TYPE:         SUBROUTINE
( 3200) C    AUTHOR:       F. DOUGLAS SWESTY
( 3201) C    DATE:         4/3/90
( 3202) C
( 3203) C    PURPOSE:      Copy one N by M Matrix into another
( 3204) C
( 3205) C    CALL LINE:    CALL MATCOP(A,B,N,M)
( 3206) C
( 3207) C    INPUTS:       A = Array to be copied  (D)
( 3208) C                  N = Number of rows in arrays (I)
( 3209) C                  M = Number of columns in arrays (I)
( 3210) C
( 3211) C    OUTPUTS:      C = Array to be copied into (D)
( 3212) C
( 3213) C    CALLS :       None
( 3214) C***********************************************************************
( 3215) C23456789012345678901234567890123456789012345678901234567890123456789012
( 3216)       SUBROUTINE MATCOP(A,B,N,M)
( 3217) C
( 3218)       IMPLICIT NONE
( 3219) C
( 3220)       INTEGER N,M
( 3221)       DOUBLE PRECISION A(N,M), B(N,M)
( 3222) C
( 3223) C
( 3224) C                 Local variables
( 3225) C
( 3226)       INTEGER I, J
( 3227) C
( 3228)       DO 20 J=1,M,1
( 3229)         DO 10 I=1,N,1
( 3230)           B(I,J) = A(I,J)
( 3231)  10     CONTINUE
( 3232)  20   CONTINUE
( 3233) C
( 3234)  999  RETURN
( 3235) C
( 3236)       END



















PGF90 (Version     14.9)          03/12/2015  00:11:50      page 66

( 3237) 
( 3238) !///////////////////////////////////////////////////////////////////////
( 3239) 
( 3240) C23456789012345678901234567890123456789012345678901234567890123456789012
( 3241) C***********************************************************************
( 3242) C
( 3243) C    FILE:         DMATRIX.FOR
( 3244) C
( 3245) C***********************************************************************
( 3246) C
( 3247) C    MODULE:       MATINV
( 3248) C    TYPE:         SUBROUTINE
( 3249) C    AUTHOR:       F. DOUGLAS SWESTY
( 3250) C    DATE:         4/3/90
( 3251) C
( 3252) C    PURPOSE:      Inverts a N by N Matrix
( 3253) C
( 3254) C    CALL LINE:    CALL MATINV(A,AINV,N)
( 3255) C
( 3256) C    INPUTS:       A = Array to be inverted  (D)
( 3257) C                  N = dimesion of arrays (I)
( 3258) C
( 3259) C    OUTPUTS:      AINV = Inverse of A (D)
( 3260) C
( 3261) C    CALLS :       Numerical recipes routines LUDCMP, LUBKSB
( 3262) C***********************************************************************
( 3263) C23456789012345678901234567890123456789012345678901234567890123456789012
( 3264)       SUBROUTINE MATINV(A,AINV,N)
( 3265) C
( 3266)       IMPLICIT NONE
( 3267) C
( 3268)       INTEGER N
( 3269)       DOUBLE PRECISION A(N,N), AINV(N,N)
( 3270) C
( 3271) C
( 3272) C                 Local variables
( 3273) C
( 3274)       INTEGER NPHYS, I, J
( 3275)       PARAMETER(NPHYS=10)
( 3276)       DOUBLE PRECISION TEMP(NPHYS,NPHYS), Y(NPHYS,NPHYS), D
( 3277)       INTEGER INDEX(NPHYS)
( 3278) C
( 3279) C                 Make a copy of the array, and initialize
( 3280) C                 the indentity matrix
( 3281)       DO 20 J=1,N,1
( 3282)         DO 10 I=1,N,1
( 3283)           Y(I,J) = 0.0
( 3284)           TEMP(I,J) = A(I,J)
( 3285)  10     CONTINUE
( 3286)         Y(J,J) = 1.0
( 3287)  20   CONTINUE
( 3288) C
( 3289) C
( 3290) C                 LU decompose the matrix
( 3291)       CALL LUDCMP(TEMP,N,NPHYS,INDEX,D)
( 3292) C
( 3293) C
( 3294) C                 Back substitute to get inverse






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 67

( 3295)       DO 30 J=1,N,1
( 3296)         CALL LUBKSB(TEMP,N,NPHYS,INDEX,Y(1,J))
( 3297)  30   CONTINUE
( 3298) C
( 3299) C
( 3300) C                 Copy temporary array into the inverse array
( 3301)       DO 50 J=1,N,1
( 3302)         DO 40 I=1,N,1
( 3303)           AINV(I,J) = Y(I,J)
( 3304)  40     CONTINUE
( 3305)  50   CONTINUE
( 3306) C
( 3307) C
( 3308)  999  RETURN
( 3309)       END

















































PGF90 (Version     14.9)          03/12/2015  00:11:50      page 68

( 3310) 
( 3311) !///////////////////////////////////////////////////////////////////////
( 3312) 
( 3313) C
( 3314) C***********************************************************************
( 3315) C
( 3316) C    MODULE:       MATMUL
( 3317) C    TYPE:         SUBROUTINE
( 3318) C    AUTHOR:       F. DOUGLAS SWESTY
( 3319) C    DATE:         4/3/90
( 3320) C
( 3321) C    PURPOSE:      Multiplies two Matrices (LxM)x(MxN)
( 3322) C
( 3323) C    CALL LINE:    CALL MATMUL(A,B,C,L,M,N)
( 3324) C
( 3325) C    INPUTS:       A,B= Arrays to be added  (D)
( 3326) C                  L,M,N = Dimensions of arrays (I)
( 3327) C
( 3328) C    OUTPUTS:      C = Array containing A x B (D)
( 3329) C
( 3330) C    CALLS :       None
( 3331) C***********************************************************************
( 3332) C23456789012345678901234567890123456789012345678901234567890123456789012
( 3333)       SUBROUTINE MATMUL(A,B,C,L,M,N)
( 3334) C
( 3335)       IMPLICIT NONE
( 3336) C
( 3337)       INTEGER L, M, N
( 3338)       DOUBLE PRECISION A(L,M), B(M,N), C(L,N)
( 3339) C
( 3340) C
( 3341) C                 Local variables
( 3342) C
( 3343)       INTEGER I, J, K
( 3344)       DOUBLE PRECISION SUM
( 3345) C
( 3346) C                 Loop over all elements of the array
( 3347)       DO 30 I=1,L,1
( 3348)         DO 20 J=1,N,1
( 3349) C
( 3350) C                 Initialize SUM for a new element
( 3351)           SUM = 0.0
( 3352) C                 Calculate (i,j)th element
( 3353)           DO 10 K=1,M,1
( 3354)             SUM = SUM+A(I,K)*B(K,J)
( 3355)  10       CONTINUE
( 3356)           C(I,J) = SUM
( 3357) C
( 3358)  20     CONTINUE
( 3359)  30   CONTINUE
( 3360) C
( 3361)  999  RETURN
( 3362) C
( 3363)       END










PGF90 (Version     14.9)          03/12/2015  00:11:50      page 69

( 3364) 
( 3365) !///////////////////////////////////////////////////////////////////////
( 3366) 
( 3367) C
( 3368) C***********************************************************************
( 3369) C
( 3370) C    MODULE:       MATSCL
( 3371) C    TYPE:         SUBROUTINE
( 3372) C    AUTHOR:       F. DOUGLAS SWESTY
( 3373) C    DATE:         4/3/90
( 3374) C
( 3375) C    PURPOSE:      Multiply a N by M Matrix by a scalar
( 3376) C
( 3377) C    CALL LINE:    CALL MATSCL(A,SCALAR,B,N,M)
( 3378) C
( 3379) C    INPUTS:       A = Array to be scaled  (D)
( 3380) C                  SCALAR = Constant to multiply matrix by (D)
( 3381) C                  N = Number of rows in arrays (I)
( 3382) C                  M = Number of columns in arrays (I)
( 3383) C
( 3384) C    OUTPUTS:      B = Array containing SCALAR x A (D)
( 3385) C
( 3386) C    CALLS :       None
( 3387) C***********************************************************************
( 3388) C23456789012345678901234567890123456789012345678901234567890123456789012
( 3389)       SUBROUTINE MATSCL(A,SCALAR,B,N,M)
( 3390) C
( 3391)       IMPLICIT NONE
( 3392) C
( 3393)       INTEGER N, M
( 3394)       DOUBLE PRECISION A(N,M), B(N,M), SCALAR
( 3395) C
( 3396) C
( 3397) C                 Local variables
( 3398) C
( 3399)       INTEGER I, J
( 3400) C
( 3401) C                 Loop over all elements of the array
( 3402)       DO 20 J=1,M,1
( 3403)         DO 10 I=1,N,1
( 3404) C
( 3405)           B(I,J) = SCALAR*A(I,J)
( 3406) C
( 3407)  10     CONTINUE
( 3408)  20   CONTINUE
( 3409) C
( 3410)  999  RETURN
( 3411) C
( 3412)       END















PGF90 (Version     14.9)          03/12/2015  00:11:50      page 70

( 3413) 
( 3414) !///////////////////////////////////////////////////////////////////////
( 3415) 
( 3416) C23456789012345678901234567890123456789012345678901234567890123456789012
( 3417) C***********************************************************************
( 3418) C
( 3419) C    FILE:         MAXWEL.FOR
( 3420) C
( 3421) C***********************************************************************
( 3422) C
( 3423) C    MODULE:       MAXWEL
( 3424) C    TYPE:         SUBROUTINE
( 3425) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 3426) C
( 3427) C    DATE:         7/13/90
( 3428) C
( 3429) C                  Please report any problems to me at:
( 3430) C                  BITNET:  SWESTY@SUNYSBNP or
( 3431) C                  INTERNET: FSWESTY@ASTRO.SUNYSB.EDU
( 3432) C
( 3433) C
( 3434) C    CALL LINE:    CALL MAXWEL(INPVAR,YE,BRYDNS)
( 3435) C
( 3436) C    INPUTS:       INPVAR = TEMP, INTERNAL ENG, OR ENTROPY
( 3437) C                  YE = ELECTRON FRACTION
( 3438) C                  BRYDNS = BARYON NUMBER DENSITY
( 3439) C
( 3440) C    OUTPUTS:
( 3441) C
( 3442) C
( 3443) C
( 3444) C
( 3445) C    INCLUDE FILES:  EOS_M4C.INC
( 3446) C
( 3447) C
( 3448) C***********************************************************************
( 3449) C23456789012345678901234567890123456789012345678901234567890123456789012
( 3450) C
( 3451)       SUBROUTINE MAXWEL(INPVAR,YE,BRYDNS,XPREV,P_PREV,SSFLAG)
( 3452) C
( 3453) C
( 3454)       USE el_eos_module
( 3455)       USE eos_m4c_module
( 3456)       USE maxwel_module
( 3457) C
( 3458)       IMPLICIT NONE
( 3459) C
( 3460)       DOUBLE PRECISION OUTVAR(4)
( 3461)       DOUBLE PRECISION DPN_DT, DPN_DN, DPN_DY
( 3462)       DOUBLE PRECISION DSN_DT, DSN_DN, DSN_DY
( 3463)       DOUBLE PRECISION DSB_DT, DSB_DN, DSB_DY
( 3464)       DOUBLE PRECISION DMU_DT, DMU_DN, DMU_DY
( 3465)       DOUBLE PRECISION DPHADT, DPHADY, DELDNS
( 3466)       DOUBLE PRECISION N_XH, N_XA, N_XN, N_XP, B_XA, B_XN, B_XP
( 3467) C
( 3468)       INTEGER SSFLAG
( 3469)       DOUBLE PRECISION INPVAR(4),YE,BRYDNS,XPREV,P_PREV,BRYDNS_T,T
( 3470) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 71

( 3471) C
( 3472) C                   Set the temperature
( 3473)       T = INPVAR(1)
( 3474) C
( 3475) C
( 3476) C                   Calculate and save chem. pot. and thermodynamic
( 3477) C                   quantaties from low end of two phase region
( 3478)       BRYDNS_T = BRYDNS
( 3479)       CALL NUCEOS(INPVAR,YE,LOWDNS,XPREV,P_PREV,SSFLAG)
( 3480)       BRYDNS   = BRYDNS_T 
( 3481) C
( 3482) C
( 3483) C
( 3484) C                    If the nuclear EOS failed and the reset flag is set
( 3485) C                    then reset the initial guesses and try again
( 3486)       IF((SSFLAG.NE.1).AND.(RSFLAG.EQ.1)) THEN
( 3487)         BRYDNS_T = BRYDNS
( 3488)         CALL RESET(INPVAR,YE,LOWDNS,OUTVAR)
( 3489)         BRYDNS   = BRYDNS_T 
( 3490)         OUTVAR(1) = INPVAR(1)
( 3491)         BRYDNS_T = BRYDNS
( 3492)         CALL NUCEOS(OUTVAR,YE,LOWDNS,XPREV,P_PREV,SSFLAG)
( 3493)         BRYDNS   = BRYDNS_T 
( 3494) C
( 3495) C
( 3496) C                    Make a last ditch effort at convergence
( 3497)         IF(SSFLAG.NE.1) THEN
( 3498)           OUTVAR(2) = 0.155
( 3499)           OUTVAR(3) = -15.0
( 3500)           OUTVAR(4) = -20.0
( 3501)           BRYDNS_T = BRYDNS
( 3502)           CALL NUCEOS(OUTVAR,YE,LOWDNS,XPREV,P_PREV,SSFLAG)
( 3503)           BRYDNS   = BRYDNS_T 
( 3504)         ELSE
( 3505)           INPVAR(2) = OUTVAR(2)
( 3506)           INPVAR(3) = OUTVAR(3)
( 3507)           INPVAR(4) = OUTVAR(4)
( 3508)         ENDIF
( 3509) C
( 3510)       ENDIF
( 3511) C
( 3512) C
( 3513) C
( 3514) C
( 3515)       PRLOW = PTOT-PPRESS
( 3516)       S_LOW = STOT-PS
( 3517)       F_LOW = FTOT-PF
( 3518)       MUTLOW = (1.0-YE)*MUN+YE*(MUPROT+MUSUBE)
( 3519)       MUELOW = MUSUBE
( 3520)       MUHLOW = MUHAT
( 3521) C
( 3522)       DPN_DT = DPDT
( 3523)       DPN_DN = DPDN
( 3524)       DPN_DY = DPDY
( 3525) C
( 3526)       DMU_DT = DMUDT
( 3527)       DMU_DN = DMUDN
( 3528)       DMU_DY = DMUDY






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 72

( 3529) C
( 3530)       DSN_DT = DSDT-DPSDT
( 3531)       DSN_DN = DSDN
( 3532)       DSN_DY = DSDY
( 3533) C
( 3534)       N_XH = XH
( 3535)       N_XA = XALFA
( 3536)       N_XP = XPROT
( 3537)       N_XN = XNUT
( 3538) C
( 3539) C
( 3540)       IF(SSFLAG.NE.1) THEN
( 3541)         WRITE(*,*) 'MAXWEL:  Nuclear EOS failed at try:'
( 3542)         WRITE(*,*) T,LOWDNS,YE
( 3543)         WRITE(*,*) INPVAR
( 3544)         GOTO 999
( 3545)       ENDIF
( 3546) C                   Calculate and save chem. pot. and thermodynamic
( 3547) C                   quantaties from high end of two phase region
( 3548)       BRYDNS_T = BRYDNS
( 3549)       CALL ALFEOS(INPVAR,YE,HIDNS,P_PREV,SSFLAG)
( 3550)       BRYDNS   = BRYDNS_T 
( 3551) C
( 3552)       PRHI = PTOT-PPRESS
( 3553)       S_HI = STOT-PS
( 3554)       F_HI = FTOT-PF
( 3555)       MUTHI = (1.0-YE)*MUN+YE*(MUPROT+MUSUBE)
( 3556)       MUEHI = MUSUBE
( 3557)       MUHHI = MUHAT
( 3558) C
( 3559) C
( 3560)       DSB_DT = DSDT-DPSDT
( 3561)       DSB_DN = DSDN
( 3562)       DSB_DY = DSDY
( 3563) C
( 3564) C
( 3565)       B_XA = XALFA
( 3566)       B_XP = XPROT
( 3567)       B_XN = XNUT
( 3568) C
( 3569) C
( 3570)       IF(SSFLAG.NE.1) THEN
( 3571)         WRITE(*,*) 'MAXWEL:  Alfa EOS failed at try:'
( 3572)         WRITE(*,*) T,HIDNS,YE
( 3573)         WRITE(*,*) INPVAR
( 3574)         GOTO 999
( 3575)       ENDIF
( 3576) C
( 3577) C                   Calculate "average" chem. pot. and pressure
( 3578) C                   in order to avoid numerical problems
( 3579)       MUTILD = (MUTLOW+MUTHI)/2.0
( 3580)       PRTILD = (PRLOW+PRHI)/2.0
( 3581) C
( 3582) C                   Calculate phase fraction
( 3583)       PHASEF = (BRYDNS-LOWDNS)/(HIDNS-LOWDNS)
( 3584) C
( 3585) C
( 3586) C                   Electron number density






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 73

( 3587)       NSUBE = BRYDNS*YE
( 3588) C
( 3589) C                   Call electron EOS to determine the
( 3590) C                   electron chemical potential
( 3591)       CALL EL_EOS(T,YE,BRYDNS)
( 3592) C
( 3593) C
( 3594)       MUHAT = MUSUBE+(1.0-PHASEF)*(MUHLOW-MUELOW)+PHASEF*(MUHHI-MUEHI)
( 3595) C
( 3596)       MUN = MUTILD+YE*(MUHAT-MUSUBE)
( 3597) C
( 3598)       MUPROT = MUN-MUHAT
( 3599) C
( 3600) C                   Calculate thermodynamic quantities
( 3601) C
( 3602)       STOT = ((1.0-PHASEF)*S_LOW*LOWDNS+PHASEF*S_HI*HIDNS)/BRYDNS+PS
( 3603) C
( 3604)       FTOT = (LOWDNS*F_LOW+MUTILD*(BRYDNS-LOWDNS))/BRYDNS+PF
( 3605) C
( 3606)       UTOT = FTOT+T*STOT+PU
( 3607) C
( 3608)       PTOT = PRTILD+PPRESS
( 3609) C
( 3610) C
( 3611)       XH = (1.0-PHASEF)*N_XH
( 3612)       XALFA = (1.0-PHASEF)*N_XA
( 3613)       XNUT = (1.0-PHASEF)*N_XN
( 3614)       XPROT = (1.0-PHASEF)*N_XP
( 3615)       XALFA2 = PHASEF*B_XA
( 3616)       XNUT2 = PHASEF*B_XN
( 3617)       XPROT2 = PHASEF*B_XP
( 3618) C
( 3619) C
( 3620) C
( 3621) C
( 3622)       DELDNS = HIDNS-LOWDNS
( 3623) C
( 3624) C
( 3625)       DPHADT = ((BRYDNS-LOWDNS)/DELDNS**2-1.0/DELDNS)*DNL_DT-
( 3626)      1    ((BRYDNS-LOWDNS)/DELDNS**2)*DNH_DT
( 3627) C
( 3628)       DPDT = DPN_DT+DPN_DN*DNL_DT
( 3629)       DMUDT = DMU_DT+DMU_DN*DNL_DT
( 3630)       DSDT = (1.0-PHASEF)*LOWDNS*(DSN_DT+DSN_DN*DNL_DT)/BRYDNS+
( 3631)      2 (1.0-PHASEF)*S_LOW*DNL_DT/BRYDNS-LOWDNS*S_LOW*DPHADT/BRYDNS+
( 3632)      3    (DPHADT*S_HI*HIDNS+PHASEF*DNH_DT*S_HI+
( 3633)      4    PHASEF*HIDNS*(DSB_DT+DSB_DN*DNH_DT))/BRYDNS+DPSDT
( 3634)       DUDT = DMUDT-DPDT/BRYDNS+STOT+T*DSDT
( 3635) C
( 3636) C
( 3637)       DPDN = 0.0
( 3638)       DMUDN = 0.0
( 3639)       DSDN = -DPDT/BRYDNS**2
( 3640)       DUDN = (LOWDNS*(MUTILD-FTOT)/BRYDNS**2)+T*DSDN
( 3641) C
( 3642) C
( 3643)       DPHADY = ((BRYDNS-LOWDNS)/DELDNS**2-1.0/DELDNS)*DNL_DY-
( 3644)      1    ((BRYDNS-LOWDNS)/DELDNS**2)*DNH_DY






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 74

( 3645) C
( 3646)       DPDY = DPN_DY+DPN_DN*DNL_DY
( 3647)       DMUDY = DMU_DY+DMU_DN*DNL_DY
( 3648)       DSDY = (1.0-PHASEF)*LOWDNS*(DSN_DY+DSN_DN*DNL_DY)/BRYDNS+
( 3649)      2 (1.0-PHASEF)*S_LOW*DNL_DY/BRYDNS-LOWDNS*S_LOW*DPHADY/BRYDNS+
( 3650)      3    (DPHADY*S_HI*HIDNS+PHASEF*DNH_DY*S_HI+
( 3651)      4    PHASEF*HIDNS*(DSB_DY+DSB_DN*DNH_DY))/BRYDNS
( 3652)       DUDY = DMUDY-DPDY/BRYDNS+T*DSDY
( 3653) C
( 3654) C
( 3655) C
( 3656) C
( 3657) C             Adiabatic index
( 3658) C             (Note that the first term vanishes in this expression)
( 3659)       GAM_S = T*(DPDT**2)/(BRYDNS*PTOT*DUDT)
( 3660) C
( 3661)   999 CONTINUE
( 3662) C
( 3663) C
( 3664)       RETURN
( 3665) C
( 3666) C
( 3667)       END









































PGF90 (Version     14.9)          03/12/2015  00:11:50      page 75

( 3668) 
( 3669) !///////////////////////////////////////////////////////////////////////
( 3670) 
( 3671) C***********************************************************************
( 3672) C
( 3673) C    MODULE:       MV_MUL
( 3674) C    TYPE:         SUBROUTINE
( 3675) C    AUTHOR:       F. DOUGLAS SWESTY
( 3676) C    DATE:         4/3/90
( 3677) C
( 3678) C    PURPOSE:      Multiplies a Matrix times a vector (NxN)x(N)
( 3679) C
( 3680) C    CALL LINE:    CALL MV_MUL(A,V,RV,N)
( 3681) C
( 3682) C    INPUTS:       A = Array to be multiplied  (D)
( 3683) C                  V = Vector to be multiplied (D)
( 3684) C                  N = Dimensions of arrays & vector (I)
( 3685) C
( 3686) C    OUTPUTS:      RV = resultant vector (D)
( 3687) C
( 3688) C    CALLS :       None
( 3689) C***********************************************************************
( 3690) C23456789012345678901234567890123456789012345678901234567890123456789012
( 3691)       SUBROUTINE MV_MUL(A,V,RV,N)
( 3692) C
( 3693)       IMPLICIT NONE
( 3694) C
( 3695)       INTEGER N
( 3696)       DOUBLE PRECISION A(N,N), V(N), RV(N)
( 3697) C
( 3698) C
( 3699) C                 Local variables
( 3700) C
( 3701)       INTEGER I, J
( 3702)       DOUBLE PRECISION SUM
( 3703) C
( 3704) C                 Loop over all elements of the array
( 3705)       DO 20 I=1,N,1
( 3706) C
( 3707) C                 Initialize SUM for a new element
( 3708)         SUM = 0.0
( 3709) C                 Calculate (i)th element
( 3710)         DO 10 J=1,N,1
( 3711)           SUM = SUM+A(I,J)*V(J)
( 3712)  10     CONTINUE
( 3713)         RV(I) = SUM
( 3714) C
( 3715)  20   CONTINUE
( 3716) C
( 3717)  999  RETURN
( 3718) C
( 3719)       END












PGF90 (Version     14.9)          03/12/2015  00:11:50      page 76

( 3720) 
( 3721) !///////////////////////////////////////////////////////////////////////
( 3722) 
( 3723) Cnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnu
( 3724) C23456789012345678901234567890123456789012345678901234567890123456789012
( 3725) C***********************************************************************
( 3726) C
( 3727) C    FILE:         NUCEOS.FOR
( 3728) C
( 3729) C***********************************************************************
( 3730) C
( 3731) C    MODULE:       NUCEOS
( 3732) C    TYPE:         SUBROUTINE
( 3733) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 3734) C
( 3735) C    DATE:         7/13/90 Modified from model 1-d
( 3736) C
( 3737) C                  BITNET:  SWESTY@SUNYSBNP or
( 3738) C                  INTERNET: FSWESTY@ASTRO.SUNYSB.EDU or
( 3739) C                            fswesty@sbast3.sunysb.edu
( 3740) C
( 3741) C    CALL LINE:    CALL NUCEOS(INPVAR,YE,BRYDNS,X_PREV,SSFLAG)
( 3742) C
( 3743) C    INPUTS:       INPVAR = TEMP, INTERNAL ENG, OR ENTROPY
( 3744) C                  YE = ELECTRON FRACTION
( 3745) C                  BRYDNS = BARYON NUMBER DENSITY
( 3746) C
( 3747) C    OUTPUTS:      XPREV = PREVIOUS VALUE OF X (MUST BE SUPPLIED ON
( 3748) C                  FIRST CALL)
( 3749) C                  SSFLAG = SUCCESS FLAG 0 --> FAILURE
( 3750) C                                        1 --> SUCCESS
( 3751) C
( 3752) C
( 3753) C
( 3754) C    INCLUDE FILES:  EOS_M4C.INC
( 3755) C
( 3756) C
( 3757) C***********************************************************************
( 3758) C23456789012345678901234567890123456789012345678901234567890123456789012
( 3759) C
( 3760)       SUBROUTINE NUCEOS(INPVAR,YE,BRYDNS,XPREV,P_PREV,SSFLAG)
( 3761) C
( 3762) C
( 3763)       USE el_eos_module
( 3764)       USE eos_m4c_module
( 3765) C
( 3766)       IMPLICIT NONE
( 3767) C
( 3768) C
( 3769) C                       Function type declarations
( 3770) C
( 3771)       DOUBLE PRECISION F_1_2, F_3_2, FINV12, FHALFI, FHALFO
( 3772)       double precision fhalf
( 3773) C
( 3774)       DOUBLE PRECISION ZNG, ZPG
( 3775)       INTEGER TCFLAG, ftflag
( 3776) C
( 3777)       INTEGER KKI,LLI






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 77

( 3778)       DOUBLE PRECISION RESULT(5), R_CHECK(5)
( 3779)       double precision a_tmp(5,5)
( 3780)       DOUBLE PRECISION NI_MIN
( 3781) C
( 3782)       integer cflag, schflg
( 3783)       double precision dtst1, dtst2
( 3784)       double precision break, dnsi, dtmp8
( 3785)       double precision dtmp1,dtmp2,dtmp3,dtmp4,dtmp5,dtmp6,dtmp7
( 3786) C
( 3787)       INTEGER SSFLAG
( 3788)       DOUBLE PRECISION INPVAR(4),YE,BRYDNS,XPREV,P_PREV,T
( 3789) cc      double precision tbsph, tbph, tbnh, tbspl, tbpl, tbnl
( 3790) cc      double precision dbspdx, dbpdx, dbndx, dbspdu, dbpdu, dbndu
( 3791) cc      double precision tsgl, tsgh, thl, thh, dsgdx, dhfdx, ds2dx,dzdx
( 3792) cc      double precision dpt1dx, dpt2dx
( 3793) c
( 3794)       INCLUDE 'force.inc'
( 3795) C
( 3796) C                         Set the scheme flag to zero
../../../External/LS/force.inc
(    1)*C23456789012345678901234567890123456789012345678901234567890123456789012
(    2)*C***********************************************************************
(    3)*C
(    4)*C    MODULE:       FORCE.INC
(    5)*C    TYPE:         INCLUDE FILE
(    6)*C    AUTHOR:       F. DOUGLAS SWESTY
(    7)*C    DATE:         2/29/92
(    8)*C
(    9)*C    PURPOSE:      This include file contains the statement function
(   10)*C                  definitions for the nuclear force expressions.  To
(   11)*C                  change the nucleon-nucleon interaction only this file
(   12)*C                  need be changed.  NOTE:  We have assumed that the
(   13)*C                  interaction is only density dependent, and that the
(   14)*C                  INTERACTION HAS NO EXPLICIT TEMPERATURE DEPENDENCE!
(   15)*C                  To introduce a temperature dependent interaction will
(   16)*C                  require modification of the temperature derivatives
(   17)*C                  in the routines NUCEOS & ALFEOS.
(   18)*C
(   19)*C
(   20)*C    CALL LINE:    INCLUDE 'FORCE.INC/LIST'
(   21)*C
(   22)*C23456789012345678901234567890123456789012345678901234567890123456789012
(   23)*C***********************************************************************
(   24)*C
(   25)*C                          Nucleon-Nucleon interaction parameters
(   26)*      DOUBLE PRECISION AA, BB, CC, DD, DD3, SCRDD3
(   27)*C
(   28)*C                          Compression modulus, symmetry energy,
(   29)*C                          binding energy, & saturation density
(   30)*      DOUBLE PRECISION COMP, SYMM, BIND_E, NSUBS
(   31)*C
(   32)*C                          Surface symmetry energy & surface tension
(   33)*      DOUBLE PRECISION SYM_S, SIG_S
(   34)*C
(   35)*C                          Numerical coefficient (called alpha in
(   36)*C                          the Nucl. Phys. A, vol. 535, pg. 331 paper)
(   37)*      DOUBLE PRECISION SKYRMC
(   38)*C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 78

(   39)*C
(   40)*C                   This common block contains the variables that
(   41)*C                   specify the particular interaction used
(   42)*      COMMON /SKYRME/ AA, BB, CC, DD, DD3, SCRDD3,
(   43)*     1                COMP, SYMM, SKYRMC, BIND_E,
(   44)*     2                NSUBS, SYM_S, SIG_S
(   45)*C
(   46)*      DOUBLE PRECISION PV_E, DPVEDN, DPVEDX
(   47)*      DOUBLE PRECISION PV_PR, DPVRDP, DPVRDN
(   48)*      DOUBLE PRECISION PVP, DPVPDP, DPVPDN, DVP_DX, DVP_DI
(   49)*      DOUBLE PRECISION PVN, DPVNDP, DPVNDN, DVN_DX, DVN_DI
(   50)*      DOUBLE PRECISION DENOM, VETERM, VTERM1, VTERM2
(   51)*      DOUBLE PRECISION PROT_D, NUT_D, DENSIT, NNN, XXX
(   52)*C
(   53)*C
(   54)*C23456789012345678901234567890123456789012345678901234567890123456789012
(   55)*C-----------------------------------------------------------------------
(   56)*C                 These terms enter in many of the equations
(   57)*C-----------------------------------------------------------------------
(   58)*C
(   59)*      DENOM(DENSIT)=1.0+DD3*(DENSIT**(DD-1.0D+00))
(   60)*C
(   61)*      VETERM(DENSIT)= (CC*(1.0+DD)*(DENSIT**DD)+
(   62)*     1     2.0D+00*CC*DD3*(DENSIT**(2.0D+00*DD-1.0D+00)))/
(   63)*     2     (DENOM(DENSIT)**2)
(   64)*C
(   65)*C-----------------------------------------------------------------------
(   66)*C                        Internal energy stuff
(   67)*C-----------------------------------------------------------------------
(   68)*C
(   69)*C                 Internal energy (IE) due to interaction
(   70)*      PV_E(PROT_D,NUT_D)=AA*((PROT_D+NUT_D)**2)+
(   71)*     1     4.0D+00*BB*PROT_D*NUT_D+( CC*((PROT_D+NUT_D)**(1.0D+00+DD))/
(   72)*     2     DENOM(PROT_D+NUT_D) )+PROT_D*DELTAM
(   73)*C
(   74)*C                 Derivative of IE w.r.t. density at fixed X
(   75)*      DPVEDN(NNN,XXX)=2.0D+00*NNN*
(   76)*     1    (AA+4.0D+00*BB*XXX*(1.0D+00-XXX))+VETERM(NNN)+XXX*DELTAM
(   77)*C
(   78)*C                 Derivative of IE w.r.t. X at fixed density
(   79)*      DPVEDX(NNN,XXX)=4.0D+00*BB*(1.0D+00-2.0D+00*XXX)*(NNN**2)+
(   80)*     1    NNN*DELTAM
(   81)*C
(   82)*C-----------------------------------------------------------------------
(   83)*C                        Interaction potential stuff
(   84)*C-----------------------------------------------------------------------
(   85)*C
(   86)*C                 Proton & neutron interaction potentials
(   87)*      PVP(PROT_D,NUT_D)=2.0D+00*AA*(PROT_D+NUT_D)+
(   88)*     1     4.0D+00*BB*NUT_D+VETERM(PROT_D+NUT_D)+DELTAM
(   89)*C
(   90)*      PVN(PROT_D,NUT_D)=2.0D+00*AA*(PROT_D+NUT_D)+
(   91)*     1     4.0D+00*BB*PROT_D+VETERM(PROT_D+NUT_D)
(   92)*C
(   93)*C                 These terms enter in all of the equations
(   94)*      VTERM1(DENSIT)=CC*(
(   95)*     1    DD*(1.0D+00+DD)*(DENSIT**(DD-1.0D+00))+
(   96)*     2    2.0D+00*DD3*(2.0D+00*DD-1.0D0)*(DENSIT**(2.0D0*DD-2.0D0))






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 79

(   97)*     3    )/(DENOM(DENSIT)**2)
(   98)*      VTERM2(DENSIT)=-2.0D+00*CC*DD3*(
(   99)*     1    (DD**2-1.0D+00)*(DENSIT**(2.0D+00*DD-2.0D+00))+
(  100)*     2    2.0D+00*DD3*(DD-1.0D+00)*(DENSIT**(3.0D+00*DD-3.0D+00))
(  101)*     3    )/(DENOM(DENSIT)**3)
(  102)*C
(  103)*C                 Derivative of proton potential w.r.t.
(  104)*C                 proton density at fixed neutron density
(  105)*      DPVPDP(PROT_D,NUT_D)=2.0D+00*AA+
(  106)*     1    VTERM1(PROT_D+NUT_D)+VTERM2(PROT_D+NUT_D)
(  107)*C
(  108)*C                 Derivative of proton potential w.r.t.
(  109)*C                 neutron density at fixed proton density
(  110)*      DPVPDN(PROT_D,NUT_D)=2.0D+00*AA+4.0D+00*BB+
(  111)*     1    VTERM1(PROT_D+NUT_D)+VTERM2(PROT_D+NUT_D)
(  112)*C
(  113)*C                 Derivative of proton potential w.r.t.
(  114)*C                 X at fixed density
(  115)*cc      DVP_DX(NNN,XXX)=-4.0D+00*BB*NNN
(  116)*C
(  117)*C                 Derivative of proton potential w.r.t.
(  118)*C                 density at fixed X
(  119)*cc      DVP_DI(NNN,XXX)=2.0D+00*AA+4.0D+00*BB*(1.0D+00-XXX)+
(  120)*cc     1    VTERM1(NNN)+VTERM2(NNN)
(  121)*C
(  122)*C                 Derivative of neutron potential w.r.t.
(  123)*C                 neutron density at fixed proton density
(  124)*      DPVNDN(PROT_D,NUT_D)=2.0D+00*AA+
(  125)*     1    VTERM1(PROT_D+NUT_D)+VTERM2(PROT_D+NUT_D)
(  126)*C
(  127)*C                 Derivative of neutron potential w.r.t.
(  128)*C                 proton density at fixed neutron density
(  129)*      DPVNDP(PROT_D,NUT_D)=2.0D+00*AA+4.0D+00*BB+
(  130)*     1    VTERM1(PROT_D+NUT_D)+VTERM2(PROT_D+NUT_D)
(  131)*C
(  132)*C                 Derivative of neutron potential w.r.t.
(  133)*C                 X at fixed density
(  134)*cc      DVN_DX(NNN,XXX)=4.0D+00*BB*NNN
(  135)*C
(  136)*C                 Derivative of neutron potential w.r.t.
(  137)*C                 density at fixed X
(  138)*cc      DVN_DI(NNN,XXX)=2.0D+00*AA+4.0D+00*BB*XXX+
(  139)*cc     1    VTERM1(NNN)+VTERM2(NNN)
(  140)*C
(  141)*C-----------------------------------------------------------------------
(  142)*C                        Pressure potential stuff
(  143)*C-----------------------------------------------------------------------
(  144)*C
(  145)*C                 Interaction contribution to the pressure (IP)
(  146)*      PV_PR(PROT_D,NUT_D)=PROT_D*PVP(PROT_D,NUT_D)+
(  147)*     1    NUT_D*PVN(PROT_D,NUT_D)-PV_E(PROT_D,NUT_D)
(  148)*C
(  149)*C                 Derivative of IP w.r.t. proton density at
(  150)*C                 fixed neutron density
(  151)*      DPVRDP(PROT_D,NUT_D)=PROT_D*
(  152)*     1    DPVPDP(PROT_D,NUT_D)+NUT_D*DPVNDP(PROT_D,NUT_D)
(  153)*C
(  154)*C                 Derivative of IP w.r.t. neutron density at






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 80

(  155)*C                 fixed proton density
(  156)*      DPVRDN(PROT_D,NUT_D)=PROT_D*
(  157)*     1    DPVPDN(PROT_D,NUT_D)+NUT_D*DPVNDN(PROT_D,NUT_D)
(  158)*C
(  159)*C
( 3797)       SCHFLG = 0
( 3798) C
( 3799) C
( 3800)  5    CONTINUE
( 3801) C
( 3802) C
( 3803) C
( 3804) C
( 3805) C                         Set T equal to the input variable (the entropy
( 3806) C                         and internal energy options are not implemente
( 3807) C                         in this version)
( 3808)       T = INPVAR(1)
( 3809)       NSUBI = INPVAR(2)
( 3810)       ETA_PO = INPVAR(3)
( 3811)       ETA_NO = INPVAR(4)
( 3812) C
( 3813) C
( 3814) C                         Calc the quantum concentration of nucleons
( 3815)       NQ = 2.36D-4*T**1.5
( 3816) C
( 3817) C                         Calc the Fermi integral coefficent
( 3818)       UQ = 20.721
( 3819) C
( 3820)       MQ = (T/UQ)**1.5
( 3821) C
( 3822)       KQ = ((T/UQ)**2.5)/(2.0*PI**2)
( 3823) C
( 3824)       LQ = UQ*(MQ**OVR53)/(3.0*(PI**2))
( 3825) C
( 3826)       ETAMAX = 0.95*FINV12(2.0*(PI**2)*BRYDNS/MQ)
( 3827) C
( 3828)       IF(ETA_PO.GE.ETAMAX) ETA_PO = ETAMAX-0.1
( 3829)       IF(ETA_NO.GE.ETAMAX) ETA_NO = ETAMAX-0.1
( 3830)       NI_MIN = DMAX1(4.5D-2,BRYDNS)
( 3831)       IF(NSUBI.LT.NI_MIN) NSUBI = NI_MIN+1.0D-3
( 3832) C
( 3833)       TCFLAG = 0
( 3834) C
( 3835)       cflag = 0
( 3836) C
( 3837)       NEWFLG = 1
( 3838) C
( 3839) C                    Start Newton-Raphson iteration here
( 3840) C
( 3841) C
( 3842)       DO 30 I=1,MAXIT,1
( 3843) C
( 3844)         IT_NUM = I
( 3845) C                       Set the "Negative" flag
( 3846)         NGFLAG = 0
( 3847) C
( 3848) C
( 3849) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 81

( 3850)         NNOUT = MQ*F_1_2(ETA_NO)/(2.0*PI**2)
( 3851)         NPOUT = MQ*F_1_2(ETA_PO)/(2.0*PI**2)
( 3852) C
( 3853)         NOUT = NPOUT+NNOUT
( 3854) C
( 3855) c20        VNOUT = EIFLAG*(2.0*AA*NOUT+4.0*BB*NPOUT+CC*(1.0+DD)*NOUT**DD
( 3856)         VNOUT = EIFLAG*PVN(NPOUT,NNOUT)
( 3857) C
( 3858) c20        VPOUT = EIFLAG*(2.0*AA*NOUT+4.0*BB*NNOUT+
( 3859) c20     1    CC*(1.0+DD)*NOUT**DD+DELTAM)
( 3860)         VPOUT = EIFLAG*PVP(NPOUT,NNOUT)
( 3861) C
( 3862)         F32_NO = F_3_2(ETA_NO)
( 3863) C
( 3864)         F32_PO = F_3_2(ETA_PO)
( 3865) C
( 3866) c20        BPROUT = LQ*(F32_PO+F32_NO)+EIFLAG*(
( 3867) c20     1    AA*(NOUT**2)+4.0*BB*NPOUT*NNOUT+DD*CC*(NOUT**(1.0+DD)) )
( 3868)         BPROUT = LQ*(F32_PO+F32_NO)+EIFLAG*PV_PR(NPOUT,NNOUT)
( 3869) C
( 3870)         MUN_O = T*ETA_NO+VNOUT
( 3871) C
( 3872)         MUP_O = T*ETA_PO+VPOUT
( 3873) C
( 3874)         MUALFA = 2.0*MUN_O+2.0*MUP_O+BALPHA-BPROUT*V_ALFA
( 3875) C
( 3876)         IF(ABS(MUALFA/T).LT.30.0) THEN
( 3877)           ALFDNS = 8.0*NQ*DEXP(MUALFA/T)
( 3878)         ELSEIF((MUALFA/T).LT.-30.0) THEN
( 3879)           ALFDNS = 0.0
( 3880)         ELSE
( 3881)           ALFDNS = 8.0*NQ*DEXP(3.0D1)
( 3882)         ENDIF
( 3883) C
( 3884) C
( 3885) C                   These statements take out the alfas if the
( 3886) C                   alpha particle enable flag is not set
( 3887)         IF(ALFLAG.NE.1) THEN
( 3888)           ALFDNS = 0.0
( 3889)           MUALFA = -300.0
( 3890)         ENDIF
( 3891) C
( 3892) C
( 3893) C
( 3894)         EXALFA = 1.0-ALFDNS*V_ALFA
( 3895) C
( 3896) C
( 3897)         BPRALF = ALFDNS*T
( 3898) C
( 3899) c---------------------------------------------------
( 3900) C
( 3901) C
( 3902) C             Calculate fraction of space occupied by nuclei
( 3903)         U_NUC = (BRYDNS-EXALFA*NOUT-4.0*ALFDNS)/
( 3904)      1        (NSUBI-EXALFA*NOUT-4.0*ALFDNS)
( 3905) C
( 3906) C
( 3907) C            Is volume occupied by nuclei within acceptable limits?






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 82

( 3908) cc        IF((U_NUC.LT.0.0).OR.((U_NUC-1.0).GT.-1.0E-20)) THEN
( 3909) cc        IF((U_NUC.LT.0.0).OR.(U_NUC.GT.0.996)) THEN
( 3910)         IF((U_NUC.LT.1.0d-17).OR.(U_NUC.GT.0.996)) THEN
( 3911)           NGFLAG = 1
( 3912)           GOTO 29
( 3913)         ENDIF
( 3914) C
( 3915) C
( 3916) C            Volume exclusion factor due to nuclei
( 3917)         EXCLU = 1.0-U_NUC
( 3918) C
( 3919) C
( 3920) C            If calculated nucleon and alfa densities are larger
( 3921) C            than the baryon density then reduce the eta's
( 3922)         IF((EXCLU*EXALFA*NOUT+EXCLU*4.0*ALFDNS).GT.BRYDNS) THEN
( 3923)           NGFLAG = 1
( 3924)           GOTO 29
( 3925)         ENDIF
( 3926) C
( 3927) C
( 3928) C            Calculate the internal (inside nuclei) proton fraction
( 3929) C
( 3930)         X = (BRYDNS*YE-(1.0-U_NUC)*(EXALFA*NPOUT+2.0*ALFDNS))/
( 3931)      1    (U_NUC*NSUBI)
( 3932)         COMPX = 1.0-X
( 3933) C
( 3934) C
( 3935) C            Is X within reasonable (but not necessarily correct)
( 3936) C            limits? (YE may not be the lower bound on X !!!)
( 3937) cccc        X_MIN = DMAX1(1.0D-2,(YE-0.05))
( 3938)         X_MIN = DMAX1(1.0D-2,(0.8*YE))
( 3939) cc        x_min = 0.95*ye
( 3940)         IF((X.LT.X_MIN).OR.(X.GT.0.6)) THEN
( 3941)           NGFLAG = 1
( 3942)           GOTO 29
( 3943)         ENDIF
( 3944) C
( 3945) C
( 3946) C23456789012345678901234567890123456789012345678901234567890123456789012
( 3947) C                     Calculate critical temperature & its X derivative
( 3948)         TSC_12 = 87.76*((COMP/375.0)**0.5)*((0.155/NSUBS)**OVR3)
( 3949) c
( 3950) cccdebug      tsc_12 = 1.0d8
( 3951) c
( 3952)         TSUBC = TSC_12*X*COMPX
( 3953)         DTCDX = TSC_12*(1.0-2.0*X)
( 3954)         DTCDXX = -2.0*TSC_12
( 3955)         H = 1.0-2.0*(T/TSUBC)**2+(T/TSUBC)**4
( 3956) C
( 3957) cc        tsubc = tsc_12*0.25
( 3958) cc        dtcdx = 0.0
( 3959) cc        dtcdxx = 0.0
( 3960) C
( 3961) C
( 3962) CC        TSUBC = 80.0*X*COMPX
( 3963) CC        DTCDX = 80.0*(1.0-2.0*X)
( 3964) CC        DTCDXX = -160.0
( 3965) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 83

( 3966) C                     If the X is such that T is greater than the
( 3967) C                     critical temperature then fix NSUBI so that
( 3968) C                     it lies in the bounds of acceptable parameter
( 3969) C                     space
( 3970)         ftflag = 0
( 3971)         IF(((T.GT.TSUBC).OR.(H.LE.0.0)).AND.(SCHFLG.EQ.0)) THEN
( 3972) C                       If this is an initial guess, then lower
( 3973) C                       NSUBI untill we get a good X
( 3974)           IF(NEWFLG.EQ.1) THEN
( 3975) cc        write(*,*) ' nuc exceeded Tc'
( 3976) cc        write(*,1205) i,nsubi,eta_no,eta_po,x,u_nuc
( 3977)             ZNG = 2.0*(PI**2)*BRYDNS*(1.0-0.1*YE)/(1.5*MQ)
( 3978)             ZPG = 2.0*(PI**2)*BRYDNS*0.1*YE/(1.5*MQ)
( 3979)             IF(TCFLAG.NE.1) THEN
( 3980)               TCFLAG = 1
( 3981)               ETA_PO = FINV12(ZPG)-0.0
( 3982)               ETA_NO = FINV12(ZNG)-0.0
( 3983)             ELSE
( 3984)               ETA_PO = ETA_PO-2.0/T
( 3985)               ETA_NO = ETA_NO-2.0/T
( 3986)               NSUBI = DMAX1(0.9*NSUBI,5.1D-2)
( 3987)             ENDIF
( 3988)             IF(DBFLAG.EQ.1) THEN
( 3989)               WRITE(*,2000) '1',i,NSUBI,ETA_PO,ETA_NO,DNSUBI
( 3990)             ENDIF
( 3991)             GOTO 30
( 3992)           ELSE
( 3993) C                       Otherwise go back and cut the stepsize in
( 3994) C                       half since it was obviously too big
( 3995)             NGFLAG = 1
( 3996)             GOTO 29
( 3997)           ENDIF
( 3998)         ELSEIF(((T.GT.TSUBC).OR.(H.LE.0.0)).AND.(SCHFLG.EQ.1)) THEN
( 3999)           ftflag = 1
( 4000)           tsubc = 80.0*(0.25+0.5*ye)*(0.75-0.25*ye)
( 4001) C
( 4002)         ENDIF
( 4003) C
( 4004) C
( 4005)         R_0 = (0.75/(PI*NSUBS))**OVR3
( 4006)         Q = (384.0*PI*(R_0**2)*SIG_S/SYM_S)-16.0
( 4007) C
( 4008) C                        Calculate surface functions of the internal
( 4009) C                        (nuclear) proton fraction, X
( 4010)         SIGMA = 1.0/(Q+1.0/(X**3)+1.0/(COMPX**3))
( 4011)         OVRX4 = (1.0/X**4)-(1.0/COMPX**4)
( 4012)         DSIGDX = 3.0*(SIGMA**2)*OVRX4
( 4013)         SIGSGP = DSIGDX/SIGMA
( 4014)         SIGSG2 = 18.0*(SIGMA**2)*OVRX4**2-12.0*SIGMA*((1.0/X**5)+
( 4015)      1  (1.0/COMPX**5))
( 4016) C
( 4017) C                        If T is less than critical temp then
( 4018)         IF(T.LT.TSUBC) THEN
( 4019) C                        Calculate the surface energy temperature factor
( 4020) C                        and its X and T derivatives
( 4021)           H = 1.0-2.0*(T/TSUBC)**2+(T/TSUBC)**4
( 4022)           HPRIM = -4.0*T/(TSUBC**2)+4.0*((T/TSUBC)**3)/TSUBC
( 4023)           HPPRIM = -4.0/(TSUBC**2)+12.0*(T**2)/(TSUBC**4)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 84

( 4024)           DHDX = 4.0*(T**2/TSUBC**3-T**4/TSUBC**5)*DTCDX
( 4025)           DHDXX = 4.0*(T**2/TSUBC**3-T**4/TSUBC**5)*DTCDXX+
( 4026)      1    4.0*(-3.0*T**2/TSUBC**4+5.0*T**4/TSUBC**6)*(DTCDX**2)
( 4027)           HX = DHDX/H
( 4028)           DHDTDX = 8.0*(T/TSUBC**3-2.0*(T**3)/TSUBC**5)*DTCDX
( 4029) C
( 4030) C
( 4031) C                        X independent version of TZERO
( 4032) c          TZERO = 0.25*TSC_12
( 4033) c          DTZDX = 0.0
( 4034) c          DTZDXX = 0.0
( 4035) C                        X dependent version of TZERO
( 4036) c          TZERO = TSUBC
( 4037) c          DTZDX = DTCDX
( 4038) c          DTZDXX = DTCDXX
( 4039) C
( 4040) C
( 4041) C
( 4042) C                        Coulomb liquid correction factors and their
( 4043) C                        derivatives
( 4044) c          W = 1-(T/TZERO)**2
( 4045) c          DWDX = 2.0*(T**2)*DTZDX/(TZERO**3)
( 4046) c          DWDT = -2.0*T/(TZERO**2)
( 4047) c          DWDTDX = 4.0*T*DTZDX/(TZERO**3)
( 4048) c          DWDXDX = 2.0*(T**2)*
( 4049) c     1    (DTZDXX/(TZERO**3)-3.0*(DTZDX**2)/(TZERO**4))
( 4050) c          DWDTDT = -2.0/(TZERO**2)
( 4051) C
( 4052)           w = 1.0
( 4053)           dwdt = 0.0
( 4054)           dwdx = 0.0
( 4055)           dwdtdx = 0.0
( 4056)           dwdxdx = 0.0
( 4057)           dwdtdt = 0.0
( 4058) C
( 4059) C
( 4060) C
( 4061) C                        Calc lattice factor & derivatives & products
( 4062) C
( 4063)           EXCLU = 1.0-U_NUC
( 4064)           COMPU = 1.0-U_NUC
( 4065) C
( 4066)           DU = DMAX1(1.0D-15, (1.0-1.5*W*U_NUC**OVR3+0.5*U_NUC))
( 4067)           DMU = DMAX1(1.0D-15,(1.0-1.5*W*(1.0-U_NUC+1.0E-20)**OVR3+
( 4068)      1    0.5*(1.0-U_NUC)))
( 4069) C
( 4070)           DUP = -0.5*W*U_NUC**M2OVR3+0.5
( 4071)           DMUP =-0.5*W*(1.0-U_NUC+1.0E-20)**M2OVR3+0.5
( 4072)           DUPP = OVR3*W*((U_NUC+1.0D-20)**M5OVR3)
( 4073)           DMUPP = OVR3*W*((1.0-U_NUC)+1.0E-20)**M5OVR3
( 4074) C
( 4075) C                Derivatives w.r.t. T
( 4076) C
( 4077)           DUT = -1.5*DWDT*U_NUC**OVR3
( 4078)           DMUT = -1.5*DWDT*(1.0-U_NUC+1.0E-20)**OVR3
( 4079)           DUPT = -0.5*DWDT*U_NUC**M2OVR3
( 4080)           DMUPT = -0.5*DWDT*(1.0-U_NUC+1.0E-20)**M2OVR3
( 4081) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 85

( 4082) C                Derivatives w.r.t. X
( 4083) C
( 4084)           DUX = -1.5*DWDX*U_NUC**OVR3
( 4085)           DMUX = -1.5*DWDX*(1.0-U_NUC+1.0E-20)**OVR3
( 4086)           DUPX = -0.5*DWDX*U_NUC**M2OVR3
( 4087)           DMUPX = -0.5*DWDX*(1.0-U_NUC+1.0E-20)**M2OVR3
( 4088) C
( 4089) C                Second derivatives w.r.t. X
( 4090) C
( 4091)           DUXX = -1.5*DWDXDX*U_NUC**OVR3
( 4092)           DMUXX = -1.5*DWDXDX*(1.0-U_NUC+1.0E-20)**OVR3
( 4093) C
( 4094) C                Second derivatives w.r.t. T
( 4095) C
( 4096)           DUTT = -1.5*DWDTDT*U_NUC**OVR3
( 4097)           DMUTT = -1.5*DWDTDT*(1.0-U_NUC+1.0E-20)**OVR3
( 4098) C
( 4099) C                Second derivatives w.r.t. X & T
( 4100) C
( 4101)           DUXT = -1.5*DWDTDX*U_NUC**OVR3
( 4102)           DMUXT = -1.5*DWDTDX*(1.0-U_NUC+1.0E-20)**OVR3
( 4103) C
( 4104) C
( 4105)           TMP1 = (U_NUC**2)+(COMPU**2)+0.6*(U_NUC*COMPU)**2
( 4106)           TMP1P = 4.0*U_NUC-2.0+
( 4107)      1    2.0*0.6*(U_NUC*COMPU**2-COMPU*U_NUC**2)
( 4108)           TMP1PP = 4.0+2.0*0.6*(COMPU**2-4.0*U_NUC*COMPU+U_NUC**2)
( 4109) C
( 4110)           TMP2 = COMPU*(DU**OVR3)
( 4111)           TMP2P = -1.0*DU**OVR3+OVR3*COMPU*(DU**M2OVR3)*DUP
( 4112)           TMP2PP = -OVR23*(DU**M2OVR3)*DUP-OVR29*COMPU*
( 4113)      1    (DU**M5OVR3)*DUP**2+OVR3*COMPU*(DU**M2OVR3)*DUPP
( 4114) C
( 4115)           TMP2T = OVR3*COMPU*(DU**M2OVR3)*DUT
( 4116)           TMP2X = OVR3*COMPU*(DU**M2OVR3)*DUX
( 4117)           TMP2XX = OVR3*COMPU*(DU**M2OVR3)*DUXX+
( 4118)      1        M2OVR3*OVR3*COMPU*(DU**M5OVR3)*(DUX**2)
( 4119)           TMP2TT = OVR3*COMPU*(DU**M2OVR3)*DUTT+
( 4120)      1        M2OVR3*OVR3*COMPU*(DU**M5OVR3)*(DUT**2)
( 4121)           TMP2XT = OVR3*COMPU*(DU**M2OVR3)*DUXT+
( 4122)      1        M2OVR3*OVR3*COMPU*(DU**M5OVR3)*DUX*DUT
( 4123)           TMP2PT = -OVR3*(DU**M2OVR3)*DUT+
( 4124)      1        M2OVR3*OVR3*COMPU*(DU**M5OVR3)*DUP*DUT+
( 4125)      2        OVR3*COMPU*(DU**M2OVR3)*DUPT
( 4126)           TMP2PX = -OVR3*(DU**M2OVR3)*DUX+
( 4127)      1        M2OVR3*OVR3*COMPU*(DU**M5OVR3)*DUP*DUX+
( 4128)      2        OVR3*COMPU*(DU**M2OVR3)*DUPX
( 4129) C
( 4130) C
( 4131) C
( 4132)           TMP3 = U_NUC*(DMU**OVR3)
( 4133)           TMP3P = (DMU**OVR3)-OVR3*U_NUC*(DMU**M2OVR3)*DMUP
( 4134)           TMP3PP = -OVR23*(DMU**M2OVR3)*DMUP-OVR29*U_NUC*
( 4135)      1    (DMU**M5OVR3)*(DMUP**2)+OVR3*U_NUC*(DMU**M2OVR3)*DMUPP
( 4136) C
( 4137)           TMP3T = OVR3*U_NUC*(DMU**M2OVR3)*DMUT
( 4138)           TMP3X = OVR3*U_NUC*(DMU**M2OVR3)*DMUX
( 4139)           TMP3XX = OVR3*U_NUC*(DMU**M2OVR3)*DMUXX+






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 86

( 4140)      1        M2OVR3*OVR3*U_NUC*(DMU**M5OVR3)*(DMUX**2)
( 4141)           TMP3TT = OVR3*U_NUC*(DMU**M2OVR3)*DMUTT+
( 4142)      1        M2OVR3*OVR3*U_NUC*(DMU**M5OVR3)*(DMUT**2)
( 4143)           TMP3XT = OVR3*U_NUC*(DMU**M2OVR3)*DMUXT+
( 4144)      1        M2OVR3*OVR3*U_NUC*(DMU**M5OVR3)*DMUX*DMUT
( 4145)           TMP3PT = OVR3*(DMU**M2OVR3)*DMUT-OVR3*M2OVR3*U_NUC*
( 4146)      1      (DMU**M5OVR3)*DMUP*DMUT-OVR3*U_NUC*(DMU**M2OVR3)*DMUPT
( 4147)  
( 4148)           TMP3PX = OVR3*(DMU**M2OVR3)*DMUX-OVR3*M2OVR3*U_NUC*
( 4149)      1      (DMU**M5OVR3)*DMUP*DMUX-OVR3*U_NUC*(DMU**M2OVR3)*DMUPX
( 4150) C
( 4151) C
( 4152) C                 Combination D function
( 4153) C
( 4154)           SCRDU = U_NUC*COMPU*(TMP2+TMP3)/TMP1
( 4155)           SCRDUT = U_NUC*COMPU*(TMP2T+TMP3T)/TMP1
( 4156)           SCRDUX = U_NUC*COMPU*(TMP2X+TMP3X)/TMP1
( 4157)           SCRDXX = U_NUC*COMPU*(TMP2XX+TMP3XX)/TMP1
( 4158)           SCRDTT = U_NUC*COMPU*(TMP2TT+TMP3TT)/TMP1
( 4159)           SCRDXT = U_NUC*COMPU*(TMP2XT+TMP3XT)/TMP1
( 4160) C
( 4161)           SCRD = SCRDU/U_NUC
( 4162)           SCRDT = SCRDUT/U_NUC
( 4163)           SCRDX = SCRDUX/U_NUC
( 4164) C
( 4165)           SCRD2 = SCRDU/COMPU
( 4166)           SCRD2T = SCRDUT/COMPU
( 4167)           SCRD2X = SCRDUX/COMPU
( 4168) C
( 4169)           SCRDUP = SCRD-SCRD2+U_NUC*COMPU*
( 4170)      1    ((TMP2P+TMP3P)/TMP1-(TMP2+TMP3)*TMP1P/TMP1**2)
( 4171) C
( 4172)           SCRDPT = SCRDT-SCRD2T+U_NUC*COMPU*
( 4173)      1    ((TMP2PT+TMP3PT)/TMP1-(TMP2T+TMP3T)*TMP1P/TMP1**2)
( 4174) C
( 4175)           SCRDPX = SCRDX-SCRD2X+U_NUC*COMPU*
( 4176)      1    ((TMP2PX+TMP3PX)/TMP1-(TMP2X+TMP3X)*TMP1P/TMP1**2)
( 4177) C
( 4178)           SCRDPP = (SCRDUP-SCRD)/U_NUC-(SCRD2+SCRDUP)/COMPU+
( 4179)      1    (1.0-2.0*U_NUC)*
( 4180)      2    ((TMP2P+TMP3P)/TMP1-(TMP2+TMP3)*TMP1P/TMP1**2)+U_NUC*COMPU*
( 4181)      3    ((TMP2PP+TMP3PP)/TMP1-2.0*(TMP2P+TMP3P)*TMP1P/TMP1**2-
( 4182)      4    (TMP2+TMP3)*TMP1PP/TMP1**2+
( 4183)      5    2.0*(TMP2+TMP3)*(TMP1P**2)/TMP1**3)
( 4184) C
( 4185) C
( 4186) c
( 4187) c           bubble D function
( 4188) cbub          scrdu = (1.0-u_nuc)*dmu**ovr3
( 4189) cbub          scrd = scrdu/u_nuc
( 4190) cbub          scrd2 = dmu**ovr3
( 4191) cbub          scrdup = -1.0*dmu**ovr3-
( 4192) cbub     1    ovr3*(1.0-u_nuc)*dmup*dmu**m2ovr3
( 4193) cbub          scrdpp = ovr23*dmup*dmu**m2ovr3-ovr29*(1.0-u_nuc)*
( 4194) cbub     1    dmu**m5ovr3*dmup**2+ovr3*(1.0-u_nuc)*dmu**m2ovr3*dmupp
( 4195) c
( 4196) c
( 4197) c           nuclei D function






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 87

( 4198) cnuc          scrdu = u_nuc*du**ovr3
( 4199) cnuc          scrd = du**ovr3
( 4200) cnuc          scrd2 = scrdu/(1.0-u_nuc)
( 4201) cnuc          scrdup = du**ovr3+ovr3*u_nuc*dup*du**m2ovr3
( 4202) cnuc          scrdpp = ovr23*dup*du**m2ovr3-ovr29*u_nuc*
( 4203) cnuc     1    (du**m5ovr3)*(dup**2)+ovr3*u_nuc*(du**m2ovr3)*dupp
( 4204) c
( 4205) c
( 4206) C
( 4207)           ZETA_0 = CSSCAL*6.035204*(SIG_S*(16.0+Q))**OVR23
( 4208) C
( 4209) C                        Surface energy coefficent
( 4210)           ZETA = ZETA_0*(H*SIGMA*X*NSUBI)**OVR23
( 4211) C
( 4212) C                        Derivative of Zeta w.r.t. X
( 4213)           DZDT = OVR23*ZETA*HPRIM/H
( 4214) C
( 4215) C                        Derivative of Zeta w.r.t. X
( 4216)           DZDX = OVR23*ZETA*(DHDX/H+SIGSGP+1.0/X)
( 4217) C
( 4218) C                        Derivative of Zeta w.r.t. NSUBI
( 4219)           DZDNI = OVR23*ZETA/NSUBI
( 4220) C
( 4221) C
( 4222) C
( 4223) C                        Nuclear radius
( 4224)           RSUBN = 9.0*H*SIGMA*SIG_S*(16.0D0+Q)*U_NUC*(1.0-U_NUC)/
( 4225)      1    (2.0*ZETA*SCRDU)
( 4226) C
( 4227) C                        Nuclear volume
( 4228)           VSUBN = 4.0*PI*(RSUBN**3)/3.0
( 4229) C
( 4230) C                        Atomic number
( 4231)           A = NSUBI*VSUBN
( 4232) C
( 4233) C                        Now calc surface, Coulomb free energies
( 4234) C
( 4235)           FSUBSC = ZETA*SCRDU/BRYDNS
( 4236)           FSUBS = OVR23*ZETA*SCRDU/BRYDNS
( 4237)           FSUBC = OVR3*ZETA*SCRDU/BRYDNS
( 4238) C
( 4239) C
( 4240) C
( 4241) C                   Translational chemical potential
( 4242)           MUSUBT = TRSCAL*
( 4243)      1        T*DLOG((1.0-U_NUC)*(U_NUC*NSUBI)/(NQ*AZERO**2.5))
( 4244) C
( 4245) C                   Derivative of trans. chem. potential w.r.t. T
( 4246)           DMUTDT = TRSCAL*(MUSUBT/T-1.5)
( 4247) C
( 4248) C                   Translational free energy per baryon
( 4249)           FTRANS = TRSCAL*H*(MUSUBT-T)/AZERO
( 4250) C
( 4251) C                            if T is above the critical temperature
( 4252)         ELSE
( 4253)           A = 0.0
( 4254)           RSUBN = 0.0
( 4255)           VSUBN = 0.0






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 88

( 4256)           FSUBS = 0.0
( 4257)           FSUBC = 0.0
( 4258)           FTRANS = 0.0
( 4259)         ENDIF
( 4260) C                            Calc ratio of NSUBI to NSUBS
( 4261)         NRATIO = NSUBI/NSUBS
( 4262) C
( 4263) C
( 4264) c20        VNI = 2.0*AA*NSUBI+4.0*BB*X*NSUBI+CC*(1.0+DD)*NSUBI**DD
( 4265)         VNI = PVN(X*NSUBI,(1.0-X)*NSUBI)
( 4266) C
( 4267) c20        VPI = 2.0*AA*NSUBI+4.0*BB*(1.0-X)*NSUBI+
( 4268) c20     1    CC*(1.0+DD)*NSUBI**DD+DELTAM
( 4269)         VPI = PVP(X*NSUBI,(1.0-X)*NSUBI)
( 4270) C
( 4271) c---------------------------------------------------
( 4272) C
( 4273)         ZNI = 2.0*(PI**2)*NSUBI*(1.0-X)/MQ
( 4274) C
( 4275)         ZPI = 2.0*(PI**2)*NSUBI*X/MQ
( 4276) C
( 4277)         ETA_NI = FINV12(ZNI)
( 4278) C
( 4279)         ETA_PI = FINV12(ZPI)
( 4280) C
( 4281)         MUN_I = T*ETA_NI+VNI
( 4282) C
( 4283)         MUP_I = T*ETA_PI+VPI
( 4284) C
( 4285)         F32_NI = F_3_2(ETA_NI)
( 4286) C
( 4287)         F32_PI = F_3_2(ETA_PI)
( 4288) C
( 4289) c20        PSUBI = LQ*(F32_NI+F32_PI)+
( 4290) c20     1    (NSUBI**2)*(AA+4.0*BB*X*(1.0-X))+DD*CC*NSUBI**(1.0+DD)
( 4291)         PSUBI = LQ*(F32_NI+F32_PI)+PV_PR(X*NSUBI,(1.0-X)*NSUBI)
( 4292) C
( 4293) C
( 4294)         BN = OVR23*ZETA*SCRD*(SIGSGP+HX+1.5*SCRDUX/SCRDU)*X/NSUBI-
( 4295)      1  TRSCAL*(1.0-U_NUC)*(MUSUBT*(H-X*DHDX)/AZERO+X*DHDX*T/AZERO)
( 4296) C
( 4297)         BP = -OVR23*ZETA*SCRD*
( 4298)      1 ((SIGSGP+HX+1.5*SCRDUX/SCRDU)*COMPX+1.0/X)/NSUBI-
( 4299)      1 TRSCAL*(1.0-U_NUC)*
( 4300)      2 (MUSUBT*(H+DHDX*COMPX)/AZERO-DHDX*T*COMPX/AZERO)
( 4301) C
( 4302)         BSUBP = ZETA*SCRDUP-OVR23*ZETA*SCRD-
( 4303)      1        TRSCAL*U_NUC*NSUBI*H*MUSUBT/AZERO
( 4304) C
( 4305) C
( 4306) C23456789012345678901234567890123456789012345678901234567890123456789012
( 4307) C
( 4308) C
( 4309) C
( 4310) cc        GPI = 2.0*FHALFI(ETA_PI)
( 4311) cc        GPI = 2.0*FHALFI(2.0*(pi**2)*x*nsubi/mq)
( 4312) cc        GNI = 2.0*FHALFI(ETA_NI)
( 4313) cc        GNI = 2.0*FHALFI(2.0*(pi**2)*(1.0-x)*nsubi/mq)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 89

( 4314) c
( 4315) cc        GPO = 2.0*FHALFO(ETA_PO)
( 4316) cc        GNO = 2.0*FHALFO(ETA_NO)
( 4317) C
( 4318) c
( 4319)         GPO = 2.0*FHALF(ETA_PO)
( 4320)         GNO = 2.0*FHALF(ETA_NO)
( 4321)         GPI = 2.0*FHALF(ETA_PI)
( 4322)         GNI = 2.0*FHALF(ETA_NI)
( 4323) C
( 4324) C                  Derivatives of inside potentials
( 4325) C
( 4326) c20        DVPIDP = 2.0*AA+DD*(1.0+DD)*CC*(NSUBI**(DD-1.0))
( 4327)         DVPIDP = DPVPDP(X*NSUBI,(1.0-X)*NSUBI)
( 4328) c20        DVPIDN = 2.0*AA+4.0*BB+DD*(1.0+DD)*CC*(NSUBI**(DD-1.0))
( 4329)         DVPIDN = DPVPDN(X*NSUBI,(1.0-X)*NSUBI)
( 4330) c20        DVNIDP = DVPIDN
( 4331)         DVNIDP = DPVNDP(X*NSUBI,(1.0-X)*NSUBI)
( 4332) c20        DVNIDN = DVPIDP
( 4333)         DVNIDN = DPVNDN(X*NSUBI,(1.0-X)*NSUBI)
( 4334) C
( 4335) C                  Derivatives of outside potentials
( 4336) C
( 4337) c20        DVPODP = EIFLAG*(2.0*AA+DD*(1.0+DD)*CC*(NOUT**(DD-1.0)) )
( 4338)         DVPODP = EIFLAG*DPVPDP(NPOUT,NNOUT)
( 4339) c20        DVPODN = EIFLAG*(2.0*AA+4.0*BB+DD*(1.0+DD)*CC*(NOUT**(DD-1.0)
( 4340)         DVPODN = EIFLAG*DPVPDN(NPOUT,NNOUT)
( 4341) c20        DVNODP = DVPODN
( 4342)         DVNODP = EIFLAG*DPVNDP(NPOUT,NNOUT)
( 4343) c20        DVNODN = DVPODP
( 4344)         DVNODN = EIFLAG*DPVNDN(NPOUT,NNOUT)
( 4345) C
( 4346) C                  Derivatives of inside K.E. densities
( 4347) C
( 4348)         MSSCON = 3.0*MASSN/((HBAR*C)**2)
( 4349)         DTPIDP = MSSCON*T*GPI
( 4350)         DTPIDN = 0.0
( 4351)         DTNIDP = 0.0
( 4352)         DTNIDN = MSSCON*T*GNI
( 4353) C
( 4354) C                  Derivatives of outside K.E. densities
( 4355) C
( 4356)         DTPODP = MSSCON*T*GPO
( 4357)         DTPODN = 0.0
( 4358)         DTNODP = 0.0
( 4359)         DTNODN = MSSCON*T*GNO
( 4360) C
( 4361) C
( 4362) C                  Derivatives of inside chem. potentials
( 4363) C
( 4364)         DMPIDP = T*GPI/(X*NSUBI)+DVPIDP
( 4365)         DMPIDN = DVPIDN
( 4366)         DMNIDP = DVNIDP
( 4367)         DMNIDN = T*GNI/((1.0-X)*NSUBI)+DVNIDN
( 4368) C
( 4369) C                  Derivatives of outside chem. potentials
( 4370) C
( 4371)         DMPODP = T+DVPODP*NPOUT/GPO






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 90

( 4372)         DMPODN = DVPODN*NNOUT/GNO
( 4373)         DMNODP = DVNODP*NPOUT/GPO
( 4374)         DMNODN = T+DVNODN*NNOUT/GNO
( 4375) C
( 4376) C                  Derivatives of inside pressure
( 4377) C
( 4378)         DPIDP = X*NSUBI*DMPIDP+(1.0-X)*NSUBI*DMNIDP
( 4379)         DPIDN = X*NSUBI*DMPIDN+(1.0-X)*NSUBI*DMNIDN
( 4380) C
( 4381) C                  Derivatives of outside pressure
( 4382) C
( 4383)         DPODP = NPOUT*DMPODP+NNOUT*DMNODP
( 4384)         DPODN = NPOUT*DMPODN+NNOUT*DMNODN
( 4385) C
( 4386) C                  Derivatives of alpha pressure
( 4387) C
( 4388)         DPADP = ALFDNS*
( 4389)      1  ( (2.0-NPOUT*V_ALFA)*DMPODP+(2.0-NNOUT*V_ALFA)*DMNODP )
( 4390)         DPADN = ALFDNS*
( 4391)      1  ( (2.0-NPOUT*V_ALFA)*DMPODN+(2.0-NNOUT*V_ALFA)*DMNODN )
( 4392) C
( 4393) C
( 4394)         N1 = NSUBI-EXALFA*(NNOUT+NPOUT)-4.0*ALFDNS
( 4395)         N2 = NSUBI*X-EXALFA*NPOUT-2.0*ALFDNS
( 4396) C
( 4397) C                  Derivatives of U
( 4398) C
( 4399)         DUDPO = -EXCLU*(EXALFA*NPOUT/GPO+
( 4400)      1           (4.0-NOUT*V_ALFA)*DPADP/T)/N1
( 4401)         DUDNO = -EXCLU*(EXALFA*NNOUT/GNO+
( 4402)      1           (4.0-NOUT*V_ALFA)*DPADN/T)/N1
( 4403)         DUDNI = -U_NUC/N1
( 4404) C
( 4405) C                  Derivatives of X
( 4406) C
( 4407)         DXDPO = -(N2*DUDPO+EXCLU*(EXALFA*NPOUT/GPO+
( 4408)      1           (2.0-NPOUT*V_ALFA)*DPADP/T))/(U_NUC*NSUBI)
( 4409)         DXDNO = -(N2*DUDNO+EXCLU*(2.0-NPOUT*V_ALFA)*DPADN/T)/
( 4410)      1           (U_NUC*NSUBI)
( 4411)         DXDNI = (N2-X*N1)/(NSUBI*N1)
( 4412) C
( 4413) C                  Derivatives of B's w.r.t. NSUBI
( 4414) C
( 4415)         DB1DNI = TRSCAL*( -U_NUC*H*(MUSUBT+T)/AZERO )+
( 4416)      1      OVR23*ZETA*(SCRDUP-OVR23*SCRD)/NSUBI
( 4417) C
( 4418)         TMP4 = (SIGSGP+DHDX/H+1.5*SCRDUX/SCRDU)*(X-1.0)-1.0/X
( 4419) C
( 4420)         DB2DNI = -2.0*ZETA*SCRD*TMP4/(9.0*NSUBI**2)-
( 4421)      1  TRSCAL*( (COMPU*T/(AZERO*NSUBI))*(H+COMPX*DHDX) )
( 4422) C
( 4423)         TMP4 = (SIGSGP+DHDX/H+1.5*SCRDUX/SCRDU)
( 4424)         DB3DNI = -2.0*ZETA*SCRD*X*TMP4/(9.0*NSUBI**2)-
( 4425)      1          TRSCAL*( ((COMPU*T)/(AZERO*NSUBI))*(H-X*DHDX) )
( 4426) C
( 4427) c
( 4428) c
( 4429) C                  Derivatives of B's w.r.t. X






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 91

( 4430) C
( 4431)         DB1DX = OVR23*ZETA*(SCRDUP-OVR23*SCRD)*(SIGSGP+DHDX/H+1.0/X)+
( 4432)      1  OVR23*ZETA*(SCRDPX-OVR23*SCRDX)-
( 4433)      2  TRSCAL*( U_NUC*NSUBI*DHDX*MUSUBT/AZERO )
( 4434) C
( 4435) C
( 4436) C
( 4437) C
( 4438) C
( 4439)         TMP4 = (SIGSGP+DHDX/H+1.5*SCRDUX/SCRDU)*(X-1.0)-1.0/X
( 4440) C
( 4441)         TMP5 = SIGSGP+DHDX/H+1.5*SCRDUX/SCRDU+(X**(-2))+(X-1.0)*
( 4442)      1  (SIGSG2-(SIGSGP**2)-(DHDX/H)**2+DHDXX/H+1.5*SCRDXX/SCRDU-
( 4443)      2  1.5*(SCRDUX/SCRDU)**2)
( 4444) C
( 4445) C
( 4446)         DB2DX = OVR23*(ZETA*SCRDUX+SCRDU*DZDX)*TMP4/(U_NUC*NSUBI)+
( 4447)      1      OVR23*ZETA*SCRD*TMP5/NSUBI-TRSCAL*(
( 4448)      2      COMPU*(DHDX*MUSUBT+(DHDXX*(1.0-X)-DHDX)*(MUSUBT-T))/AZERO)
( 4449) C
( 4450) C
( 4451) C
( 4452) C
( 4453)         TMP4 = (SIGSGP+DHDX/H+1.5*SCRDUX/SCRDU)*X
( 4454) C
( 4455)         TMP5 = SIGSGP+DHDX/H+1.5*SCRDUX/SCRDU+X*
( 4456)      1         (SIGSG2-(SIGSGP**2)-(DHDX/H)**2+DHDXX/H+
( 4457)      2       1.5*SCRDXX/SCRDU-1.5*(SCRDUX/SCRDU)**2)
( 4458) C
( 4459)         DB3DX = OVR23*(ZETA*SCRDUX+SCRDU*DZDX)*TMP4/(U_NUC*NSUBI)+
( 4460)      1      OVR23*ZETA*SCRD*TMP5/NSUBI-
( 4461)      2      TRSCAL*( COMPU*(DHDX*T-X*DHDXX*(MUSUBT-T))/AZERO )
( 4462) C
( 4463) C
( 4464) C
( 4465) C                  Derivatives of B's w.r.t. U_NUC
( 4466) C
( 4467)         DB1DU = ZETA*(SCRDPP-OVR23*SCRDUP/U_NUC+OVR23*SCRD/U_NUC)-
( 4468)      1  TRSCAL*( NSUBI*H*(MUSUBT+T*(1.0-2.0*U_NUC)/(1.0-U_NUC))/AZERO )
( 4469) C
( 4470)         TMP4 = (SIGSGP+DHDX/H+1.5*SCRDUX/SCRDU)*(X-1.0)-1.0/X
( 4471)         TMP5 = (X-1.0)*1.5*(SCRDPX/SCRDU-SCRDUX*SCRDUP/SCRDU**2)
( 4472)         DB2DU = (OVR23*ZETA*SCRD/NSUBI)*TMP4*(SCRDUP/SCRDU-1.0/U_NUC)+
( 4473)      1    OVR23*ZETA*SCRDU*TMP5/(U_NUC*NSUBI)+
( 4474)      1    TRSCAL*( (H*MUSUBT+DHDX*COMPX*(MUSUBT-T))/AZERO-
( 4475)      2    (T*(1.0-2.0*U_NUC)/U_NUC)*(H+DHDX*COMPX)/AZERO )
( 4476) C
( 4477)         TMP4 = (SIGSGP+DHDX/H+1.5*SCRDUX/SCRDU)*X
( 4478)         TMP5 = X*1.5*(SCRDPX/SCRDU-SCRDUP*SCRDUX/SCRDU**2)
( 4479)         DB3DU = OVR23*ZETA*SCRD*TMP4*(U_NUC*SCRDUP/SCRDU-1.0)/
( 4480)      1 (U_NUC*NSUBI)+OVR23*ZETA*SCRDU*TMP5/(U_NUC*NSUBI)+
( 4481)      2  TRSCAL*( (H*MUSUBT-X*DHDX*(MUSUBT-T))/AZERO-
( 4482)      3 T*(1.0-2.0*U_NUC)*(H-X*DHDX)/(AZERO*U_NUC) )
( 4483) C
( 4484) C
( 4485) C                      A1 derivatives
( 4486) C
( 4487)         DA1ID1 = X*DPIDP+(1.0-X)*DPIDN+NSUBI*(DPIDP-DPIDN)*DXDNI






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 92

( 4488)         DA1ID2 = NSUBI*(DPIDP-DPIDN)*DXDPO
( 4489)         DA1ID3 = NSUBI*(DPIDP-DPIDN)*DXDNO
( 4490) C
( 4491)         DA1OD1 = 0.0
( 4492)         DA1OD2 = DPODP+DPADP
( 4493)         DA1OD3 = DPODN+DPADN
( 4494) C
( 4495)         DB1D1 = DB1DNI+DB1DX*DXDNI+DB1DU*DUDNI
( 4496)         DB1D2 = DB1DX*DXDPO+DB1DU*DUDPO
( 4497)         DB1D3 = DB1DX*DXDNO+DB1DU*DUDNO
( 4498) C
( 4499)         DA1D1 = DA1ID1-DB1D1-DA1OD1
( 4500)         DA1D2 = DA1ID2-DB1D2-DA1OD2
( 4501)         DA1D3 = DA1ID3-DB1D3-DA1OD3
( 4502) C
( 4503) C                      A3 derivatives
( 4504) C
( 4505)         DA3ID1 = X*DMNIDP+(1.0-X)*DMNIDN+NSUBI*(DMNIDP-DMNIDN)*DXDNI
( 4506)         DA3ID2 = NSUBI*(DMNIDP-DMNIDN)*DXDPO
( 4507)         DA3ID3 = NSUBI*(DMNIDP-DMNIDN)*DXDNO
( 4508) C
( 4509)         DA3OD1 = 0.0
( 4510)         DA3OD2 = DMNODP
( 4511)         DA3OD3 = DMNODN
( 4512) C
( 4513)         DB3D1 = DB3DNI+DB3DX*DXDNI+DB3DU*DUDNI
( 4514)         DB3D2 = DB3DX*DXDPO+DB3DU*DUDPO
( 4515)         DB3D3 = DB3DX*DXDNO+DB3DU*DUDNO
( 4516) C
( 4517)         DA3D1 = DA3ID1-DB3D1-DA3OD1
( 4518)         DA3D2 = DA3ID2-DB3D2-DA3OD2
( 4519)         DA3D3 = DA3ID3-DB3D3-DA3OD3
( 4520) C
( 4521) C                      A2 derivatives
( 4522) C
( 4523)         DA2ID1 = X*DMPIDP+(1.0-X)*DMPIDN+NSUBI*(DMPIDP-DMPIDN)*DXDNI
( 4524)         DA2ID2 = NSUBI*(DMPIDP-DMPIDN)*DXDPO
( 4525)         DA2ID3 = NSUBI*(DMPIDP-DMPIDN)*DXDNO
( 4526) C
( 4527)         DA2OD1 = 0.0
( 4528)         DA2OD2 = DMPODP
( 4529)         DA2OD3 = DMPODN
( 4530) C
( 4531)         DB2D1 = DB2DNI+DB2DX*DXDNI+DB2DU*DUDNI
( 4532)         DB2D2 = DB2DX*DXDPO+DB2DU*DUDPO
( 4533)         DB2D3 = DB2DX*DXDNO+DB2DU*DUDNO
( 4534) C
( 4535)         DA2D1 = DA2ID1-DB2D1-DA2OD1
( 4536)         DA2D2 = DA2ID2-DB2D2-DA2OD2
( 4537)         DA2D3 = DA2ID3-DB2D3-DA2OD3
( 4538) C
( 4539) C
( 4540) C                      Eta derivatives
( 4541) C
( 4542)         DNDETN = NNOUT/GNO
( 4543)         DPDETP = NPOUT/GPO
( 4544) C
( 4545)         DA1DN = DA1D1






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 93

( 4546)         DA1ETP = DA1D2
( 4547)         DA1ETN = DA1D3
( 4548) C
( 4549)         DA2DN = DA2D1
( 4550)         DA2ETP = DA2D2
( 4551)         DA2ETN = DA2D3
( 4552) C
( 4553)         DA3DN = DA3D1
( 4554)         DA3ETP = DA3D2
( 4555)         DA3ETN = DA3D3
( 4556) C
( 4557) C
( 4558) C
( 4559) C
( 4560)         A1 = PSUBI-BSUBP-BPROUT-BPRALF
( 4561)         A2 = MUP_I-BP-MUP_O
( 4562)         A3 = MUN_I-BN-MUN_O
( 4563) C
( 4564) C
( 4565) C                          Unset the "new" flag
( 4566)         NEWFLG = 0
( 4567) C
( 4568)         DETERM = DA1DN*(DA2ETP*DA3ETN-DA2ETN*DA3ETP)-
( 4569)      1           DA1ETP*(DA2DN*DA3ETN-DA2ETN*DA3DN)+
( 4570)      2           DA1ETN*(DA2DN*DA3ETP-DA2ETP*DA3DN)
( 4571) C
( 4572)         DNSUBI = -1.0*(A1*(DA2ETP*DA3ETN-DA2ETN*DA3ETP)+
( 4573)      1           A2*(DA3ETP*DA1ETN-DA1ETP*DA3ETN)+
( 4574)      2           A3*(DA1ETP*DA2ETN-DA1ETN*DA2ETP))/DETERM
( 4575) C
( 4576) C
( 4577)         DETAP = -1.0*(A1*(DA2ETN*DA3DN-DA2DN*DA3ETN)+
( 4578)      1          A2*(DA1DN*DA3ETN-DA1ETN*DA3DN)+
( 4579)      2          A3*(DA1ETN*DA2DN-DA1DN*DA2ETN))/DETERM
( 4580) C
( 4581) C
( 4582)         DETAN = -1.0*(A1*(DA2DN*DA3ETP-DA2ETP*DA3DN)+
( 4583)      1          A2*(DA1ETP*DA3DN-DA1DN*DA3ETP)+
( 4584)      2          A3*(DA1DN*DA2ETP-DA1ETP*DA2DN))/DETERM
( 4585) C
( 4586) C23456789012345678901234567890123456789012345678901234567890123456789012
( 4587) C
( 4588) C
( 4589) C
( 4590) C
( 4591) C                        Check the step size in NSUBI
( 4592)         IF(ABS(DNSUBI/NSUBI).GT.0.04) THEN
( 4593)           DNSUBI = 0.04*DNSUBI*NSUBI/ABS(DNSUBI)
( 4594)         ENDIF
( 4595)  26     CONTINUE
( 4596)         NSUBIN = NSUBI+DNSUBI
( 4597)         IF((NSUBIN.LT.DMAX1(4.5D-2,BRYDNS)).OR.(NSUBIN.GT.0.25)) THEN
( 4598)           DNSUBI = 0.5*DNSUBI
( 4599)           GOTO 26
( 4600)         ENDIF
( 4601) C
( 4602) C                        Check the step size in ETA_PO
( 4603)         IF(ABS(DETAP).GT.4.0) THEN






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 94

( 4604)           DETAP = 4.0*DETAP/ABS(DETAP)
( 4605)         ENDIF
( 4606)  27     CONTINUE
( 4607)         NETAP = ETA_PO+DETAP
( 4608)         IF((NETAP.LT.-5000.0).OR.(NETAP.GT.ETAMAX)) THEN
( 4609)           DETAP = 0.5*DETAP
( 4610)           GOTO 27
( 4611)         ENDIF
( 4612) C
( 4613) C                        Check the step size in ETA_NO
( 4614)         IF(ABS(DETAN).GT.4.0) THEN
( 4615)           DETAN = 4.0*DETAN/ABS(DETAN)
( 4616)         ENDIF
( 4617)  28     CONTINUE
( 4618)         NETAN = ETA_NO+DETAN
( 4619)         IF((NETAN.LT.-5000.0).OR.(NETAN.GT.ETAMAX)) THEN
( 4620)           DETAN = 0.5*DETAN
( 4621)           GOTO 28
( 4622)         ENDIF
( 4623) C
( 4624) C
( 4625) C                        Update the variables
( 4626) ccc        if(i.lt.30) write(*,1205) i,nsubi,eta_no,eta_po,x,u_nuc
( 4627)  1205   format(i3,9(1pe21.14))
( 4628) c
( 4629)         NSUBI = NSUBI+DNSUBI
( 4630)         ETA_PO = ETA_PO+DETAP
( 4631)         ETA_NO = ETA_NO+DETAN
( 4632) C
( 4633) C
( 4634) C
( 4635) C                        If the required tolarences have been met
( 4636) C                        break out of the loop
( 4637)         IF((ABS(DNSUBI).LT.NSIACC).AND.(ABS(DETAP).LT.PRTACC)
( 4638)      1    .AND.(ABS(DETAN).LT.NUTACC) ) THEN
( 4639)           GOTO 40
( 4640)         ELSE
( 4641)       IF(DBFLAG.EQ.1) THEN
( 4642)         WRITE(*,2000) '2',i,NSUBI,ETA_PO,ETA_NO,DNSUBI
( 4643)       ENDIF
( 4644)           GOTO 30
( 4645)         ENDIF
( 4646) C
( 4647) C
( 4648)  29     CONTINUE
( 4649)         IF(NEWFLG.NE.1) THEN
( 4650)           cflag = cflag+1
( 4651)           DNSUBI = 0.5*DNSUBI
( 4652)           NSUBI = NSUBI-DNSUBI
( 4653)           DETAP = 0.5*DETAP
( 4654)           ETA_PO = ETA_PO-DETAP
( 4655)           DETAN = 0.5*DETAN
( 4656)           ETA_NO = ETA_NO-DETAN
( 4657)           IF(DBFLAG.EQ.1) THEN
( 4658)             WRITE(*,2000) '3',i,NSUBI,ETA_PO,ETA_NO,DNSUBI
( 4659)           ENDIF
( 4660)           GOTO 30
( 4661)         ELSE






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 95

( 4662)           NSUBI = NSUBS
( 4663) cc          ETA_PO = ETA_PO-0.5/T
( 4664) cc          ETA_NO = ETA_NO-0.5/T
( 4665)           ETA_PO = ETA_PO-2.0/T
( 4666)           ETA_NO = ETA_NO-2.0/T
( 4667)         ENDIF
( 4668) C
( 4669) C
( 4670)       IF(DBFLAG.EQ.1) THEN
( 4671)         WRITE(*,2000) '4',i,NSUBI,ETA_PO,ETA_NO,DNSUBI
( 4672)       ENDIF
( 4673)  2000   FORMAT(t2,a,1x,i3,1x,f8.5,3(1X,G13.5))
( 4674) C
( 4675) C
( 4676)  30   CONTINUE
( 4677) C
( 4678) C            If scheme 1 has failed try scheme 2
( 4679)       if(schflg.eq.0) then
( 4680)         schflg = 1
( 4681)         goto 5
( 4682)       endif
( 4683) c
( 4684) c
( 4685)       SSFLAG = 0
( 4686)       GOTO 999
( 4687) C
( 4688) C                    Branch label to break out of DO 30 iteration
( 4689)  40   CONTINUE
( 4690) C
( 4691) C
( 4692) C                    The following logic determines whether this was
( 4693) C                    the correct scheme to use, and if not then which
( 4694) C                    one should be used
( 4695) C
( 4696)       if(ftflag.ne.0) then
( 4697)         ssflag = 4
( 4698)         goto 999
( 4699)       endif
( 4700) C
( 4701) C                    If calculated critical temperature is less than T,
( 4702) C                    then switch to the scheme with no nuclei
( 4703)       IF(T.GE.TSUBC) THEN
( 4704) C                    Set flag to indicate FAILURE
( 4705)         SSFLAG = 0
( 4706)         GOTO 999
( 4707)       ENDIF
( 4708) C
( 4709) C
( 4710) C                    If fraction of nuclei present is zero and no switch
( 4711) C                    has been made then switch to the no nuclei scheme
( 4712)       IF(U_NUC.LE.0.0) THEN
( 4713) C                    Set flag to indicate FAILURE
( 4714)         SSFLAG = 0
( 4715)         GOTO 999
( 4716)       ELSEIF(U_NUC.GT.1.0) THEN
( 4717) C                    Set flag to indicate FAILURE
( 4718)         SSFLAG = 0
( 4719)         GOTO 999






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 96

( 4720)       ELSE
( 4721) C                    Set flag to indicate success
( 4722)         SSFLAG = 1
( 4723)       ENDIF
( 4724) C
( 4725) C
( 4726) C
( 4727) C                    If eqns aren't really zeroed then fail
( 4728) C
( 4729) C
( 4730)       IF( (ABS(A1).GT.1.0D-5).OR.(ABS(A2).GT.1.0D-5).OR.
( 4731)      1    (ABS(A3).GT.1.0D-5) ) THEN
( 4732)         SSFLAG = 0
( 4733) cc        WRITE(*,*) ' NUCEOS: False convg; A = ',A1,A2,A3
( 4734)         GOTO 999
( 4735)       ENDIF
( 4736) C
( 4737) C
( 4738) C
( 4739) C
( 4740) C      IF(NSUBI.LT.0.05) THEN
( 4741) C        WRITE(*,*) 'NUCEOS:: <<WARNING>> NSUBI GETTING CLOSE TO LB'
( 4742) C      ENDIF
( 4743) C
( 4744) C
( 4745) C
( 4746)       ZNI = 2.0*(PI**2)*NSUBI*(1.0-X)/MQ
( 4747) C
( 4748)       ZPI = 2.0*(PI**2)*NSUBI*X/MQ
( 4749) C
( 4750)       ETA_NI = FINV12(ZNI)
( 4751) C
( 4752)       ETA_PI = FINV12(ZPI)
( 4753) C
( 4754)       MUN_I = T*ETA_NI+VNI
( 4755) C
( 4756)       MUP_I = T*ETA_PI+VPI
( 4757) C
( 4758)       F32_NI = F_3_2(ETA_NI)
( 4759) C
( 4760)       F32_PI = F_3_2(ETA_PI)
( 4761) C
( 4762)       EXCLU = 1.0-U_NUC
( 4763)       EXALFA = 1.0-ALFDNS*V_ALFA
( 4764) C
( 4765) C
( 4766) C
( 4767) C                    Calculate particle fractions
( 4768) C
( 4769)       XALFA = 4.0*EXCLU*ALFDNS/BRYDNS
( 4770)       XNUT = NNOUT*EXCLU*EXALFA/BRYDNS
( 4771)       XPROT = NPOUT*EXCLU*EXALFA/BRYDNS
( 4772)       XH = 1.0-XPROT-XNUT-XALFA
( 4773)       XHCHK = U_NUC*NSUBI/BRYDNS
( 4774) C
( 4775)       IF((XH.LT.HEAVCT).OR.(XHCHK.LT.HEAVCT)) THEN
( 4776) C                    Set flag to indicate switch is being made
( 4777)         SSFLAG = 0






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 97

( 4778) cc        write(*,*) ' xh,xhchk = ',xh,xhchk
( 4779)         GOTO 999
( 4780)       ENDIF
( 4781) C
( 4782)       IF((XALFA.LT.0.0).OR.(XH.LT.0.0).OR.
( 4783)      1   (XNUT.LT.0.0).OR.(XPROT.LT.0.0)) THEN
( 4784)         SSFLAG = 0
( 4785)         write(*,*) ' Xs hnpa = ',xh,xnut,xprot,xalfa
( 4786)         GOTO 999
( 4787)       ENDIF
( 4788) C
( 4789) C
( 4790) C
( 4791) C
( 4792) C                    Baryons
( 4793) C
( 4794) C
( 4795)       MUPROT = MUP_O
( 4796)       MUN = MUN_O
( 4797)       MUHAT = MUN-MUPROT
( 4798) C
( 4799) C
( 4800)       IF(ABS((XH-XHCHK)/XHCHK).GT.1.0D-4) THEN
( 4801)         SSFLAG = 0
( 4802)         GOTO 999
( 4803) CCC        WRITE(*,*) ' INCONSISTENCEY IN XH AT',T,BRYDNS,YE,XH,XHCHK
( 4804)       ENDIF
( 4805) C
( 4806)       NUCDNS = BRYDNS*XH
( 4807) C
( 4808)       TAU_PO = KQ*F32_PO
( 4809)       TAU_PI = KQ*F32_PI
( 4810) C
( 4811)       TAU_NO = KQ*F32_NO
( 4812)       TAU_NI = KQ*F32_NI
( 4813) C
( 4814)       IF(NOUT.GT.0.0) XOUT = NPOUT/NOUT
( 4815) C
( 4816) C
( 4817) C                    Calculate internal energy of outside nucleons,
( 4818) C                    alpha particles, and nuclei (per baryon)
( 4819) C
( 4820) c20      BUOUT = (EXCLU*EXALFA/BRYDNS)*( UQ*(TAU_PO+TAU_NO)+EIFLAG*
( 4821) c20     1    ( (NOUT**2)*AA+4.0*BB*NPOUT*NNOUT+
( 4822) c20     2    CC*NOUT**(1.0+DD)+NPOUT*DELTAM) )
( 4823)       BUOUT = (EXCLU*EXALFA/BRYDNS)*(
( 4824)      1    UQ*(TAU_PO+TAU_NO)+EIFLAG*PV_E(NPOUT,NNOUT) )
( 4825) C
( 4826) c20      BUNUC = XH*( ( UQ*(TAU_PI+TAU_NI)+(NSUBI**2)*
( 4827) c20     1 (AA+4.0*BB*X*(1.0-X))+CC*NSUBI**(1.0+DD)+X*NSUBI*DELTAM )/
( 4828) c20     2 NSUBI)+FSUBSC*(1.0-T*(SCRDUT/SCRDU+OVR23*HPRIM/H))+
( 4829) c20     3 TRSCAL*
( 4830) c20     4 (1.0-U_NUC)*XH*(FTRANS*(1.0-T*HPRIM/H)-H*(MUSUBT-2.5*T)/AZERO)
( 4831)       BUNUC = XH*( (UQ*(TAU_PI+TAU_NI)+PV_E(X*NSUBI,(1.0-X)*NSUBI))/
( 4832)      2 NSUBI)+FSUBSC*(1.0-T*(SCRDUT/SCRDU+OVR23*HPRIM/H))+
( 4833)      3 TRSCAL*
( 4834)      4 (1.0-U_NUC)*XH*(FTRANS*(1.0-T*HPRIM/H)-H*(MUSUBT-2.5*T)/AZERO)
( 4835) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 98

( 4836) C
( 4837)       BUALFA = 0.25*XALFA*(1.5*T-BALPHA)
( 4838) C
( 4839)       BU = BUOUT+BUALFA+BUNUC
( 4840) C
( 4841) C
( 4842)       BSOUT = (EXCLU*EXALFA/BRYDNS)*( (5.0*UQ/(3.0*T))*(TAU_NO+TAU_PO)-
( 4843)      1 NNOUT*ETA_NO-NPOUT*ETA_PO )
( 4844) C
( 4845) C
( 4846) C                    Calculate entropy of alpha particles (per baryon)
( 4847)       BSALFA = -0.25*XALFA*(MUALFA/T-2.5)
( 4848) C
( 4849) C
( 4850)       BSNUC = XH*( (5.0*UQ/(3.0*T))*(TAU_NI+TAU_PI)-
( 4851)      1 NSUBI*(1.0-X)*ETA_NI-NSUBI*X*ETA_PI )/NSUBI-
( 4852)      2 FSUBSC*(SCRDUT/SCRDU+OVR23*HPRIM/H)-
( 4853)      3 XH*TRSCAL*(1.0-U_NUC)*
( 4854)      4 ((FTRANS*HPRIM/H)+H*(MUSUBT/T-2.5)/AZERO)
( 4855) C
( 4856) C                    Calculate total baryon entropy (per baryon)
( 4857)       BS = BSOUT+BSNUC+BSALFA
( 4858) C
( 4859) C                    Calculate free energy of outside nucleons (per bary
( 4860)       BFOUT = BUOUT-T*BSOUT
( 4861) C
( 4862) C                    Calculate free energy of alpha particles (per baryo
( 4863)       BFALFA = BUALFA-T*BSALFA
( 4864) C
( 4865) C                    Calculate free energy of nuclei (per baryon)
( 4866)       BFNUC = BUNUC-T*BSNUC
( 4867) C
( 4868) C                    Calculate total baryon free energy (per baryon)
( 4869)       BFTOT = BFOUT+BFNUC+BFALFA
( 4870) C
( 4871) C                    Calculate pressure due to nuclei
( 4872)       BPRNUC = -ZETA*(SCRDU-U_NUC*SCRDUP)+
( 4873)      1 TRSCAL*U_NUC*NSUBI*H*((1.0-U_NUC)*T-U_NUC*MUSUBT)/AZERO
( 4874) C
( 4875) C
( 4876) C                    Calculate total baryon pressure
( 4877)       BPRESS = BPROUT+BPRALF+BPRNUC
( 4878) C
( 4879) C
( 4880) C                    Leptons & Photons
( 4881) C
( 4882)       CALL EL_EOS(T,YE,BRYDNS)
( 4883) C
( 4884) C
( 4885) C
( 4886) C                    Total pressure and eng/ent per baryon
( 4887) C
( 4888)       FBARY = BFTOT+FSUBE
( 4889)       PBARY = BPRESS+EPRESS
( 4890)       MUBARY = YE*MUPROT+(1.0-YE)*MUN
( 4891)       MU_MAT = YE*(MUPROT+MUSUBE)+(1.0-YE)*MUN
( 4892) C
( 4893)       FTOT = BFTOT+FSUBE+PF






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 99

( 4894)       UTOT = BU+EU+PU
( 4895)       STOT = BS+ES+PS
( 4896)       PTOT = BPRESS+EPRESS+PPRESS
( 4897) C
( 4898) C
( 4899) C23456789012345678901234567890123456789012345678901234567890123456789012
( 4900) C-----------------------------------------------------------------------
( 4901) C                Derivatives of thermodynamic variables
( 4902) C-----------------------------------------------------------------------
( 4903) C
( 4904) C                 ------------------------------------
( 4905) C                 !      Derivatives of exterior     !
( 4906) C                 !      quantities                  !
( 4907) C                 !      (w.r.t. Temp. and ETA's)    !
( 4908) C                 !                                  !
( 4909) C                 ------------------------------------
( 4910) C
( 4911) C
( 4912) C                  Derivatives of exterior potentials
( 4913) C                  w.r.t. particle densities
( 4914) c20      DVPODP = EIFLAG*(2.0*AA+DD*(1.0+DD)*CC*(NOUT**(DD-1.0)) )
( 4915)       DVPODP = EIFLAG*DPVPDP(NPOUT,NNOUT)
( 4916) c20      DVPODN = EIFLAG*(2.0*AA+4.0*BB+DD*(1.0+DD)*CC*(NOUT**(DD-1.0)))
( 4917)       DVPODN = EIFLAG*DPVPDN(NPOUT,NNOUT)
( 4918) c20      DVNODP = DVPODN
( 4919)       DVNODP = EIFLAG*DPVNDP(NPOUT,NNOUT)
( 4920) c20      DVNODN = DVPODP
( 4921)       DVNODN = EIFLAG*DPVNDN(NPOUT,NNOUT)
( 4922) C
( 4923) C
( 4924) C                  Derviatives of exterior chem. pot. w.r.t. ETA's
( 4925) C                  (at fixed T)
( 4926)       DMPDEP = T+DVPODP*NPOUT/GPO
( 4927)       DMPDEN = DVPODN*NNOUT/GNO
( 4928)       DMNDEP = DVNODP*NPOUT/GPO
( 4929)       DMNDEN = T+DVNODN*NNOUT/GNO
( 4930) C
( 4931) C                  Derivatives of pressure potential w.r.t.
( 4932) C                  particle densities
( 4933) c20      DV_DPO = EIFLAG*
( 4934) c20     1    (2.0*AA*NOUT+4.0*BB*NNOUT+CC*DD*(1.0+DD)*(NOUT**DD) )
( 4935)       DV_DPO = EIFLAG*DPVRDP(NPOUT,NNOUT)
( 4936) c20      DV_DNO = EIFLAG*
( 4937) c20     1    (2.0*AA*NOUT+4.0*BB*NPOUT+CC*DD*(1.0+DD)*(NOUT**DD) )
( 4938)       DV_DNO = EIFLAG*DPVRDN(NPOUT,NNOUT)
( 4939) C
( 4940) C                  Derivatives of pressure potential w.r.t. ETA's
( 4941) C                  (at fixed T)
( 4942)       DV_DEP = DV_DPO*NPOUT/GPO
( 4943)       DV_DEN = DV_DNO*NNOUT/GNO
( 4944) C
( 4945) C                  Derivatives of outside pressure w.r.t. ETA's
( 4946) C                  (at fixed T)
( 4947)       DPODEP = NPOUT*T+DV_DEP
( 4948)       DPODEN = NNOUT*T+DV_DEN
( 4949) C
( 4950) C                  Derivatives of alpha density w.r.t. ETA's
( 4951) C                  (at fixed T)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 100

( 4952)       DNADEP = ALFDNS*(2.0*DMPDEP+2.0*DMNDEP-V_ALFA*DPODEP)/T
( 4953)       DNADEN = ALFDNS*(2.0*DMPDEN+2.0*DMNDEN-V_ALFA*DPODEN)/T
( 4954) C
( 4955) C                  Derivatives of alpha pressure w.r.t. ETA's
( 4956) C                  (at fixed T)
( 4957)       DPADEP = T*DNADEP
( 4958)       DPADEN = T*DNADEN
( 4959) C
( 4960) C                  Derivatives of particle densities w.r.t. T
( 4961) C                  (at fixed ETA's)
( 4962)       DNPODT = 1.5*NPOUT/T
( 4963)       DNNODT = 1.5*NNOUT/T
( 4964) C
( 4965) C                  Derivatives of exterior chem. pot. w.r.t. T
( 4966) C                  (at fixed ETA's)
( 4967)       DMPODT = ETA_PO+DVPODP*DNPODT+DVPODN*DNNODT
( 4968)       DMNODT = ETA_NO+DVNODP*DNPODT+DVNODN*DNNODT
( 4969) C
( 4970) C                  Derivative of pressure potential w.r.t. T
( 4971) C                  (at fixed ETA's)
( 4972)       DV_DT = DV_DPO*DNPODT+DV_DNO*DNNODT
( 4973) C
( 4974) C                  Derivative of outside pressure w.r.t. T
( 4975) C                  (at fixed ETA's)
( 4976)       DPODT = OVR23*UQ*2.5*(TAU_PO+TAU_NO)/T+DV_DT
( 4977) C
( 4978) C                  Derivative of alpha chem. pot. w.r.t. T
( 4979) C                  (at fixed ETA's)
( 4980)       DMUADT = 2.0*DMPODT+2.0*DMNODT-V_ALFA*DPODT
( 4981) C
( 4982) C                  Derivative of alpha particle density w.r.t. T
( 4983) C                  (at fixed ETA's)
( 4984)       DNADT = 1.5*ALFDNS/T-ALFDNS*MUALFA/(T**2)+ALFDNS*DMUADT/T
( 4985) C
( 4986) C                  Derivative of alpha particle pressure w.r.t. T
( 4987) C                  (at fixed ETA's)
( 4988)       DPADT = ALFDNS+T*DNADT
( 4989) C
( 4990) C
( 4991) C                 ------------------------------------
( 4992) C                 !      Derivatives of interior     !
( 4993) C                 !      quantities                  !
( 4994) C                 !      (w.r.t. Temp. and density)  !
( 4995) C                 !                                  !
( 4996) C                 ------------------------------------
( 4997) C
( 4998) C
( 4999) C                   Derivatives of kinetic energy densities w.r.t. T
( 5000) C                   (holding the number densities (X & NSUBI) fixed)
( 5001)       DTPIDT =2.5*TAU_PI/T-2.25*X*NSUBI*GPI/UQ
( 5002)       DTNIDT =2.5*TAU_NI/T-2.25*(1.0-X)*NSUBI*GNI/UQ
( 5003) C
( 5004) C                   Derivatives of pressures w.r.t. T
( 5005) C                   (holding the number densities (X & NSUBI) fixed)
( 5006)       DPIDT = OVR23*UQ*(DTPIDT+DTNIDT)
( 5007) C
( 5008) C                   Derivatives of interior chem. pot. w.r.t. T
( 5009) C                   (holding the number densities (X & NSUBI) fixed)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 101

( 5010)       DMPIDT = ETA_PI-1.5*GPI
( 5011)       DMNIDT = ETA_NI-1.5*GNI
( 5012) C
( 5013) C
( 5014) C                  Derivatives of inside potentials w.r.t.
( 5015) C                  interior proton and neutron densities
( 5016) C                  (at fixed T)
( 5017) c20      DVPIDP = 2.0*AA+DD*(1.0+DD)*CC*(NSUBI**(DD-1.0))
( 5018)       DVPIDP = DPVPDP(X*NSUBI,(1.0-X)*NSUBI)
( 5019) c20      DVPIDN = 2.0*AA+4.0*BB+DD*(1.0+DD)*CC*(NSUBI**(DD-1.0))
( 5020)       DVPIDN = DPVPDN(X*NSUBI,(1.0-X)*NSUBI)
( 5021) c20      DVNIDP = DVPIDN
( 5022)       DVNIDP = DPVNDP(X*NSUBI,(1.0-X)*NSUBI)
( 5023) c20      DVNIDN = DVPIDP
( 5024)       DVNIDN = DPVNDN(X*NSUBI,(1.0-X)*NSUBI)
( 5025) C
( 5026) C
( 5027) C                   Derivatives of interior chemical potentials
( 5028) C                   w.r.t. interior neutron and proton densities
( 5029) C                  (at fixed T)
( 5030)       DMPIDP = T*GPI/(X*NSUBI)+DVPIDP
( 5031)       DMPIDN = DVPIDN
( 5032)       DMNIDP = DVNIDP
( 5033)       DMNIDN = T*GNI/((1.0-X)*NSUBI)+DVNIDN
( 5034) C
( 5035) C                   Derivatives of interior pressure
( 5036) C                   w.r.t. interior neutron and proton densities
( 5037) C                  (at fixed T)
( 5038)       DPIDP = X*NSUBI*DMPIDP+(1.0-X)*NSUBI*DMNIDP
( 5039)       DPIDN = X*NSUBI*DMPIDN+(1.0-X)*NSUBI*DMNIDN
( 5040) C
( 5041) C
( 5042) C
( 5043) C
( 5044) C                 ------------------------------------
( 5045) C                 !      Derivatives of "B" terms    !
( 5046) C                 !      from the chemical and       !
( 5047) C                 !      pressure equilibrium        !
( 5048) C                 !      equations                   !
( 5049) C                 !                                  !
( 5050) C                 !      (w.r.t. Temperature )       !
( 5051) C                 !                                  !
( 5052) C                 ------------------------------------
( 5053) C
( 5054) C
( 5055) C             Derivative of term from pressure equilibrium eqn.
( 5056) C
( 5057)       DB1DT = OVR23*ZETA*(SCRDUP-OVR23*SCRD)*HPRIM/H+
( 5058)      1    ZETA*(SCRDPT-OVR23*SCRDT)-
( 5059)      2    TRSCAL*U_NUC*NSUBI*(HPRIM*MUSUBT+H*DMUTDT)/AZERO
( 5060) C
( 5061) C
( 5062) C             Derivative of term from proton equilibrium eqn.
( 5063) C
( 5064)       TMP4 = (SIGSGP+DHDX/H+1.5*SCRDUX/SCRDU)*(X-1.0)-1.0/X
( 5065)       TMP5 = DHDTDX/H-DHDX*HPRIM/H**2+
( 5066)      1 1.5*SCRDXT/SCRDU-1.5*SCRDUX*SCRDUT/SCRDU**2
( 5067) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 102

( 5068)       DB2DT = OVR49*(ZETA*SCRD*HPRIM/(H*NSUBI))*TMP4+
( 5069)      1    OVR23*ZETA*SCRDT*TMP4/NSUBI+
( 5070)      2    OVR23*(ZETA*SCRD/NSUBI)*(X-1.0)*TMP5-
( 5071)      3    TRSCAL*EXCLU*(DMUTDT*(H+DHDX*(1.0-X))+MUSUBT*
( 5072)      4    (HPRIM+DHDTDX*(1.0-X))-DHDX*(1.0-X)-T*DHDX*(1.0-X))/AZERO
( 5073) C
( 5074) C23456789012345678901234567890123456789012345678901234567890123456789012
( 5075) C
( 5076) C
( 5077) C             Derivative of term from neutron equilibrium eqn.
( 5078) C
( 5079)       TMP4 = SIGSGP+DHDX/H+1.5*SCRDUX/SCRDU
( 5080)       TMP5 = DHDTDX/H-DHDX*HPRIM/H**2+
( 5081)      1 1.5*SCRDXT/SCRDU-1.5*SCRDUX*SCRDUT/SCRDU**2
( 5082)       DB3DT = OVR49*(ZETA*SCRD*HPRIM/(H*NSUBI))*X*TMP4+
( 5083)      1        OVR23*(ZETA*SCRDT/NSUBI)*X*TMP4+
( 5084)      2        OVR23*(ZETA*SCRD/NSUBI)*X*TMP5-
( 5085)      3        TRSCAL*EXCLU*(HPRIM*MUSUBT+H*DMUTDT-X*DHDTDX*(MUSUBT-T)-
( 5086)      4        X*DHDX*(DMUTDT-1.0))/AZERO
( 5087) C
( 5088) C
( 5089) C
( 5090) C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
( 5091) C
( 5092) C
( 5093) C
( 5094) C                 ------------------------------------
( 5095) C                 !      Derivatives of constraint   !
( 5096) C                 !      and equilibrium equations   !
( 5097) C                 !      with respect to the five    !
( 5098) C                 !      compositional variables     !
( 5099) C                 !      (U,x,n_i,eta_po,eta_no)     !
( 5100) C                 !      and the three independent   !
( 5101) C                 !      variables                   !
( 5102) C                 !      (Baryon density, T, and Ye) !
( 5103) C                 !                                  !
( 5104) C                 ------------------------------------
( 5105) C
( 5106) C23456789012345678901234567890123456789012345678901234567890123456789012
( 5107) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5108) C
( 5109) C                Equation 1 (Baryon conservation)
( 5110) C
( 5111)       DFDOM(1,1) = NOUT*EXALFA+4.0*ALFDNS-NSUBI
( 5112) C
( 5113)       DFDOM(1,2) = 0.0
( 5114) C
( 5115)       DFDOM(1,3) = -U_NUC
( 5116) C
( 5117)       DFDOM(1,4) = -EXCLU*EXALFA*NPOUT/GPO+
( 5118)      1             V_ALFA*DNADEP*EXCLU*NOUT-4.0*EXCLU*DNADEP
( 5119) C
( 5120)       DFDOM(1,5) = -EXCLU*EXALFA*NNOUT/GNO+
( 5121)      1             V_ALFA*DNADEN*EXCLU*NOUT-4.0*EXCLU*DNADEN
( 5122) C
( 5123) C
( 5124) C
( 5125)       DFDL_1(1) = -1.0






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 103

( 5126) C
( 5127)       DFDL_2(1) = EXCLU*EXALFA*(DNPODT+DNNODT)-EXCLU*V_ALFA*NOUT*DNADT+
( 5128)      1     4.0*EXCLU*DNADT
( 5129) C
( 5130)       DFDL_3(1) = 0.0
( 5131) C
( 5132) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5133) C
( 5134) C                Equation 2 (Charge conservation)
( 5135) C
( 5136)       DFDOM(2,1) = EXALFA*NPOUT+2.0*ALFDNS-X*NSUBI
( 5137) C
( 5138)       DFDOM(2,2) = -U_NUC*NSUBI
( 5139) C
( 5140)       DFDOM(2,3) = -X*U_NUC
( 5141) C
( 5142)       DFDOM(2,4) = -EXCLU*EXALFA*NPOUT/GPO+
( 5143)      1     V_ALFA*EXCLU*NPOUT*DNADEP-2.0*EXCLU*DNADEP
( 5144) C
( 5145)       DFDOM(2,5) = V_ALFA*EXCLU*NPOUT*DNADEN-2.0*EXCLU*DNADEN
( 5146) C
( 5147) C
( 5148) C
( 5149)       DFDL_1(2) = -1.0*YE
( 5150) C
( 5151)       DFDL_2(2) = EXCLU*EXALFA*DNPODT-V_ALFA*EXCLU*NPOUT*DNADT+
( 5152)      1     2.0*EXCLU*DNADT
( 5153) C
( 5154)       DFDL_3(2) = -1.0*BRYDNS
( 5155) C
( 5156) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5157) C
( 5158) C                Equation 3 (Proton chemical equilibrium)
( 5159) C
( 5160)       DFDOM(3,1) = -DB2DU
( 5161) C
( 5162)       DFDOM(3,2) = NSUBI*(DMPIDP-DMPIDN)-DB2DX
( 5163) C
( 5164)       DFDOM(3,3) = (1.0-X)*DMPIDN+X*DMPIDP-DB2DNI
( 5165) C
( 5166)       DFDOM(3,4) = -DMPDEP
( 5167) C
( 5168)       DFDOM(3,5) = -DMPDEN
( 5169) C
( 5170)       DFDL_1(3) = 0.0
( 5171)       DFDL_2(3) = -1.0*(DMPIDT-DMPODT-DB2DT)
( 5172)       DFDL_3(3) = 0.0
( 5173) C
( 5174) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5175) C
( 5176) C                Equation 4 (Neutron chemical equilibrium)
( 5177) C
( 5178)       DFDOM(4,1) = -DB3DU
( 5179) C
( 5180)       DFDOM(4,2) = NSUBI*(DMNIDP-DMNIDN)-DB3DX
( 5181) C
( 5182)       DFDOM(4,3) = (1.0-X)*DMNIDN+X*DMNIDP-DB3DNI
( 5183) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 104

( 5184)       DFDOM(4,4) = -DMNDEP
( 5185) C
( 5186)       DFDOM(4,5) = -DMNDEN
( 5187) C
( 5188)       DFDL_1(4) = 0.0
( 5189)       DFDL_2(4) = -1.0*(DMNIDT-DMNODT-DB3DT)
( 5190)       DFDL_3(4) = 0.0
( 5191) C
( 5192) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5193) C
( 5194) C                Equation 5 (Pressure equilibrium)
( 5195) C
( 5196)       DFDOM(5,1) = -DB1DU
( 5197) C
( 5198)       DFDOM(5,2) = NSUBI*(DPIDP-DPIDN)-DB1DX
( 5199) C
( 5200)       DFDOM(5,3) = (1.0-X)*DPIDN+X*DPIDP-DB1DNI
( 5201) C     ncomp = dfdom(5,3)
( 5202) C
( 5203)       DFDOM(5,4) = -DPODEP-DPADEP
( 5204) C
( 5205)       DFDOM(5,5) = -DPODEN-DPADEN
( 5206) C
( 5207)       DFDL_1(5) = 0.0
( 5208)       DFDL_2(5) = -1.0*(DPIDT-DPODT-DPADT-DB1DT)
( 5209)       DFDL_3(5) = 0.0
( 5210) C
( 5211) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5212) C
( 5213) c      write(*,*) ' '
( 5214) cc      write(*,*) ' '
( 5215) cc      write(*,7010) db1dx,db2dx,db3dx
( 5216) cc      write(*,7010) db1du,db2du,db3du
( 5217) cc      write(*,7010) db1dni,db2dni,db3dni
( 5218) cc      write(*,7010) db1dt,db2dt,db3dt
( 5219)  7010 format(3(1x,g13.6))
( 5220) c      write(*,7000) x,u_nuc,nsubi,eta_po,eta_no
( 5221) c      write(*,*) 'eta_i ',eta_pi,eta_ni
( 5222) c      write(*,*) ' as ',a1,a2,a3
( 5223) c      write(*,*) ' '
( 5224) c      write(*,7000) (dfdom(1,i),i=1,5,1)
( 5225) c      write(*,7000) (dfdom(2,i),i=1,5,1)
( 5226) c      write(*,7000) (dfdom(3,i),i=1,5,1)
( 5227) c      write(*,7000) (dfdom(4,i),i=1,5,1)
( 5228) c      write(*,7000) (dfdom(5,i),i=1,5,1)
( 5229) c      write(*,*) ' '
( 5230) cc      write(*,*) ' dna: ',dnadpo,dnadno
( 5231) cc      write(*,*) ' dt: ',dmpidt,dmpodt
( 5232) c      write(*,7000) (dfdl_1(i),i=1,5,1)
( 5233)  7000 format(5(1x,g13.6))
( 5234) c
( 5235) c      pause
( 5236) C                    Invert the DFDOM matrix
( 5237) C
( 5238)       CALL MATINV(DFDOM,DFDOMI,5)
( 5239) C  IMSL subroutine call to invert the matrix
( 5240) CCC      CALL DLINRG(5,DFDOM,5,DFDOMI,5)
( 5241) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 105

( 5242) cc      call matmul(dfdom,dfdomi,a_tmp,5,5,5)
( 5243) c
( 5244) cc      write(*,*) ' '
( 5245) cc      write(*,7000) (a_tmp(1,i),i=1,5,1)
( 5246) cc      write(*,7000) (a_tmp(2,i),i=1,5,1)
( 5247) cc      write(*,7000) (a_tmp(3,i),i=1,5,1)
( 5248) cc      write(*,7000) (a_tmp(4,i),i=1,5,1)
( 5249) cc      write(*,7000) (a_tmp(5,i),i=1,5,1)
( 5250) c
( 5251) cc      write(*,7000) (dfdomi(1,i),i=1,5,1)
( 5252) cc      write(*,7000) (dfdomi(2,i),i=1,5,1)
( 5253) cc      write(*,7000) (dfdomi(3,i),i=1,5,1)
( 5254) cc      write(*,7000) (dfdomi(4,i),i=1,5,1)
( 5255) cc      write(*,7000) (dfdomi(5,i),i=1,5,1)
( 5256) cc      write(*,*) ' >>>>>>>>>>>>>>>    dfdl_2 <<<<<<<<<<<<<<<<< '
( 5257) cc      write(*,7000) (dfdl_2(i),i=1,5,1)
( 5258) cc      write(*,*) ' >>>>>>>>>>>>>>>    dfdl_2 <<<<<<<<<<<<<<<<< '
( 5259) c
( 5260) c      DO 800 LLI=1,5,1
( 5261) c        R_CHECK(LLI) = 0.0
( 5262) c        DO 801 KKI=1,5,1
( 5263) c          R_CHECK(LLI) = R_CHECK(LLI)+DFDOM(LLI,KKI)*RESULT(KKI)
( 5264) c 801    CONTINUE
( 5265) c        r_check(lli) = r_check(lli)-dfdl_1(lli)
( 5266) c 800  CONTINUE
( 5267) c      write(*,*) ' >>>>>>>>>>>>>>>    R check <<<<<<<<<<<<<<<<< '
( 5268) c      write(*,7000) (r_check(i),i=1,5,1)
( 5269) c
( 5270) C
( 5271) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5272) C
( 5273) C                    Multiply the DFDL_1 vector by the DFDOMI matrix
( 5274) C                    to get the density derivatives
( 5275) C
( 5276)       CALL MV_MUL(DFDOMI,DFDL_1,RESULT,5)
( 5277) C
( 5278)       DU_DN = RESULT(1)
( 5279)       DX_DN = RESULT(2)
( 5280)       DNI_DN = RESULT(3)
( 5281)       DEP_DN = RESULT(4)
( 5282)       DEN_DN = RESULT(5)
( 5283) C
( 5284) C
( 5285) C                    Multiply the DFDL_2 vector by the DFDOMI matrix
( 5286) C                    to get the Temperature derivatives
( 5287) C
( 5288)       CALL MV_MUL(DFDOMI,DFDL_2,RESULT,5)
( 5289) C
( 5290)       DU_DT = RESULT(1)
( 5291)       DX_DT = RESULT(2)
( 5292)       DNI_DT = RESULT(3)
( 5293)       DEP_DT = RESULT(4)
( 5294)       DEN_DT = RESULT(5)
( 5295) C
( 5296) C                    Multiply the DFDL_3 vector by the DFDOMI matrix
( 5297) C                    to get the Ye derivatives
( 5298) C
( 5299)       CALL MV_MUL(DFDOMI,DFDL_3,RESULT,5)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 106

( 5300) C
( 5301)       DU_DY = RESULT(1)
( 5302)       DX_DY = RESULT(2)
( 5303)       DNI_DY = RESULT(3)
( 5304)       DEP_DY = RESULT(4)
( 5305)       DEN_DY = RESULT(5)
( 5306) C
( 5307) C
( 5308) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5309) C
( 5310) C                 ------------------------------------
( 5311) C                 !      Derivatives of finite size  !
( 5312) C                 !      terms in the internal       !
( 5313) C                 !      energy and entropy          !
( 5314) C                 !      densities w.r.t. to U,X,n_i !
( 5315) C                 !      and T.  These are used in   !
( 5316) C                 !      calculating the derivatives !
( 5317) C                 !      w.r.t. the independant vars !
( 5318) C                 !      (Baryon density, T, and Ye) !
( 5319) C                 !                                  !
( 5320) C                 ------------------------------------
( 5321) C
( 5322) C                        Free energy Surface & Coulomb terms
( 5323) C                                  (Densities)
( 5324) C
( 5325)       F_SC = ZETA*SCRDU
( 5326) C
( 5327)       DFSCDU = ZETA*SCRDUP
( 5328) C
( 5329)       DFSCDX = ZETA*SCRDUX+SCRDU*DZDX
( 5330) C
( 5331)       DFSCDN = SCRDU*DZDNI
( 5332) C
( 5333)       DFSCDT = ZETA*SCRDUT+SCRDU*DZDT
( 5334) C
( 5335) C
( 5336) C                        Free energy translational terms
( 5337) C                                  (Densities)
( 5338)       FTR = U_NUC*EXCLU*NSUBI*FTRANS
( 5339) C
( 5340)       DFTRDT = FTR*(HPRIM/H+1.0/T)-
( 5341)      1    1.5*TRSCAL*U_NUC*EXCLU*NSUBI*H/AZERO
( 5342) C
( 5343)       DFTRDX = FTR*DHDX/H
( 5344) C
( 5345)       DFTRDU = FTR/U_NUC-FTR/EXCLU+
( 5346)      1    TRSCAL*NSUBI*H*(1.0-2.0*U_NUC)/AZERO
( 5347) C
( 5348)       DFTRDN = FTR/NSUBI+TRSCAL*U_NUC*EXCLU*H*T/AZERO
( 5349) C
( 5350) C\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
( 5351) C
( 5352) C                        Internal energy Surface & Coulomb terms
( 5353) C                                  (Densities)
( 5354) C
( 5355)       TMP4 = 1.0-T*SCRDUT/SCRDU-OVR23*T*HPRIM/H
( 5356) C
( 5357)       E_SC = F_SC*TMP4






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 107

( 5358) C
( 5359)       DESCDU = DFSCDU*TMP4+
( 5360)      1    F_SC*(T*SCRDUT*SCRDUP/SCRDU**2-T*SCRDPT/SCRDU)
( 5361) C
( 5362)       DESCDX = DFSCDX*TMP4+
( 5363)      1    F_SC*(T*SCRDUT*SCRDUX/SCRDU**2-T*SCRDXT/SCRDU+
( 5364)      2    OVR23*T*HPRIM*DHDX/H**2-OVR23*T*DHDTDX/H)
( 5365) C
( 5366)       DESCDN = DFSCDN*TMP4
( 5367) C
( 5368)       DESCDT = DFSCDT*TMP4+F_SC*
( 5369)      1   (T*(SCRDUT**2)/SCRDU**2-SCRDUT/SCRDU-T*SCRDTT/SCRDU+
( 5370)      2    OVR23*T*(HPRIM**2)/H**2-OVR23*HPRIM/H-OVR23*T*HPPRIM/H)
( 5371) C
( 5372) C                        Internal energy translational terms
( 5373) C                                  (Densities)
( 5374) C
( 5375)       TMP4 = 1.5*H*T/AZERO-T*HPRIM*(MUSUBT-T)/AZERO
( 5376) C
( 5377)       E_TR = TRSCAL*EXCLU*BRYDNS*XH*TMP4
( 5378) C
( 5379)       DETRDU = TRSCAL*(NSUBI*(1.0-2.0*U_NUC)*TMP4-
( 5380)      1    NSUBI*(T**2)*HPRIM*(1.0-2.0*U_NUC)/AZERO)
( 5381) C
( 5382)       DETRDX = TRSCAL*BRYDNS*XH*EXCLU*
( 5383)      1    (1.5*T*DHDX/AZERO-T*(MUSUBT-T)*DHDTDX/AZERO)
( 5384) C
( 5385)       DETRDN = TRSCAL*(U_NUC*EXCLU*TMP4-
( 5386)      1    BRYDNS*XH*EXCLU*(T**2)*HPRIM/(NSUBI*AZERO))
( 5387) C
( 5388)       DETRDT = TRSCAL*BRYDNS*XH*EXCLU*
( 5389)      1    (1.5*(H+T*HPRIM)/AZERO-(HPRIM+T*HPPRIM)*(MUSUBT-T)/AZERO-
( 5390)      2    T*HPRIM*(MUSUBT/T-2.5)/AZERO )
( 5391) C
( 5392) C\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
( 5393) C
( 5394) C                        Entropy Surface & Coulomb terms
( 5395) C                                  (Densities)
( 5396) C
( 5397)       S_SC = (E_SC-F_SC)/T
( 5398) C
( 5399)       DSSCDU = (DESCDU-DFSCDU)/T
( 5400) C
( 5401)       DSSCDX = (DESCDX-DFSCDX)/T
( 5402) C
( 5403)       DSSCDN = (DESCDN-DFSCDN)/T
( 5404) C
( 5405)       DSSCDT = (DESCDT-DFSCDT)/T-(E_SC-F_SC)/T**2
( 5406) C
( 5407) C                        Entropy translational terms
( 5408) C                                  (Densities)
( 5409) C
( 5410)       TMP4 = MUSUBT*(HPRIM+H/T)/AZERO-(T*HPRIM+2.5*H)/AZERO
( 5411) C
( 5412)       S_TR = -TRSCAL*BRYDNS*XH*EXCLU*TMP4
( 5413) C
( 5414)       DSTRDU = -TRSCAL*(NSUBI*(1.0-2.0*U_NUC)*TMP4+
( 5415)      1    NSUBI*T*(1.0-2.0*U_NUC)*(HPRIM+H/T)/AZERO)






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 108

( 5416) C
( 5417)       DSTRDX = -TRSCAL*BRYDNS*XH*EXCLU*
( 5418)      1    (MUSUBT*(DHDTDX+DHDX/T)/AZERO-
( 5419)      2    (T*DHDTDX+2.5*DHDX)/AZERO)
( 5420) C
( 5421)       DSTRDN = -TRSCAL*
( 5422)      1    (U_NUC*EXCLU*TMP4+U_NUC*EXCLU*T*(HPRIM+H/T)/AZERO)
( 5423) C
( 5424)       DSTRDT = -(BRYDNS*XH*EXCLU*((MUSUBT/T-1.5)*(HPRIM+H/T)/AZERO+
( 5425)      1    MUSUBT*(HPPRIM+HPRIM/T-H/T**2)/AZERO-
( 5426)      2    (3.5*HPRIM+T*HPPRIM)/AZERO ))*TRSCAL
( 5427) C
( 5428) C
( 5429) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5430) C
( 5431) C                 -------------------------------------
( 5432) C                 !      Derivatives of interior bulk !
( 5433) C                 !      terms in the internal        !
( 5434) C                 !      energy and entropy           !
( 5435) C                 !      densities w.r.t. to U,X,n_i  !
( 5436) C                 !      and T.  These are used in    !
( 5437) C                 !      calculating the derivatives  !
( 5438) C                 !      w.r.t. the independant vars  !
( 5439) C                 !      (Baryon density, T, and Ye)  !
( 5440) C                 !                                   !
( 5441) C                 -------------------------------------
( 5442) C
( 5443) C
( 5444) C
( 5445)       S_NUC =(OVR53*UQ/T)*(TAU_NI+TAU_PI)-
( 5446)      1    NSUBI*((1.0-X)*ETA_NI+X*ETA_PI)
( 5447) C
( 5448) c20      E_NUC = UQ*(TAU_PI+TAU_NI)+(NSUBI**2)*(AA+4.0*BB*X*(1.0-X))+
( 5449) c20     1    CC*NSUBI**(1.0+DD)+X*NSUBI*DELTAM
( 5450)       E_NUC = UQ*(TAU_PI+TAU_NI)+PV_E(X*NSUBI,(1.0-X)*NSUBI)
( 5451) C
( 5452) C
( 5453) C                    Interior particle densties
( 5454)       NPI = X*NSUBI
( 5455)       NNI = (1.0-X)*NSUBI
( 5456) C
( 5457)       DTPIDT = 2.5*TAU_PI/T-2.25*NPI*GPI/UQ
( 5458)       DTNIDT = 2.5*TAU_NI/T-2.25*NNI*GNI/UQ
( 5459) C
( 5460) C               Derivative of interior entropy density w.r.t. T
( 5461)       DSIDT = UQ*(DTPIDT+DTNIDT)/T
( 5462) C
( 5463) C               Derivative of interior internal energy density w.r.t. T
( 5464)       DEIDT = T*DSIDT
( 5465) C
( 5466) C
( 5467) C
( 5468) C
( 5469) C                    Derivatives of eta's w.r.t. X and NSUBI
( 5470)       DETPDX = GPI/X
( 5471)       DETNDX = -GNI/(1.0-X)
( 5472)       DETPDN = GPI/NSUBI
( 5473)       DETNDN = GNI/NSUBI






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 109

( 5474) C
( 5475) C                    Derivatives of Tau's w.r.t. X and NSUBI
( 5476)       DTPIDX = 1.5*T*NPI*DETPDX/UQ
( 5477)       DTNIDX = 1.5*T*NNI*DETNDX/UQ
( 5478)       DTPDNI = 1.5*T*NPI*DETPDN/UQ
( 5479)       DTNDNI = 1.5*T*NNI*DETNDN/UQ
( 5480) C
( 5481) C
( 5482) C
( 5483) C           Derivative of interior entropy density w.r.t. X
( 5484)       DSIDX = OVR53*UQ*(DTPIDX+DTNIDX)/T-NSUBI*(ETA_PI-ETA_NI)-
( 5485)      1    NSUBI*((1.0-X)*DETNDX+X*DETPDX)
( 5486) C
( 5487) C           Derivative of interior internal energy density w.r.t. X
( 5488) c20      DEIDX = UQ*(DTPIDX+DTNIDX)+
( 5489) c20     1    (NSUBI**2)*4.0*BB*(1.0-2.0*X)+NSUBI*DELTAM
( 5490)       DEIDX = UQ*(DTPIDX+DTNIDX)+DPVEDX(NSUBI,X)
( 5491) C
( 5492) C
( 5493) C           Derivative of interior entropy density w.r.t. NSUBI
( 5494)       DSIDN = OVR53*UQ*(DTPDNI+DTNDNI)/T-((1.0-X)*ETA_NI+X*ETA_PI)-
( 5495)      1    NSUBI*((1.0-X)*DETNDN+X*DETPDN)
( 5496) C
( 5497) C
( 5498) C           Derivative of interior internal energy density w.r.t. NSUBI
( 5499) c20      DEIDN = UQ*(DTPDNI+DTNDNI)+2.0*NSUBI*(AA+4.0*BB*X*(1.0-X))+
( 5500) c20     1    CC*(1.0+DD)*(NSUBI**DD)+X*DELTAM
( 5501)       DEIDN = UQ*(DTPDNI+DTNDNI)+DPVEDN(NSUBI,X)
( 5502) C
( 5503) C
( 5504) C
( 5505) C
( 5506) C
( 5507) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5508) C
( 5509) C                 -------------------------------------
( 5510) C                 !      Derivatives of exterior bulk !
( 5511) C                 !      nucleon internal energy &    !
( 5512) C                 !      entropy densities and the    !
( 5513) C                 !      chem. pot.  w.r.t. to eta_p, !
( 5514) C                 !      ate_n & T. These are used in !
( 5515) C                 !      calculating the derivatives  !
( 5516) C                 !      w.r.t. the independant vars  !
( 5517) C                 !      (Baryon density, T, and Ye)  !
( 5518) C                 !                                   !
( 5519) C                 -------------------------------------
( 5520) C
( 5521) C
( 5522)       S_OUT =(OVR53*UQ/T)*(TAU_NO+TAU_PO)-NNOUT*ETA_NO-NPOUT*ETA_PO
( 5523) C
( 5524) c20      E_OUT = UQ*(TAU_PO+TAU_NO)+EIFLAG*
( 5525) c20     1((NOUT**2)*AA+4.0*BB*NPOUT*NNOUT+CC*NOUT**(1.0+DD)+NPOUT*DELTAM
( 5526)       E_OUT = UQ*(TAU_PO+TAU_NO)+EIFLAG*PV_E(NPOUT,NNOUT)
( 5527) C
( 5528) C                   Derivative of exterior entropy density w.r.t. T
( 5529)       DSODT =  OVR53*UQ*(1.5*(TAU_PO+TAU_NO)/(T**2))-
( 5530)      1     1.5*(NPOUT*ETA_PO+NNOUT*ETA_NO)/T
( 5531) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 110

( 5532)       DEODT = T*DSODT
( 5533) C
( 5534) C                    Derivatives of exterior particle densities w.r.t.
( 5535) C                    Temperature (ETA's fixed)
( 5536)       DNPODT = 1.5*NPOUT/T
( 5537)       DNNODT = 1.5*NNOUT/T
( 5538) C
( 5539)       DMPODT = ETA_PO+DVPODP*DNPODT+DVPODN*DNNODT
( 5540)       DMNODT = ETA_NO+DVNODP*DNPODT+DVNODN*DNNODT
( 5541) C
( 5542) C
( 5543)       DNPDEP = NPOUT/GPO
( 5544)       DNNDEN = NNOUT/GNO
( 5545) C
( 5546)       DTPDEP = 1.5*T*NPOUT/UQ
( 5547)       DTNDEN = 1.5*T*NNOUT/UQ
( 5548) C
( 5549)       DSODEP = (OVR53*UQ/T)*DTPDEP-NPOUT-ETA_PO*DNPDEP
( 5550)       DSODEN = (OVR53*UQ/T)*DTNDEN-NNOUT-ETA_NO*DNNDEN
( 5551) C
( 5552) C
( 5553) C                    Exterior particle potentials
( 5554) c20      VNOUT = EIFLAG*(2.0*AA*NOUT+4.0*BB*NPOUT+CC*(1.0+DD)*NOUT**DD )
( 5555)       VNOUT = EIFLAG*PVN(NPOUT,NNOUT)
( 5556) c20      VPOUT = EIFLAG*
( 5557) c20     1    (2.0*AA*NOUT+4.0*BB*NNOUT+CC*(1.0+DD)*NOUT**DD+DELTAM)
( 5558)       VPOUT = EIFLAG*PVP(NPOUT,NNOUT)
( 5559) C
( 5560) C
( 5561)       DEODEP = UQ*DTPDEP+VPOUT*DNPDEP
( 5562)       DEODEN = UQ*DTNDEN+VNOUT*DNNDEN
( 5563) C
( 5564)       DMPDEP = T+DVPODP*NPOUT/GPO
( 5565)       DMPDEN = DVPODN*NNOUT/GNO
( 5566)       DMNDEP = DVNODP*NPOUT/GPO
( 5567)       DMNDEN = T+DVNODN*NNOUT/GNO
( 5568) C
( 5569) C
( 5570) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5571) C
( 5572) C                 -------------------------------------
( 5573) C                 !      Derivatives of alpha         !
( 5574) C                 !      particle internal energy &   !
( 5575) C                 !      entropy densities and the    !
( 5576) C                 !      chem. pot.  w.r.t. to eta_p, !
( 5577) C                 !      ate_n & T. These are used in !
( 5578) C                 !      calculating the derivatives  !
( 5579) C                 !      w.r.t. the independant vars  !
( 5580) C                 !      (Baryon density, T, and Ye)  !
( 5581) C                 !                                   !
( 5582) C                 -------------------------------------
( 5583) C
( 5584) C
( 5585) C
( 5586) C
( 5587)       S_ALFA = ALFDNS*(2.5-MUALFA/T)
( 5588) C
( 5589) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 111

( 5590)       E_ALFA = ALFDNS*(1.5*T-BALPHA)
( 5591) C
( 5592) C                  Derivative of pressure potential w.r.t. T
( 5593)       DV_DT = DV_DPO*DNPODT+DV_DNO*DNNODT
( 5594) C
( 5595) C                  Derivative of outside pressure w.r.t. T
( 5596)       DPODT = OVR23*UQ*2.5*(TAU_PO+TAU_NO)/T+DV_DT
( 5597) C
( 5598) C
( 5599)       DMUADT = 2.0*DMPODT+2.0*DMNODT-V_ALFA*DPODT
( 5600) C
( 5601) C                  Derivative of alpha particle density w.r.t. T
( 5602)       DNADT = 1.5*ALFDNS/T-ALFDNS*MUALFA/(T**2)+ALFDNS*DMUADT/T
( 5603) C
( 5604) C
( 5605)       DSADT = DNADT*(2.5-MUALFA/T)-ALFDNS*DMUADT/T+ALFDNS*MUALFA/T**2
( 5606) C
( 5607)       DEADT = DNADT*(1.5*T-BALPHA)+1.5*ALFDNS
( 5608) C
( 5609) C
( 5610)       DV_DEP = DV_DPO*NPOUT/GPO
( 5611)       DV_DEN = DV_DNO*NNOUT/GNO
( 5612) C
( 5613)       DPODEP = OVR23*UQ*DTPDEP+DV_DEP
( 5614)       DPODEN = OVR23*UQ*DTNDEN+DV_DEN
( 5615) C
( 5616)       DMADEP = 2.0*DMPDEP+2.0*DMNDEP-V_ALFA*DPODEP
( 5617)       DMADEN = 2.0*DMPDEN+2.0*DMNDEN-V_ALFA*DPODEN
( 5618) C
( 5619)       DNADEP = ALFDNS*DMADEP/T
( 5620)       DNADEN = ALFDNS*DMADEN/T
( 5621) C
( 5622)       DSADEP = DNADEP*(2.5-MUALFA/T)-ALFDNS*DMADEP/T
( 5623)       DSADEN = DNADEN*(2.5-MUALFA/T)-ALFDNS*DMADEN/T
( 5624) C
( 5625)       DEADEP = DNADEP*(1.5*T-BALPHA)
( 5626)       DEADEN = DNADEN*(1.5*T-BALPHA)
( 5627) C
( 5628) C\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
( 5629) C23456789012345678901234567890123456789012345678901234567890123456789012
( 5630) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5631) C
( 5632)       S_DENS = U_NUC*S_NUC+EXCLU*EXALFA*S_OUT+EXCLU*S_ALFA+S_SC+S_TR
( 5633) C
( 5634)       E_DENS = U_NUC*E_NUC+EXCLU*EXALFA*E_OUT+EXCLU*E_ALFA+E_SC+E_TR
( 5635) C
( 5636) C
( 5637) C23456789012345678901234567890123456789012345678901234567890123456789012
( 5638) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5639) C
( 5640) C
( 5641) C                 ------------------------------------
( 5642) C                 !                                  !
( 5643) C                 !                                  !
( 5644) C                 !                                  !
( 5645) C                 !      Temperature Derivatives     !
( 5646) C                 !                                  !
( 5647) C                 !                                  !






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 112

( 5648) C                 !                                  !
( 5649) C                 ------------------------------------
( 5650) C
( 5651)       DNA_DT = DNADT+DNADEP*DEP_DT+DNADEN*DEN_DT
( 5652) C
( 5653) C
( 5654)       DBSDT = (DU_DT*S_NUC-
( 5655)      1    DU_DT*EXALFA*S_OUT-EXCLU*V_ALFA*DNA_DT*S_OUT
( 5656)      2    -DU_DT*S_ALFA+
( 5657)      3    U_NUC*(DSIDT+DSIDX*DX_DT+DSIDN*DNI_DT)+
( 5658)      4    EXCLU*EXALFA*(DSODT+DSODEP*DEP_DT+DSODEN*DEN_DT)+
( 5659)      5    EXCLU*(DSADT+DSADEP*DEP_DT+DSADEN*DEN_DT)+
( 5660)      6    DSSCDT+DSSCDU*DU_DT+DSSCDX*DX_DT+DSSCDN*DNI_DT+
( 5661)      7    DSTRDT+DSTRDU*DU_DT+DSTRDX*DX_DT+DSTRDN*DNI_DT)/BRYDNS
( 5662) C
( 5663) C
( 5664) C~~~~~~~~~~~~~~~~~~
( 5665) C
( 5666)       DBUDT = T*DBSDT
( 5667) C
( 5668) C
( 5669) C~~~~~~~~~~~~~~~~~~
( 5670) C
( 5671) C
( 5672)       DBFDT = DBUDT-S_DENS/BRYDNS-T*DBSDT
( 5673) C
( 5674) C~~~~~~~~~~~~~~~~~~
( 5675) C
( 5676)       DBMUDT = YE*(DMPODT+DMPDEP*DEP_DT+DMPDEN*DEN_DT)+
( 5677)      1    (1.0-YE)*(DMNODT+DMNDEP*DEP_DT+DMNDEN*DEN_DT)
( 5678) C
( 5679) C~~~~~~~~~~~~~~~~~~
( 5680) C
( 5681)       DBPDT = BRYDNS*(DBMUDT-DBFDT)
( 5682) C
( 5683) C
( 5684) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5685) C23456789012345678901234567890123456789012345678901234567890123456789012
( 5686) C
( 5687) C
( 5688) C
( 5689) C                 ------------------------------------
( 5690) C                 !                                  !
( 5691) C                 !                                  !
( 5692) C                 !                                  !
( 5693) C                 !       Density Derivatives        !
( 5694) C                 !                                  !
( 5695) C                 !                                  !
( 5696) C                 !                                  !
( 5697) C                 ------------------------------------
( 5698) C
( 5699) C
( 5700)       DNA_DN = DNADEP*DEP_DN+DNADEN*DEN_DN
( 5701) C
( 5702) C
( 5703)       DBSDN = (DU_DN*S_NUC-
( 5704)      1    DU_DN*EXALFA*S_OUT-EXCLU*V_ALFA*DNA_DN*S_OUT-DU_DN*S_ALFA+
( 5705)      2    U_NUC*(DSIDX*DX_DN+DSIDN*DNI_DN)+






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 113

( 5706)      3    EXCLU*EXALFA*(DSODEP*DEP_DN+DSODEN*DEN_DN)+
( 5707)      4    EXCLU*(DSADEP*DEP_DN+DSADEN*DEN_DN)+
( 5708)      5    DSSCDU*DU_DN+DSSCDX*DX_DN+DSSCDN*DNI_DN+
( 5709)      6    DSTRDU*DU_DN+DSTRDX*DX_DN+DSTRDN*DNI_DN)/BRYDNS-
( 5710)      7    S_DENS/BRYDNS**2
( 5711) C
( 5712) C
( 5713) C
( 5714) C~~~~~~~~~~~~~~~~~~
( 5715) C
( 5716)       DBUDN = (DU_DN*E_NUC-
( 5717)      1    DU_DN*EXALFA*E_OUT-EXCLU*V_ALFA*DNA_DN*E_OUT-DU_DN*E_ALFA+
( 5718)      2    U_NUC*(DEIDX*DX_DN+DEIDN*DNI_DN)+
( 5719)      3    EXCLU*EXALFA*(DEODEP*DEP_DN+DEODEN*DEN_DN)+
( 5720)      4    EXCLU*(DEADEP*DEP_DN+DEADEN*DEN_DN)+
( 5721)      5    DESCDU*DU_DN+DESCDX*DX_DN+DESCDN*DNI_DN+
( 5722)      6    DETRDU*DU_DN+DETRDX*DX_DN+DETRDN*DNI_DN)/BRYDNS-
( 5723)      7    E_DENS/BRYDNS**2
( 5724) C
( 5725) C
( 5726) C
( 5727) C
( 5728) C
( 5729) C
( 5730) C~~~~~~~~~~~~~~~~~~
( 5731) C
( 5732) C
( 5733)       DBFDN = DBUDN-T*DBSDN
( 5734) C
( 5735) C~~~~~~~~~~~~~~~~~~
( 5736) C
( 5737)       DBMUDN = YE*(DMPDEP*DEP_DN+DMPDEN*DEN_DN)+
( 5738)      1    (1.0-YE)*(DMNDEP*DEP_DN+DMNDEN*DEN_DN)
( 5739) C
( 5740) C~~~~~~~~~~~~~~~~~~
( 5741) C
( 5742)       DBPDN = BRYDNS*(DBMUDN-DBFDN)+MUBARY-BFTOT
( 5743) C
( 5744) C
( 5745) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5746) C23456789012345678901234567890123456789012345678901234567890123456789012
( 5747) C
( 5748) C
( 5749) C
( 5750) C                 ------------------------------------
( 5751) C                 !                                  !
( 5752) C                 !                                  !
( 5753) C                 !                                  !
( 5754) C                 !         Ye Derivatives           !
( 5755) C                 !                                  !
( 5756) C                 !                                  !
( 5757) C                 !                                  !
( 5758) C                 ------------------------------------
( 5759) C
( 5760) C
( 5761) C
( 5762) C
( 5763)       DNA_DY = DNADEP*DEP_DY+DNADEN*DEN_DY






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 114

( 5764) C
( 5765) C
( 5766)       DBSDY = (DU_DY*S_NUC-
( 5767)      1    DU_DY*EXALFA*S_OUT-EXCLU*V_ALFA*DNA_DY*S_OUT-DU_DY*S_ALFA+
( 5768)      2    U_NUC*(DSIDX*DX_DY+DSIDN*DNI_DY)+
( 5769)      3    EXCLU*EXALFA*(DSODEP*DEP_DY+DSODEN*DEN_DY)+
( 5770)      4    EXCLU*(DSADEP*DEP_DY+DSADEN*DEN_DY)+
( 5771)      5    DSSCDU*DU_DY+DSSCDX*DX_DY+DSSCDN*DNI_DY+
( 5772)      6    DSTRDU*DU_DY+DSTRDX*DX_DY+DSTRDN*DNI_DY)/BRYDNS
( 5773) C
( 5774) C
( 5775) C~~~~~~~~~~~~~~~~~~
( 5776) C
( 5777)       DBUDY = (DU_DY*E_NUC-
( 5778)      1    DU_DY*EXALFA*E_OUT-EXCLU*V_ALFA*DNA_DY*E_OUT-DU_DY*E_ALFA+
( 5779)      2    U_NUC*(DEIDX*DX_DY+DEIDN*DNI_DY)+
( 5780)      3    EXCLU*EXALFA*(DEODEP*DEP_DY+DEODEN*DEN_DY)+
( 5781)      4    EXCLU*(DEADEP*DEP_DY+DEADEN*DEN_DY)+
( 5782)      5    DESCDU*DU_DY+DESCDX*DX_DY+DESCDN*DNI_DY+
( 5783)      6    DETRDU*DU_DY+DETRDX*DX_DY+DETRDN*DNI_DY)/BRYDNS
( 5784) C
( 5785) C
( 5786) C
( 5787) C~~~~~~~~~~~~~~~~~~
( 5788) C
( 5789) C
( 5790)       DBFDY = DBUDY-T*DBSDY
( 5791) C
( 5792) C~~~~~~~~~~~~~~~~~~
( 5793) C
( 5794)       DBMUDY = YE*(DMPDEP*DEP_DY+DMPDEN*DEN_DY)+MUPROT+
( 5795)      1    (1.0-YE)*(DMNDEP*DEP_DY+DMNDEN*DEN_DY)-MUN
( 5796) C
( 5797) C~~~~~~~~~~~~~~~~~~
( 5798) C
( 5799)       DBPDY = BRYDNS*(DBMUDY-DBFDY)
( 5800) C
( 5801) C
( 5802) C
( 5803) C
( 5804) C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( 5805) C23456789012345678901234567890123456789012345678901234567890123456789012
( 5806) C
( 5807) C
( 5808) C-----------------------------------------------------------------------
( 5809) C                End of derivatives of thermodynamic variables
( 5810) C-----------------------------------------------------------------------
( 5811) C
( 5812) C                  Total derivatives
( 5813) C                  (Baryons+Electrons+Photons)
( 5814) C
( 5815)       DUDT = DBUDT+DEUDT+DPUDT
( 5816)       DUDN = DBUDN+DEUDN+DPUDN
( 5817)       DUDY = DBUDY+DEUDY+DPUDY
( 5818) C
( 5819) C
( 5820)       DSDT = DBSDT+DESDT+DPSDT
( 5821)       DSDN = DBSDN+DESDN+DPSDN






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 115

( 5822)       DSDY = DBSDY+DESDY+DPSDY
( 5823) C
( 5824) C
( 5825)       DPDT = DBPDT+DEPDT+DPPDT
( 5826)       DPDN = DBPDN+DEPDN+DPPDN
( 5827)       DPDY = DBPDY+DEPDY+DPPDY
( 5828) C
( 5829) C
( 5830)       DMUDT = DBMUDT+YE*DEMUDT
( 5831)       DMUDN = DBMUDN+YE*DEMUDN
( 5832)       DMUDY = DBMUDY+YE*DEMUDY
( 5833) C
( 5834) C                Calculate the adiabatic index
( 5835)       GAM_S = BRYDNS*DPDN/PTOT+T*(DPDT**2)/(BRYDNS*PTOT*DUDT)
( 5836) C
( 5837) C
( 5838) C                Set the value of XPREV to X for use the next
( 5839) C                time through
( 5840) C
( 5841)       XPREV = X
( 5842) C
( 5843) C                Save the value of the proton density to be used
( 5844) C                by the "no nuclei" scheme on the next call
( 5845)       P_PREV = NPOUT
( 5846) C
( 5847) C
( 5848) C                Return the three internal compositional variables
( 5849)       INPVAR(2) = NSUBI
( 5850)       INPVAR(3) = ETA_PO
( 5851)       INPVAR(4) = ETA_NO
( 5852) C
( 5853)   999 CONTINUE
( 5854) C
( 5855) C                Rejoice for this routine is finished!!!!!!!
( 5856)       RETURN
( 5857) C
( 5858) C
( 5859)       END


























PGF90 (Version     14.9)          03/12/2015  00:11:50      page 116

( 5860) Cnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnucnu
( 5861) 
( 5862) !///////////////////////////////////////////////////////////////////////
( 5863) 
( 5864) C23456789012345678901234567890123456789012345678901234567890123456789012
( 5865) C***********************************************************************
( 5866) C
( 5867) C    FILE:         RESET.FOR
( 5868) C
( 5869) C***********************************************************************
( 5870) C
( 5871) C    MODULE:       RESET
( 5872) C    TYPE:         SUBROUTINE
( 5873) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 5874) C
( 5875) C    DATE:         12/21/90
( 5876) C
( 5877) C                  Please report any problems to me at:
( 5878) C                  BITNET:  SWESTY@SUNYSBNP or
( 5879) C                  INTERNET: FSWESTY@ASTRO.SUNYSB.EDU or
( 5880) C                            fswesty@sbast3.sunysb.edu
( 5881) C
( 5882) C
( 5883) C    CALL LINE:    CALL RESET(INPVAR,YE,BRYDNS,OUTVAR)
( 5884) C
( 5885) C
( 5886) C    INPUTS:       INPVAR = TEMP, NSUBI, ETA_PO, ETA_NO
( 5887) C                  YE = ELECTRON FRACTION
( 5888) C                  BRYDNS = BARYON NUMBER DENSITY
( 5889) C
( 5890) C
( 5891) C
( 5892) C    OUTPUTS:      OUTVAR = ARRAY OF LENGTH 4 CONTAINING RESET VALUES
( 5893) C                  FOR THE INITIAL GUESSES
( 5894) C
( 5895) C
( 5896) C
( 5897) C
( 5898) C    INCLUDE FILES: NONE
( 5899) C
( 5900) C
( 5901) C***********************************************************************
( 5902) C23456789012345678901234567890123456789012345678901234567890123456789012
( 5903) C
( 5904)       SUBROUTINE RESET(INPVAR,YE,BRYDNS,OUTVAR)
( 5905) C
( 5906) C
( 5907)       IMPLICIT NONE
( 5908) C
( 5909) C
( 5910) C                      Subroutine parameters
( 5911) C
( 5912)       DOUBLE PRECISION INPVAR(4), OUTVAR(4), YE, BRYDNS
( 5913) C
( 5914) C
( 5915) C                      Local variables
( 5916) C
( 5917)       DOUBLE PRECISION ZPG, ZNG, ETA_PG, ETA_NG, PI, UQ, MQ, T, EFRAC






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 117

( 5918) C
( 5919) C                      Functions
( 5920) C
( 5921)       DOUBLE PRECISION FINV12
( 5922) C
( 5923) C-----------------------------------------------------------------------
( 5924) C
( 5925)       T = INPVAR(1)
( 5926) C
( 5927) C
( 5928)       PI = 3.1415927
( 5929)       UQ = 20.721
( 5930) C
( 5931)       MQ = (T/UQ)**1.5
( 5932) C
( 5933) C
( 5934)       EFRAC = 0.5*YE
( 5935) C
( 5936)       ZNG = 2.0*(PI**2)*BRYDNS*(1.0-EFRAC)/MQ
( 5937) C
( 5938)       ZPG = 2.0*(PI**2)*BRYDNS*EFRAC/MQ
( 5939) C
( 5940)       ETA_NG = FINV12(ZNG)
( 5941) C
( 5942)       ETA_PG = FINV12(ZPG)
( 5943) C
( 5944)       OUTVAR(1) = INPVAR(1)
( 5945)       OUTVAR(2) = INPVAR(2)
( 5946)       OUTVAR(3) = ETA_PG
( 5947)       OUTVAR(4) = ETA_NG
( 5948) C
( 5949) C
( 5950) C-----------------------------------------------------------------------
( 5951) C
( 5952)  999  RETURN
( 5953) C
( 5954) C
( 5955)       END


























PGF90 (Version     14.9)          03/12/2015  00:11:50      page 118

( 5956) 
( 5957) !///////////////////////////////////////////////////////////////////////
( 5958) 
( 5959) C23456789012345678901234567890123456789012345678901234567890123456789012
( 5960) C***********************************************************************
( 5961) C
( 5962) C    FILE:         SILEOS.F
( 5963) C
( 5964) C***********************************************************************
( 5965) C
( 5966) C    MODULE:       SILEOS
( 5967) C    TYPE:         SUBROUTINE
( 5968) C    AUTHOR:       F. DOUGLAS SWESTY, Dpt of Physics SUNY @ Stony Brook
( 5969) C                  BITNET:  SWESTY@SUNYSBNP or
( 5970) C                  INTERNET: swesty@nuclear.physics.sunysb.edu
( 5971) C                            -or-
( 5972) C                            fswesty@sbast3.ess.sunysb.edu
( 5973) C
( 5974) C    VERSION:      1.0 1/20/93
( 5975) C                  2.0 1/28/93
( 5976) C
( 5977) C
( 5978) C    PURPOSE:      Calculate the EOS assuming a Boltzmann gas of Si^28
( 5979) C                  plus electrons
( 5980) C
( 5981) C
( 5982) C
( 5983) C    CALL LINE:    CALL SILEOS(MODE,I_T,YE,BRYDNS,EB)
( 5984) C
( 5985) C    INPUTS:       MODE = Input variable mode (INTEGER)
( 5986) C                        1--> Temp; 2--> Internal energy per baryon
( 5987) C                  I_T = Temperature (in MeV) (DOUBLE PRECISION)
( 5988) C                        (Used if MODE = 2)
( 5989) C                  YE = Electron fraction (DOUBLE PRECISION)
( 5990) C                  BRYDNS = Baryon density (in fm^-3) (DOUBLE PRECISION)
( 5991) C                  EB = Internal energy per baryon (DOUBLE PRECISION)
( 5992) C                       in units of MeV. (Used if MODE = 2)
( 5993) C
( 5994) C    OUTPUTS:      NONE
( 5995) C
( 5996) C
( 5997) C    INCLUDE FILES:  EOS_M4A.INC, EL_EOS.INC
( 5998) C
( 5999) C
( 6000) C
( 6001) C***********************************************************************
( 6002) C23456789012345678901234567890123456789012345678901234567890123456789012
( 6003) C
( 6004)       SUBROUTINE SILEOS(MODE,T,YE,BRYDNS,EB)
( 6005) C
( 6006)       USE el_eos_module
( 6007)       USE eos_m4c_module
( 6008) C
( 6009)       IMPLICIT NONE
( 6010) C
( 6011)       CHARACTER*128 c_diagnostic
( 6012)       INTEGER MODE
( 6013)       DOUBLE PRECISION EB, DEL_T






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 119

( 6014) C
( 6015) C
( 6016) C                      Baryon number density
( 6017)       DOUBLE PRECISION N_SI, MU_SI
( 6018)       DOUBLE PRECISION T,YE,BRYDNS
( 6019) C
( 6020) C23456789012345678901234567890123456789012345678901234567890123456789012
( 6021) C                      Temperature as input
( 6022) C23456789012345678901234567890123456789012345678901234567890123456789012
( 6023) C
( 6024)       IF(MODE.EQ.1) THEN
( 6025) C                      Number density of silicon nuclei
( 6026)         N_SI = BRYDNS/28.0D0
( 6027) C                      Atomic mass
( 6028)         A = 28.0D0
( 6029) C                      Proton fraction of Si^28
( 6030)         X = 0.5D0
( 6031) C                      Mass fractions
( 6032)         XH = 1.0D0
( 6033)         XALFA = 0.0D0
( 6034)         XNUT = 0.0D0
( 6035)         XPROT = 0.0D0
( 6036) C
( 6037) C                      Quantum concentration (Note the factor of 28
( 6038) C                      is from the mass of silicon)
( 6039)         NQ = 2.36D-4*((28.0D0*T)**1.5D0)
( 6040) C
( 6041) C                      Translational chemical potential of silicon
( 6042)         MU_SI = T*DLOG(N_SI/NQ)
( 6043) C
( 6044) C                      Entropy per baryon of silicon
( 6045)         BS = 2.5D0-MU_SI/T
( 6046) C
( 6047) C                      Silicon internal energy
( 6048)         BU = 1.5D0*T-8.791
( 6049) C
( 6050) C                      Free energy per baryon
( 6051)         BFTOT = BU-T*BS
( 6052) C
( 6053) C                      Silicon pressure
( 6054)         BPRESS = N_SI*T
( 6055) C
( 6056) C                      Adiabatic index
( 6057)         GAM_S = 1.667D0
( 6058) C
( 6059) C                      Difference in chemical potentials
( 6060)         MUHAT = 0.0D0
( 6061) C
( 6062) C                      Call the electron EOS
( 6063)         CALL EL_EOS(T,YE,BRYDNS)
( 6064) C
( 6065) C                      Total free energy per baryon
( 6066)         FTOT = BFTOT+FSUBE+PF
( 6067) C
( 6068) C                      Total internal energy per baryon
( 6069)         UTOT = BU+EU+PU
( 6070) C
( 6071) C                      Total entropy per baryon






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 120

( 6072)         STOT = BS+ES+PS
( 6073) C
( 6074) C                      Total pressure
( 6075)         PTOT = BPRESS+EPRESS+PPRESS
( 6076) C
( 6077) C
( 6078) C                      Temperature derivatives
( 6079)         DUDT = 1.5D0+DEUDT+DPUDT
( 6080)         DPDT = N_SI+DEPDT+DPPDT
( 6081) C                      Density derivatives
( 6082)         DUDN = 0.0D0+DEUDN+DPUDN
( 6083)         DPDN = T+DEPDN+DPPDN
( 6084) C                      Ye derivatives
( 6085)         DUDY = 0.0D0+DEUDY+DPUDY
( 6086)         DPDY = 0.0D0+DEPDY+DPPDY
( 6087)       ELSEIF(MODE.EQ.2) THEN
( 6088) C
( 6089) C23456789012345678901234567890123456789012345678901234567890123456789012
( 6090) C                      Internal energy per baryon as input
( 6091) C23456789012345678901234567890123456789012345678901234567890123456789012
( 6092)         DO 20 K=1,20,1
( 6093) C                      Number density of silicon nuclei
( 6094)           N_SI = BRYDNS/28.0D0
( 6095) C                      Atomic mass
( 6096)           A = 28.0D0
( 6097) C                      Proton fraction of Si^28
( 6098)           X = 0.5D0
( 6099) C                      Mass fractions
( 6100)           XH = 1.0D0
( 6101)           XALFA = 0.0D0
( 6102)           XNUT = 0.0D0
( 6103)           XPROT = 0.0D0
( 6104) C
( 6105) C                      Quantum concentration (Note the factor of 28
( 6106) C                      is from the mass of silicon)
( 6107)           NQ = 2.36D-4*((28.0D0*T)**1.5D0)
( 6108) C
( 6109) C                      Translational chemical potential of silicon
( 6110)           MU_SI = T*DLOG(N_SI/NQ)
( 6111) C
( 6112) C                      Entropy per baryon of silicon
( 6113)           BS = 2.5D0-MU_SI/T
( 6114) C
( 6115) C                      Silicon internal energy
( 6116)           BU = 1.5D0*T-8.791
( 6117) C
( 6118) C                      Free energy per baryon
( 6119)           BFTOT = BU-T*BS
( 6120) C
( 6121) C                      Silicon pressure
( 6122)           BPRESS = N_SI*T
( 6123) C
( 6124) C                      Adiabatic index
( 6125)           GAM_S = 1.667D0
( 6126) C
( 6127) C                      Difference in chemical potentials
( 6128)           MUHAT = 0.0D0
( 6129) C






PGF90 (Version     14.9)          03/12/2015  00:11:50      page 121

( 6130) C                      Call the electron EOS
( 6131)           CALL EL_EOS(T,YE,BRYDNS)
( 6132) C
( 6133) C                      Total free energy per baryon
( 6134)           FTOT = BFTOT+FSUBE+PF
( 6135) C
( 6136) C                      Total internal energy per baryon
( 6137)           UTOT = BU+EU+PU
( 6138) C
( 6139) C                      Total entropy per baryon
( 6140)           STOT = BS+ES+PS
( 6141) C
( 6142) C                      Total pressure
( 6143)           PTOT = BPRESS+EPRESS+PPRESS
( 6144) C
( 6145) C
( 6146) C                      Temperature derivatives
( 6147)           DUDT = 1.5D0+DEUDT+DPUDT
( 6148)           DPDT = N_SI+DEPDT+DPPDT
( 6149) C                      Density derivatives
( 6150)           DUDN = 0.0D0+DEUDN+DPUDN
( 6151)           DPDN = T+DEPDN+DPPDN
( 6152) C                      Ye derivatives
( 6153)           DUDY = 0.0D0+DEUDY+DPUDY
( 6154)           DPDY = 0.0D0+DEPDY+DPPDY
( 6155) C
( 6156)           DEL_T = (EB-UTOT)/DUDT
( 6157) C
( 6158)           IF(DABS(DEL_T/T).LT.1.0D-6) THEN
( 6159)             GOTO 30
( 6160)           ELSE
( 6161)             T = T+DEL_T
( 6162)           ENDIF
( 6163)  20     CONTINUE
( 6164) C
( 6165)  30     CONTINUE
( 6166) C
( 6167) C
( 6168) C23456789012345678901234567890123456789012345678901234567890123456789012
( 6169) C                      Scream at the user & die!!!
( 6170) C23456789012345678901234567890123456789012345678901234567890123456789012
( 6171)       ELSE
( 6172)         WRITE(*,*) ' SILEOS: Mode # ',MODE,' not supported! '
( 6173)         STOP
( 6174) C
( 6175)       ENDIF
( 6176) C
( 6177)   999 CONTINUE
( 6178) C
( 6179) C
( 6180)       RETURN
( 6181)       END












PGF90 (Version     14.9)          03/12/2015  00:11:50      page 122

( 6182) 
( 6183) !///////////////////////////////////////////////////////////////////////
( 6184) 
( 6185)         SUBROUTINE SPLINE(X,Y,N,Y2)
( 6186) c  Computes spline coefficients; Y(X) is input data; Y2 is output.
( 6187)         implicit real*8(a-h,o-z)
( 6188)         DIMENSION X(N),Y(N),Y2(N),U(500)
( 6189)         Y2(1)=0.
( 6190)         U(1)=0.
( 6191)         DO 11 I=2,N-1
( 6192)         SIG=(X(I)-X(I-1))/(X(I+1)-X(I-1))
( 6193)         P=SIG*Y2(I-1)+2.
( 6194)         Y2(I)=(SIG-1.)/P
( 6195)  11     U(I)=(6.*((Y(I+1)-Y(I))/(X(I+1)-X(I))-(Y(I)-Y(I-1))
( 6196)      1 /(X(I)-X(I-1)))/(X(I+1)-X(I-1))-SIG*U(I-1))/P
( 6197)         Y2(N)=0.
( 6198)         DO 12 K=N-1,1,-1
( 6199)  12     Y2(K)=Y2(K)*Y2(K+1)+U(K)
( 6200)         RETURN
( 6201)         END












































PGF90 (Version     14.9)          03/12/2015  00:11:50      page 123

( 6202) 
( 6203) !///////////////////////////////////////////////////////////////////////
( 6204) 
( 6205)         SUBROUTINE SPLINT(XA,YA,Y2A,N,X,Y,KLO,KHI)
( 6206) c     Computes spline fit of Y(X); YA(XA) is input data, Y2A are spline
( 6207) c  coefficents, klo and khi are running indices which bracket X.
( 6208)         implicit real*8(a-h,o-z)
( 6209)         CHARACTER*128 c_diagnostic
( 6210)         DIMENSION XA(N),YA(N),Y2A(N)
( 6211) cc  Determine the bracketing indices
( 6212)         IF((KHI.GT.N).OR.(KLO.LT.1)) THEN
( 6213)           WRITE(*,*) ' SPLINT CRASHED '
( 6214)           WRITE(*,*) ' N,KHI,KLO =',N,KHI,KLO
( 6215)           STOP
( 6216)         ENDIF
( 6217) C
( 6218)         IF((KHI.GT.N).OR.(KHI.LT.1)) KHI = N
( 6219)         IF((KLO.GT.N).OR.(KLO.LT.1)) KLO = 1
( 6220) C
( 6221)         IF(KHI-KLO.GT.1)GOTO 1
( 6222) c-----------------------------------------------------
( 6223)         IF(XA(KHI).GT.X.AND.XA(KLO).LE.X) GOTO 2
( 6224)         KHI=MAX(KHI-1,1)
( 6225)         KLO=MAX(KLO-1,1)
( 6226)         IF(XA(KHI).GT.X.AND.XA(KLO).LE.X) GOTO 2
( 6227)         KHI=MIN(KHI+2,N)
( 6228)         KLO=MIN(KLO+2,N)
( 6229)         IF(XA(KHI).GT.X.AND.XA(KLO).LE.X) GOTO 2
( 6230) c-----------------------------------------------------
( 6231)         KLO=1
( 6232)         KHI=N
( 6233)  1      IF(KHI-KLO.EQ.1) GOTO 2
( 6234)         K=(KHI+KLO)/2
( 6235)         IF(XA(K).GT.X)THEN
( 6236)         KHI=K
( 6237)         ELSE
( 6238)         KLO=K
( 6239)         ENDIF
( 6240)         GOTO 1
( 6241)  2      H=XA(KHI)-XA(KLO)
( 6242)         IF(H.EQ.0.) STOP 'BAD XA INPUT. '
( 6243) cc  Compute spline fit.
( 6244)         A=(XA(KHI)-X)/H
( 6245)         B=(X-XA(KLO))/H
( 6246)         Y=A*YA(KLO)+B*YA(KHI)+
( 6247)      1 ((A**3-A)*Y2A(KLO)+(B**3-B)*Y2A(KHI))*H**2/6.
( 6248) c       write(*,5)klo,khi,x,xa(klo),xa(khi),ya(klo),ya(khi)
( 6249) c     > ,y2a(klo),y2a(khi),y
( 6250)  5      format(2i3,8(1pe9.2))
( 6251)         RETURN
( 6252)         END













PGF90 (Version     14.9)          03/12/2015  00:11:50      page 124

( 6253) 
( 6254) !///////////////////////////////////////////////////////////////////////
( 6255) 
( 6256) C
( 6257) C
( 6258) C***********************************************************************
( 6259) C
( 6260) C    MODULE:       VECCOP
( 6261) C    TYPE:         SUBROUTINE
( 6262) C    AUTHOR:       F. DOUGLAS SWESTY
( 6263) C    DATE:         4/10/90
( 6264) C
( 6265) C    PURPOSE:      Copy one vector on length N into another
( 6266) C
( 6267) C    CALL LINE:    CALL VECCOP(A,B,N)
( 6268) C
( 6269) C    INPUTS:       A = Array to be copied  (D)
( 6270) C                  N = Number of rows in arrays (I)
( 6271) C
( 6272) C    OUTPUTS:      B = Array to be copied into (D)
( 6273) C
( 6274) C    CALLS :       None
( 6275) C***********************************************************************
( 6276) C23456789012345678901234567890123456789012345678901234567890123456789012
( 6277)       SUBROUTINE VECCOP(A,B,N)
( 6278) C
( 6279)       IMPLICIT NONE
( 6280) C
( 6281)       INTEGER N
( 6282)       DOUBLE PRECISION A(N), B(N)
( 6283) C
( 6284) C
( 6285) C                 Local variables
( 6286) C
( 6287)       INTEGER I
( 6288) C
( 6289)       DO 10 I=1,N,1
( 6290)         B(I) = A(I)
( 6291)  10   CONTINUE
( 6292) C
( 6293)  999  RETURN
( 6294) C
( 6295)       END


















